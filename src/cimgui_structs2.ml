(* This file was generated by imguiml_generator.exe on 26/04/2024 *)

open Ctypes
open Cimgui_types
open Cimgui_structs1.Structs(Cimgui_structs1_generated)
open Cimgui_structs1
open Cimgui_enums.Enums (Cimgui_enums_generated)
open Cimgui_base_structs.Base(Cimgui_base_structs_generated)

module FontGlyph = struct
  type t = font_glyph_t structure
  let t : t typ = structure "ImFontGlyph"
  let colored = field t "Colored" (lift_typ int_as_uint)
  let visible = field t "Visible" (lift_typ int_as_uint)
  let codepoint = field t "Codepoint" (lift_typ int_as_uint)
  let advance_x = field t "AdvanceX" float
  let x0 = field t "X0" float
  let y0 = field t "Y0" float
  let x1 = field t "X1" float
  let y1 = field t "Y1" float
  let u0 = field t "U0" float
  let v0 = field t "V0" float
  let u1 = field t "U1" float
  let v1 = field t "V1" float
  let () = seal t
end

module DockNode = struct
  type t = dock_node_t structure
  let t : t typ = structure "ImGuiDockNode"
  let id = field t "ID" (lift_typ id_t)
  let shared_flags = field t "SharedFlags" (lift_typ dock_node_flags_t)
  let local_flags = field t "LocalFlags" (lift_typ dock_node_flags_t)
  let local_flags_in_windows =
    field t "LocalFlagsInWindows" (lift_typ dock_node_flags_t)
  let merged_flags = field t "MergedFlags" (lift_typ dock_node_flags_t)
  let state = field t "State" (lift_typ DockNodeState.t)
  let parent_node = field t "ParentNode" (ptr (lift_typ dock_node_t))
  let child_nodes =
    field t "ChildNodes" (array (2) (ptr (lift_typ dock_node_t)))
  let windows = field t "Windows" (lift_typ Vector_ImWindowPtr.t)
  let tab_bar = field t "TabBar" (ptr (lift_typ tab_bar_t))
  let pos = field t "Pos" (lift_typ Vec2.t)
  let size = field t "Size" (lift_typ Vec2.t)
  let size_ref = field t "SizeRef" (lift_typ Vec2.t)
  let split_axis = field t "SplitAxis" (lift_typ Axis.t)
  let window_class = field t "WindowClass" (lift_typ WindowClass.t)
  let last_bg_color = field t "LastBgColor" (lift_typ u32_t)
  let host_window = field t "HostWindow" (ptr (lift_typ window_t))
  let visible_window = field t "VisibleWindow" (ptr (lift_typ window_t))
  let central_node = field t "CentralNode" (ptr (lift_typ dock_node_t))
  let only_node_with_windows =
    field t "OnlyNodeWithWindows" (ptr (lift_typ dock_node_t))
  let count_node_with_windows = field t "CountNodeWithWindows" int
  let last_frame_alive = field t "LastFrameAlive" int
  let last_frame_active = field t "LastFrameActive" int
  let last_frame_focused = field t "LastFrameFocused" int
  let last_focused_node_id = field t "LastFocusedNodeId" (lift_typ id_t)
  let selected_tab_id = field t "SelectedTabId" (lift_typ id_t)
  let want_close_tab_id = field t "WantCloseTabId" (lift_typ id_t)
  let ref_viewport_id = field t "RefViewportId" (lift_typ id_t)
  let authority_for_pos = field t "AuthorityForPos" (lift_typ data_authority_t)
  let authority_for_size =
    field t "AuthorityForSize" (lift_typ data_authority_t)
  let authority_for_viewport =
    field t "AuthorityForViewport" (lift_typ data_authority_t)
  let is_visible = field t "IsVisible" bool
  let is_focused = field t "IsFocused" bool
  let is_bg_drawn_this_frame = field t "IsBgDrawnThisFrame" bool
  let has_close_button = field t "HasCloseButton" bool
  let has_window_menu_button = field t "HasWindowMenuButton" bool
  let has_central_node_child = field t "HasCentralNodeChild" bool
  let want_close_all = field t "WantCloseAll" bool
  let want_lock_size_once = field t "WantLockSizeOnce" bool
  let want_mouse_move = field t "WantMouseMove" bool
  let want_hidden_tab_bar_update = field t "WantHiddenTabBarUpdate" bool
  let want_hidden_tab_bar_toggle = field t "WantHiddenTabBarToggle" bool
  let () = seal t
end

module StackLevelInfo = struct
  type t = stack_level_info_t structure
  let t : t typ = structure "ImGuiStackLevelInfo"
  let id = field t "ID" (lift_typ id_t)
  let query_frame_count = field t "QueryFrameCount" (lift_typ s8_t)
  let query_success = field t "QuerySuccess" bool
  let data_type = field t "DataType" (lift_typ data_type_t)
  let desc = field t "Desc" (array (57) char)
  let () = seal t
end

module Context = struct
  type t = context_t structure
  let t : t typ = structure "ImGuiContext"
  let initialized = field t "Initialized" bool
  let font_atlas_owned_by_context = field t "FontAtlasOwnedByContext" bool
  let io = field t "IO" (lift_typ Io.t)
  let platform_io = field t "PlatformIO" (lift_typ PlatformIo.t)
  let style = field t "Style" (lift_typ Style.t)
  let config_flags_curr_frame =
    field t "ConfigFlagsCurrFrame" (lift_typ config_flags_t)
  let config_flags_last_frame =
    field t "ConfigFlagsLastFrame" (lift_typ config_flags_t)
  let font = field t "Font" (ptr (lift_typ Font.t))
  let font_size = field t "FontSize" float
  let font_base_size = field t "FontBaseSize" float
  let draw_list_shared_data =
    field t "DrawListSharedData" (lift_typ DrawListSharedData.t)
  let time = field t "Time" float
  let frame_count = field t "FrameCount" int
  let frame_count_ended = field t "FrameCountEnded" int
  let frame_count_platform_ended = field t "FrameCountPlatformEnded" int
  let frame_count_rendered = field t "FrameCountRendered" int
  let within_frame_scope = field t "WithinFrameScope" bool
  let within_frame_scope_with_implicit_window =
    field t "WithinFrameScopeWithImplicitWindow" bool
  let within_end_child = field t "WithinEndChild" bool
  let gc_compact_all = field t "GcCompactAll" bool
  let test_engine_hook_items = field t "TestEngineHookItems" bool
  let test_engine = field t "TestEngine" (ptr void)
  let input_events_queue =
    field t "InputEventsQueue" (lift_typ Vector_ImInputEvent.t)
  let input_events_trail =
    field t "InputEventsTrail" (lift_typ Vector_ImInputEvent.t)
  let input_events_next_mouse_source =
    field t "InputEventsNextMouseSource" (lift_typ MouseSource.t)
  let input_events_next_event_id =
    field t "InputEventsNextEventId" (lift_typ u32_t)
  let windows = field t "Windows" (lift_typ Vector_ImWindowPtr.t)
  let windows_focus_order =
    field t "WindowsFocusOrder" (lift_typ Vector_ImWindowPtr.t)
  let windows_temp_sort_buffer =
    field t "WindowsTempSortBuffer" (lift_typ Vector_ImWindowPtr.t)
  let current_window_stack =
    field t "CurrentWindowStack" (lift_typ Vector_ImWindowStackData.t)
  let windows_by_id = field t "WindowsById" (lift_typ Storage.t)
  let windows_active_count = field t "WindowsActiveCount" int
  let windows_hover_padding = field t "WindowsHoverPadding" (lift_typ Vec2.t)
  let debug_break_in_window = field t "DebugBreakInWindow" (lift_typ id_t)
  let current_window = field t "CurrentWindow" (ptr (lift_typ window_t))
  let hovered_window = field t "HoveredWindow" (ptr (lift_typ window_t))
  let hovered_window_under_moving_window =
    field t "HoveredWindowUnderMovingWindow" (ptr (lift_typ window_t))
  let moving_window = field t "MovingWindow" (ptr (lift_typ window_t))
  let wheeling_window = field t "WheelingWindow" (ptr (lift_typ window_t))
  let wheeling_window_ref_mouse_pos =
    field t "WheelingWindowRefMousePos" (lift_typ Vec2.t)
  let wheeling_window_start_frame = field t "WheelingWindowStartFrame" int
  let wheeling_window_scrolled_frame =
    field t "WheelingWindowScrolledFrame" int
  let wheeling_window_release_timer =
    field t "WheelingWindowReleaseTimer" float
  let wheeling_window_wheel_remainder =
    field t "WheelingWindowWheelRemainder" (lift_typ Vec2.t)
  let wheeling_axis_avg = field t "WheelingAxisAvg" (lift_typ Vec2.t)
  let debug_hook_id_info = field t "DebugHookIdInfo" (lift_typ id_t)
  let hovered_id = field t "HoveredId" (lift_typ id_t)
  let hovered_id_previous_frame =
    field t "HoveredIdPreviousFrame" (lift_typ id_t)
  let hovered_id_allow_overlap = field t "HoveredIdAllowOverlap" bool
  let hovered_id_disabled = field t "HoveredIdDisabled" bool
  let hovered_id_timer = field t "HoveredIdTimer" float
  let hovered_id_not_active_timer = field t "HoveredIdNotActiveTimer" float
  let active_id = field t "ActiveId" (lift_typ id_t)
  let active_id_is_alive = field t "ActiveIdIsAlive" (lift_typ id_t)
  let active_id_timer = field t "ActiveIdTimer" float
  let active_id_is_just_activated = field t "ActiveIdIsJustActivated" bool
  let active_id_allow_overlap = field t "ActiveIdAllowOverlap" bool
  let active_id_no_clear_on_focus_loss =
    field t "ActiveIdNoClearOnFocusLoss" bool
  let active_id_has_been_pressed_before =
    field t "ActiveIdHasBeenPressedBefore" bool
  let active_id_has_been_edited_before =
    field t "ActiveIdHasBeenEditedBefore" bool
  let active_id_has_been_edited_this_frame =
    field t "ActiveIdHasBeenEditedThisFrame" bool
  let active_id_from_shortcut = field t "ActiveIdFromShortcut" bool
  let active_id_mouse_button = field t "ActiveIdMouseButton" int
  let active_id_click_offset = field t "ActiveIdClickOffset" (lift_typ Vec2.t)
  let active_id_window = field t "ActiveIdWindow" (ptr (lift_typ window_t))
  let active_id_source = field t "ActiveIdSource" (lift_typ InputSource.t)
  let active_id_previous_frame =
    field t "ActiveIdPreviousFrame" (lift_typ id_t)
  let active_id_previous_frame_is_alive =
    field t "ActiveIdPreviousFrameIsAlive" bool
  let active_id_previous_frame_has_been_edited_before =
    field t "ActiveIdPreviousFrameHasBeenEditedBefore" bool
  let active_id_previous_frame_window =
    field t "ActiveIdPreviousFrameWindow" (ptr (lift_typ window_t))
  let last_active_id = field t "LastActiveId" (lift_typ id_t)
  let last_active_id_timer = field t "LastActiveIdTimer" float
  let last_key_mods_change_time = field t "LastKeyModsChangeTime" float
  let last_key_mods_change_from_none_time =
    field t "LastKeyModsChangeFromNoneTime" float
  let last_keyboard_key_press_time = field t "LastKeyboardKeyPressTime" float
  let keys_may_be_char_input =
    field t "KeysMayBeCharInput"
      (lift_typ BitArray_ImKey_NamedKey_count__lessImKey_NamedKey_Begin.t)
  let keys_owner_data =
    field t "KeysOwnerData" (array (154) (lift_typ KeyOwnerData.t))
  let keys_routing_table =
    field t "KeysRoutingTable" (lift_typ KeyRoutingTable.t)
  let active_id_using_nav_dir_mask =
    field t "ActiveIdUsingNavDirMask" (lift_typ u32_t)
  let active_id_using_all_keyboard_keys =
    field t "ActiveIdUsingAllKeyboardKeys" bool
  let debug_break_in_shortcut_routing =
    field t "DebugBreakInShortcutRouting" (lift_typ key_chord_t)
  let current_focus_scope_id = field t "CurrentFocusScopeId" (lift_typ id_t)
  let current_item_flags = field t "CurrentItemFlags" (lift_typ item_flags_t)
  let debug_locate_id = field t "DebugLocateId" (lift_typ id_t)
  let next_item_data = field t "NextItemData" (lift_typ NextItemData.t)
  let last_item_data = field t "LastItemData" (lift_typ LastItemData.t)
  let next_window_data = field t "NextWindowData" (lift_typ NextWindowData.t)
  let debug_show_group_rects = field t "DebugShowGroupRects" bool
  let debug_flash_style_color_idx =
    field t "DebugFlashStyleColorIdx" (lift_typ col_t)
  let color_stack = field t "ColorStack" (lift_typ Vector_ImColorMod.t)
  let style_var_stack = field t "StyleVarStack" (lift_typ Vector_ImStyleMod.t)
  let font_stack = field t "FontStack" (lift_typ Vector_ImFontPtr.t)
  let focus_scope_stack =
    field t "FocusScopeStack" (lift_typ Vector_ImFocusScopeData.t)
  let item_flags_stack =
    field t "ItemFlagsStack" (lift_typ Vector_ImItemFlags.t)
  let group_stack = field t "GroupStack" (lift_typ Vector_ImGroupData.t)
  let open_popup_stack =
    field t "OpenPopupStack" (lift_typ Vector_ImPopupData.t)
  let begin_popup_stack =
    field t "BeginPopupStack" (lift_typ Vector_ImPopupData.t)
  let nav_tree_node_stack =
    field t "NavTreeNodeStack" (lift_typ Vector_ImNavTreeNodeData.t)
  let viewports = field t "Viewports" (lift_typ Vector_ImViewportPPtr.t)
  let current_dpi_scale = field t "CurrentDpiScale" float
  let current_viewport =
    field t "CurrentViewport" (ptr (lift_typ viewport_p_t))
  let mouse_viewport = field t "MouseViewport" (ptr (lift_typ viewport_p_t))
  let mouse_last_hovered_viewport =
    field t "MouseLastHoveredViewport" (ptr (lift_typ viewport_p_t))
  let platform_last_focused_viewport_id =
    field t "PlatformLastFocusedViewportId" (lift_typ id_t)
  let fallback_monitor = field t "FallbackMonitor" (lift_typ PlatformMonitor.t)
  let platform_monitors_full_work_rect =
    field t "PlatformMonitorsFullWorkRect" (lift_typ Rect.t)
  let viewport_created_count = field t "ViewportCreatedCount" int
  let platform_windows_created_count =
    field t "PlatformWindowsCreatedCount" int
  let viewport_focused_stamp_count = field t "ViewportFocusedStampCount" int
  let nav_window = field t "NavWindow" (ptr (lift_typ window_t))
  let nav_id = field t "NavId" (lift_typ id_t)
  let nav_focus_scope_id = field t "NavFocusScopeId" (lift_typ id_t)
  let nav_focus_route =
    field t "NavFocusRoute" (lift_typ Vector_ImFocusScopeData.t)
  let nav_activate_id = field t "NavActivateId" (lift_typ id_t)
  let nav_activate_down_id = field t "NavActivateDownId" (lift_typ id_t)
  let nav_activate_pressed_id = field t "NavActivatePressedId" (lift_typ id_t)
  let nav_activate_flags =
    field t "NavActivateFlags" (lift_typ activate_flags_t)
  let nav_highlight_activated_id =
    field t "NavHighlightActivatedId" (lift_typ id_t)
  let nav_highlight_activated_timer =
    field t "NavHighlightActivatedTimer" float
  let nav_just_moved_to_id = field t "NavJustMovedToId" (lift_typ id_t)
  let nav_just_moved_to_focus_scope_id =
    field t "NavJustMovedToFocusScopeId" (lift_typ id_t)
  let nav_just_moved_to_key_mods =
    field t "NavJustMovedToKeyMods" (lift_typ key_chord_t)
  let nav_next_activate_id = field t "NavNextActivateId" (lift_typ id_t)
  let nav_next_activate_flags =
    field t "NavNextActivateFlags" (lift_typ activate_flags_t)
  let nav_input_source = field t "NavInputSource" (lift_typ InputSource.t)
  let nav_layer = field t "NavLayer" (lift_typ NavLayer.t)
  let nav_last_valid_selection_user_data =
    field t "NavLastValidSelectionUserData" (lift_typ selection_user_data_t)
  let nav_id_is_alive = field t "NavIdIsAlive" bool
  let nav_mouse_pos_dirty = field t "NavMousePosDirty" bool
  let nav_disable_highlight = field t "NavDisableHighlight" bool
  let nav_disable_mouse_hover = field t "NavDisableMouseHover" bool
  let nav_any_request = field t "NavAnyRequest" bool
  let nav_init_request = field t "NavInitRequest" bool
  let nav_init_request_from_move = field t "NavInitRequestFromMove" bool
  let nav_init_result = field t "NavInitResult" (lift_typ NavItemData.t)
  let nav_move_submitted = field t "NavMoveSubmitted" bool
  let nav_move_scoring_items = field t "NavMoveScoringItems" bool
  let nav_move_forward_to_next_frame = field t "NavMoveForwardToNextFrame" bool
  let nav_move_flags = field t "NavMoveFlags" (lift_typ nav_move_flags_t)
  let nav_move_scroll_flags =
    field t "NavMoveScrollFlags" (lift_typ scroll_flags_t)
  let nav_move_key_mods = field t "NavMoveKeyMods" (lift_typ key_chord_t)
  let nav_move_dir = field t "NavMoveDir" (lift_typ dir_t)
  let nav_move_dir_for_debug = field t "NavMoveDirForDebug" (lift_typ dir_t)
  let nav_move_clip_dir = field t "NavMoveClipDir" (lift_typ dir_t)
  let nav_scoring_rect = field t "NavScoringRect" (lift_typ Rect.t)
  let nav_scoring_no_clip_rect =
    field t "NavScoringNoClipRect" (lift_typ Rect.t)
  let nav_scoring_debug_count = field t "NavScoringDebugCount" int
  let nav_tabbing_dir = field t "NavTabbingDir" int
  let nav_tabbing_counter = field t "NavTabbingCounter" int
  let nav_move_result_local =
    field t "NavMoveResultLocal" (lift_typ NavItemData.t)
  let nav_move_result_local_visible =
    field t "NavMoveResultLocalVisible" (lift_typ NavItemData.t)
  let nav_move_result_other =
    field t "NavMoveResultOther" (lift_typ NavItemData.t)
  let nav_tabbing_result_first =
    field t "NavTabbingResultFirst" (lift_typ NavItemData.t)
  let config_nav_windowing_key_next =
    field t "ConfigNavWindowingKeyNext" (lift_typ key_chord_t)
  let config_nav_windowing_key_prev =
    field t "ConfigNavWindowingKeyPrev" (lift_typ key_chord_t)
  let nav_windowing_target =
    field t "NavWindowingTarget" (ptr (lift_typ window_t))
  let nav_windowing_target_anim =
    field t "NavWindowingTargetAnim" (ptr (lift_typ window_t))
  let nav_windowing_list_window =
    field t "NavWindowingListWindow" (ptr (lift_typ window_t))
  let nav_windowing_timer = field t "NavWindowingTimer" float
  let nav_windowing_highlight_alpha =
    field t "NavWindowingHighlightAlpha" float
  let nav_windowing_toggle_layer = field t "NavWindowingToggleLayer" bool
  let nav_windowing_toggle_key =
    field t "NavWindowingToggleKey" (lift_typ Key.t)
  let nav_windowing_accum_delta_pos =
    field t "NavWindowingAccumDeltaPos" (lift_typ Vec2.t)
  let nav_windowing_accum_delta_size =
    field t "NavWindowingAccumDeltaSize" (lift_typ Vec2.t)
  let dim_bg_ratio = field t "DimBgRatio" float
  let drag_drop_active = field t "DragDropActive" bool
  let drag_drop_within_source = field t "DragDropWithinSource" bool
  let drag_drop_within_target = field t "DragDropWithinTarget" bool
  let drag_drop_source_flags =
    field t "DragDropSourceFlags" (lift_typ drag_drop_flags_t)
  let drag_drop_source_frame_count = field t "DragDropSourceFrameCount" int
  let drag_drop_mouse_button = field t "DragDropMouseButton" int
  let drag_drop_payload = field t "DragDropPayload" (lift_typ Payload.t)
  let drag_drop_target_rect = field t "DragDropTargetRect" (lift_typ Rect.t)
  let drag_drop_target_clip_rect =
    field t "DragDropTargetClipRect" (lift_typ Rect.t)
  let drag_drop_target_id = field t "DragDropTargetId" (lift_typ id_t)
  let drag_drop_accept_flags =
    field t "DragDropAcceptFlags" (lift_typ drag_drop_flags_t)
  let drag_drop_accept_id_curr_rect_surface =
    field t "DragDropAcceptIdCurrRectSurface" float
  let drag_drop_accept_id_curr = field t "DragDropAcceptIdCurr" (lift_typ id_t)
  let drag_drop_accept_id_prev = field t "DragDropAcceptIdPrev" (lift_typ id_t)
  let drag_drop_accept_frame_count = field t "DragDropAcceptFrameCount" int
  let drag_drop_hold_just_pressed_id =
    field t "DragDropHoldJustPressedId" (lift_typ id_t)
  let drag_drop_payload_buf_heap =
    field t "DragDropPayloadBufHeap" (lift_typ Vector_unsigned_char.t)
  let drag_drop_payload_buf_local =
    field t "DragDropPayloadBufLocal" (array (16) (lift_typ int_as_uchar))
  let clipper_temp_data_stacked = field t "ClipperTempDataStacked" int
  let clipper_temp_data =
    field t "ClipperTempData" (lift_typ Vector_ImListClipperData.t)
  let current_table = field t "CurrentTable" (ptr (lift_typ table_t))
  let debug_break_in_table = field t "DebugBreakInTable" (lift_typ id_t)
  let tables_temp_data_stacked = field t "TablesTempDataStacked" int
  let tables_temp_data =
    field t "TablesTempData" (lift_typ Vector_ImTableTempData.t)
  let tables = field t "Tables" (lift_typ Pool_ImTable.t)
  let tables_last_time_active =
    field t "TablesLastTimeActive" (lift_typ Vector_float.t)
  let draw_channels_temp_merge_buffer =
    field t "DrawChannelsTempMergeBuffer" (lift_typ Vector_ImDrawChannel.t)
  let current_tab_bar = field t "CurrentTabBar" (ptr (lift_typ tab_bar_t))
  let tab_bars = field t "TabBars" (lift_typ Pool_ImTabBar.t)
  let current_tab_bar_stack =
    field t "CurrentTabBarStack" (lift_typ Vector_ImPtrOrIndex.t)
  let shrink_width_buffer =
    field t "ShrinkWidthBuffer" (lift_typ Vector_ImShrinkWidthItem.t)
  let hover_item_delay_id = field t "HoverItemDelayId" (lift_typ id_t)
  let hover_item_delay_id_previous_frame =
    field t "HoverItemDelayIdPreviousFrame" (lift_typ id_t)
  let hover_item_delay_timer = field t "HoverItemDelayTimer" float
  let hover_item_delay_clear_timer = field t "HoverItemDelayClearTimer" float
  let hover_item_unlocked_stationary_id =
    field t "HoverItemUnlockedStationaryId" (lift_typ id_t)
  let hover_window_unlocked_stationary_id =
    field t "HoverWindowUnlockedStationaryId" (lift_typ id_t)
  let mouse_cursor = field t "MouseCursor" (lift_typ mouse_cursor_t)
  let mouse_stationary_timer = field t "MouseStationaryTimer" float
  let mouse_last_valid_pos = field t "MouseLastValidPos" (lift_typ Vec2.t)
  let input_text_state = field t "InputTextState" (lift_typ InputTextState.t)
  let input_text_deactivated_state =
    field t "InputTextDeactivatedState" (lift_typ InputTextDeactivatedState.t)
  let input_text_password_font =
    field t "InputTextPasswordFont" (lift_typ Font.t)
  let temp_input_id = field t "TempInputId" (lift_typ id_t)
  let begin_menu_depth = field t "BeginMenuDepth" int
  let begin_combo_depth = field t "BeginComboDepth" int
  let color_edit_options =
    field t "ColorEditOptions" (lift_typ color_edit_flags_t)
  let color_edit_current_id = field t "ColorEditCurrentID" (lift_typ id_t)
  let color_edit_saved_id = field t "ColorEditSavedID" (lift_typ id_t)
  let color_edit_saved_hue = field t "ColorEditSavedHue" float
  let color_edit_saved_sat = field t "ColorEditSavedSat" float
  let color_edit_saved_color = field t "ColorEditSavedColor" (lift_typ u32_t)
  let color_picker_ref = field t "ColorPickerRef" (lift_typ Vec4.t)
  let combo_preview_data =
    field t "ComboPreviewData" (lift_typ ComboPreviewData.t)
  let window_resize_border_expected_rect =
    field t "WindowResizeBorderExpectedRect" (lift_typ Rect.t)
  let window_resize_relative_mode = field t "WindowResizeRelativeMode" bool
  let slider_grab_click_offset = field t "SliderGrabClickOffset" float
  let slider_current_accum = field t "SliderCurrentAccum" float
  let slider_current_accum_dirty = field t "SliderCurrentAccumDirty" bool
  let drag_current_accum_dirty = field t "DragCurrentAccumDirty" bool
  let drag_current_accum = field t "DragCurrentAccum" float
  let drag_speed_default_ratio = field t "DragSpeedDefaultRatio" float
  let scrollbar_click_delta_to_grab_center =
    field t "ScrollbarClickDeltaToGrabCenter" float
  let disabled_alpha_backup = field t "DisabledAlphaBackup" float
  let disabled_stack_size = field t "DisabledStackSize" short
  let lock_mark_edited = field t "LockMarkEdited" short
  let tooltip_override_count = field t "TooltipOverrideCount" short
  let clipboard_handler_data =
    field t "ClipboardHandlerData" (lift_typ Vector_char.t)
  let menus_id_submitted_this_frame =
    field t "MenusIdSubmittedThisFrame" (lift_typ Vector_ImId.t)
  let typing_select_state =
    field t "TypingSelectState" (lift_typ TypingSelectState.t)
  let platform_ime_data =
    field t "PlatformImeData" (lift_typ PlatformImeData.t)
  let platform_ime_data_prev =
    field t "PlatformImeDataPrev" (lift_typ PlatformImeData.t)
  let platform_ime_viewport = field t "PlatformImeViewport" (lift_typ id_t)
  let dock_context = field t "DockContext" (lift_typ DockContext.t)
  let dock_node_window_menu_handler =
    field t "DockNodeWindowMenuHandler"
      (lift_typ
        (Foreign.funptr
          ((ptr (lift_typ context_t)) @-> (ptr (lift_typ dock_node_t)) @->
            (ptr (lift_typ tab_bar_t)) @-> returning void)))
  let settings_loaded = field t "SettingsLoaded" bool
  let settings_dirty_timer = field t "SettingsDirtyTimer" float
  let settings_ini_data = field t "SettingsIniData" (lift_typ TextBuffer.t)
  let settings_handlers =
    field t "SettingsHandlers" (lift_typ Vector_ImSettingsHandler.t)
  let settings_windows =
    field t "SettingsWindows" (lift_typ ChunkStream_ImWindowSettings.t)
  let settings_tables =
    field t "SettingsTables" (lift_typ ChunkStream_ImTableSettings.t)
  let hooks = field t "Hooks" (lift_typ Vector_ImContextHook.t)
  let hook_id_next = field t "HookIdNext" (lift_typ id_t)
  let localization_table = field t "LocalizationTable" (array (11) string)
  let log_enabled = field t "LogEnabled" bool
  let log_type = field t "LogType" (lift_typ LogType.t)
  let log_file = field t "LogFile" (lift_typ file_handle_t)
  let log_buffer = field t "LogBuffer" (lift_typ TextBuffer.t)
  let log_next_prefix = field t "LogNextPrefix" string
  let log_next_suffix = field t "LogNextSuffix" string
  let log_line_pos_y = field t "LogLinePosY" float
  let log_line_first_item = field t "LogLineFirstItem" bool
  let log_depth_ref = field t "LogDepthRef" int
  let log_depth_to_expand = field t "LogDepthToExpand" int
  let log_depth_to_expand_default = field t "LogDepthToExpandDefault" int
  let debug_log_flags = field t "DebugLogFlags" (lift_typ debug_log_flags_t)
  let debug_log_buf = field t "DebugLogBuf" (lift_typ TextBuffer.t)
  let debug_log_index = field t "DebugLogIndex" (lift_typ TextIndex.t)
  let debug_log_auto_disable_flags =
    field t "DebugLogAutoDisableFlags" (lift_typ debug_log_flags_t)
  let debug_log_auto_disable_frames =
    field t "DebugLogAutoDisableFrames" (lift_typ u8_t)
  let debug_locate_frames = field t "DebugLocateFrames" (lift_typ u8_t)
  let debug_break_in_locate_id = field t "DebugBreakInLocateId" bool
  let debug_break_key_chord =
    field t "DebugBreakKeyChord" (lift_typ key_chord_t)
  let debug_begin_return_value_cull_depth =
    field t "DebugBeginReturnValueCullDepth" (lift_typ s8_t)
  let debug_item_picker_active = field t "DebugItemPickerActive" bool
  let debug_item_picker_mouse_button =
    field t "DebugItemPickerMouseButton" (lift_typ u8_t)
  let debug_item_picker_break_id =
    field t "DebugItemPickerBreakId" (lift_typ id_t)
  let debug_flash_style_color_time = field t "DebugFlashStyleColorTime" float
  let debug_flash_style_color_backup =
    field t "DebugFlashStyleColorBackup" (lift_typ Vec4.t)
  let debug_metrics_config =
    field t "DebugMetricsConfig" (lift_typ MetricsConfig.t)
  let debug_id_stack_tool = field t "DebugIDStackTool" (lift_typ IdStackTool.t)
  let debug_alloc_info = field t "DebugAllocInfo" (lift_typ DebugAllocInfo.t)
  let debug_hovered_dock_node =
    field t "DebugHoveredDockNode" (ptr (lift_typ dock_node_t))
  let framerate_sec_per_frame =
    field t "FramerateSecPerFrame" (array (60) float)
  let framerate_sec_per_frame_idx = field t "FramerateSecPerFrameIdx" int
  let framerate_sec_per_frame_count = field t "FramerateSecPerFrameCount" int
  let framerate_sec_per_frame_accum = field t "FramerateSecPerFrameAccum" float
  let want_capture_mouse_next_frame = field t "WantCaptureMouseNextFrame" int
  let want_capture_keyboard_next_frame =
    field t "WantCaptureKeyboardNextFrame" int
  let want_text_input_next_frame = field t "WantTextInputNextFrame" int
  let temp_buffer = field t "TempBuffer" (lift_typ Vector_char.t)
  let temp_keychord_name = field t "TempKeychordName" (array (64) char)
  let () = seal t
end

module Window = struct
  type t = window_t structure
  let t : t typ = structure "ImGuiWindow"
  let ctx = field t "Ctx" (ptr (lift_typ context_t))
  let name = field t "Name" string
  let id = field t "ID" (lift_typ id_t)
  let flags = field t "Flags" (lift_typ window_flags_t)
  let flags_previous_frame =
    field t "FlagsPreviousFrame" (lift_typ window_flags_t)
  let child_flags = field t "ChildFlags" (lift_typ child_flags_t)
  let window_class = field t "WindowClass" (lift_typ WindowClass.t)
  let viewport = field t "Viewport" (ptr (lift_typ viewport_p_t))
  let viewport_id = field t "ViewportId" (lift_typ id_t)
  let viewport_pos = field t "ViewportPos" (lift_typ Vec2.t)
  let viewport_allow_platform_monitor_extend =
    field t "ViewportAllowPlatformMonitorExtend" int
  let pos = field t "Pos" (lift_typ Vec2.t)
  let size = field t "Size" (lift_typ Vec2.t)
  let size_full = field t "SizeFull" (lift_typ Vec2.t)
  let content_size = field t "ContentSize" (lift_typ Vec2.t)
  let content_size_ideal = field t "ContentSizeIdeal" (lift_typ Vec2.t)
  let content_size_explicit = field t "ContentSizeExplicit" (lift_typ Vec2.t)
  let window_padding = field t "WindowPadding" (lift_typ Vec2.t)
  let window_rounding = field t "WindowRounding" float
  let window_border_size = field t "WindowBorderSize" float
  let deco_outer_size_x1 = field t "DecoOuterSizeX1" float
  let deco_outer_size_y1 = field t "DecoOuterSizeY1" float
  let deco_outer_size_x2 = field t "DecoOuterSizeX2" float
  let deco_outer_size_y2 = field t "DecoOuterSizeY2" float
  let deco_inner_size_x1 = field t "DecoInnerSizeX1" float
  let deco_inner_size_y1 = field t "DecoInnerSizeY1" float
  let name_buf_len = field t "NameBufLen" int
  let move_id = field t "MoveId" (lift_typ id_t)
  let tab_id = field t "TabId" (lift_typ id_t)
  let child_id = field t "ChildId" (lift_typ id_t)
  let scroll = field t "Scroll" (lift_typ Vec2.t)
  let scroll_max = field t "ScrollMax" (lift_typ Vec2.t)
  let scroll_target = field t "ScrollTarget" (lift_typ Vec2.t)
  let scroll_target_center_ratio =
    field t "ScrollTargetCenterRatio" (lift_typ Vec2.t)
  let scroll_target_edge_snap_dist =
    field t "ScrollTargetEdgeSnapDist" (lift_typ Vec2.t)
  let scrollbar_sizes = field t "ScrollbarSizes" (lift_typ Vec2.t)
  let scrollbar_x = field t "ScrollbarX" bool
  let scrollbar_y = field t "ScrollbarY" bool
  let viewport_owned = field t "ViewportOwned" bool
  let active = field t "Active" bool
  let was_active = field t "WasActive" bool
  let write_accessed = field t "WriteAccessed" bool
  let collapsed = field t "Collapsed" bool
  let want_collapse_toggle = field t "WantCollapseToggle" bool
  let skip_items = field t "SkipItems" bool
  let skip_refresh = field t "SkipRefresh" bool
  let appearing = field t "Appearing" bool
  let hidden = field t "Hidden" bool
  let is_fallback_window = field t "IsFallbackWindow" bool
  let is_explicit_child = field t "IsExplicitChild" bool
  let has_close_button = field t "HasCloseButton" bool
  let resize_border_hovered = field t "ResizeBorderHovered" schar
  let resize_border_held = field t "ResizeBorderHeld" schar
  let begin_count = field t "BeginCount" short
  let begin_count_previous_frame = field t "BeginCountPreviousFrame" short
  let begin_order_within_parent = field t "BeginOrderWithinParent" short
  let begin_order_within_context = field t "BeginOrderWithinContext" short
  let focus_order = field t "FocusOrder" short
  let popup_id = field t "PopupId" (lift_typ id_t)
  let auto_fit_frames_x = field t "AutoFitFramesX" (lift_typ s8_t)
  let auto_fit_frames_y = field t "AutoFitFramesY" (lift_typ s8_t)
  let auto_fit_only_grows = field t "AutoFitOnlyGrows" bool
  let auto_pos_last_direction = field t "AutoPosLastDirection" (lift_typ dir_t)
  let hidden_frames_can_skip_items =
    field t "HiddenFramesCanSkipItems" (lift_typ s8_t)
  let hidden_frames_cannot_skip_items =
    field t "HiddenFramesCannotSkipItems" (lift_typ s8_t)
  let hidden_frames_for_render_only =
    field t "HiddenFramesForRenderOnly" (lift_typ s8_t)
  let disable_inputs_frames = field t "DisableInputsFrames" (lift_typ s8_t)
  let set_window_pos_allow_flags =
    field t "SetWindowPosAllowFlags" (lift_typ cond_t)
  let set_window_size_allow_flags =
    field t "SetWindowSizeAllowFlags" (lift_typ cond_t)
  let set_window_collapsed_allow_flags =
    field t "SetWindowCollapsedAllowFlags" (lift_typ cond_t)
  let set_window_dock_allow_flags =
    field t "SetWindowDockAllowFlags" (lift_typ cond_t)
  let set_window_pos_val = field t "SetWindowPosVal" (lift_typ Vec2.t)
  let set_window_pos_pivot = field t "SetWindowPosPivot" (lift_typ Vec2.t)
  let id_stack = field t "IDStack" (lift_typ Vector_ImId.t)
  let dc = field t "DC" (lift_typ WindowTempData.t)
  let outer_rect_clipped = field t "OuterRectClipped" (lift_typ Rect.t)
  let inner_rect = field t "InnerRect" (lift_typ Rect.t)
  let inner_clip_rect = field t "InnerClipRect" (lift_typ Rect.t)
  let work_rect = field t "WorkRect" (lift_typ Rect.t)
  let parent_work_rect = field t "ParentWorkRect" (lift_typ Rect.t)
  let clip_rect = field t "ClipRect" (lift_typ Rect.t)
  let content_region_rect = field t "ContentRegionRect" (lift_typ Rect.t)
  let hit_test_hole_size = field t "HitTestHoleSize" (lift_typ Vec2ih.t)
  let hit_test_hole_offset = field t "HitTestHoleOffset" (lift_typ Vec2ih.t)
  let last_frame_active = field t "LastFrameActive" int
  let last_frame_just_focused = field t "LastFrameJustFocused" int
  let last_time_active = field t "LastTimeActive" float
  let item_width_default = field t "ItemWidthDefault" float
  let state_storage = field t "StateStorage" (lift_typ Storage.t)
  let columns_storage =
    field t "ColumnsStorage" (lift_typ Vector_ImOldColumns.t)
  let font_window_scale = field t "FontWindowScale" float
  let font_dpi_scale = field t "FontDpiScale" float
  let settings_offset = field t "SettingsOffset" int
  let draw_list = field t "DrawList" (ptr (lift_typ DrawList.t))
  let draw_list_inst = field t "DrawListInst" (lift_typ DrawList.t)
  let parent_window = field t "ParentWindow" (ptr (lift_typ window_t))
  let parent_window_in_begin_stack =
    field t "ParentWindowInBeginStack" (ptr (lift_typ window_t))
  let root_window = field t "RootWindow" (ptr (lift_typ window_t))
  let root_window_popup_tree =
    field t "RootWindowPopupTree" (ptr (lift_typ window_t))
  let root_window_dock_tree =
    field t "RootWindowDockTree" (ptr (lift_typ window_t))
  let root_window_for_title_bar_highlight =
    field t "RootWindowForTitleBarHighlight" (ptr (lift_typ window_t))
  let root_window_for_nav =
    field t "RootWindowForNav" (ptr (lift_typ window_t))
  let parent_window_for_focus_route =
    field t "ParentWindowForFocusRoute" (ptr (lift_typ window_t))
  let nav_last_child_nav_window =
    field t "NavLastChildNavWindow" (ptr (lift_typ window_t))
  let nav_last_ids = field t "NavLastIds" (array (2) (lift_typ id_t))
  let nav_rect_rel = field t "NavRectRel" (array (2) (lift_typ Rect.t))
  let nav_preferred_scoring_pos_rel =
    field t "NavPreferredScoringPosRel" (array (2) (lift_typ Vec2.t))
  let nav_root_focus_scope_id = field t "NavRootFocusScopeId" (lift_typ id_t)
  let memory_draw_list_idx_capacity = field t "MemoryDrawListIdxCapacity" int
  let memory_draw_list_vtx_capacity = field t "MemoryDrawListVtxCapacity" int
  let memory_compacted = field t "MemoryCompacted" bool
  let dock_is_active = field t "DockIsActive" bool
  let dock_node_is_visible = field t "DockNodeIsVisible" bool
  let dock_tab_is_visible = field t "DockTabIsVisible" bool
  let dock_tab_want_close = field t "DockTabWantClose" bool
  let dock_order = field t "DockOrder" short
  let dock_style = field t "DockStyle" (lift_typ WindowDockStyle.t)
  let dock_node = field t "DockNode" (ptr (lift_typ dock_node_t))
  let dock_node_as_host = field t "DockNodeAsHost" (ptr (lift_typ dock_node_t))
  let dock_id = field t "DockId" (lift_typ id_t)
  let dock_tab_item_status_flags =
    field t "DockTabItemStatusFlags" (lift_typ item_status_flags_t)
  let dock_tab_item_rect = field t "DockTabItemRect" (lift_typ Rect.t)
  let () = seal t
end

module TableColumn = struct
  type t = table_column_t structure
  let t : t typ = structure "ImGuiTableColumn"
  let flags = field t "Flags" (lift_typ table_column_flags_t)
  let width_given = field t "WidthGiven" float
  let min_x = field t "MinX" float
  let max_x = field t "MaxX" float
  let width_request = field t "WidthRequest" float
  let width_auto = field t "WidthAuto" float
  let stretch_weight = field t "StretchWeight" float
  let init_stretch_weight_or_width = field t "InitStretchWeightOrWidth" float
  let clip_rect = field t "ClipRect" (lift_typ Rect.t)
  let user_id = field t "UserID" (lift_typ id_t)
  let work_min_x = field t "WorkMinX" float
  let work_max_x = field t "WorkMaxX" float
  let item_width = field t "ItemWidth" float
  let content_max_x_frozen = field t "ContentMaxXFrozen" float
  let content_max_x_unfrozen = field t "ContentMaxXUnfrozen" float
  let content_max_x_headers_used = field t "ContentMaxXHeadersUsed" float
  let content_max_x_headers_ideal = field t "ContentMaxXHeadersIdeal" float
  let name_offset = field t "NameOffset" (lift_typ s16_t)
  let display_order = field t "DisplayOrder" (lift_typ table_column_idx_t)
  let index_within_enabled_set =
    field t "IndexWithinEnabledSet" (lift_typ table_column_idx_t)
  let prev_enabled_column =
    field t "PrevEnabledColumn" (lift_typ table_column_idx_t)
  let next_enabled_column =
    field t "NextEnabledColumn" (lift_typ table_column_idx_t)
  let sort_order = field t "SortOrder" (lift_typ table_column_idx_t)
  let draw_channel_current =
    field t "DrawChannelCurrent" (lift_typ table_draw_channel_idx_t)
  let draw_channel_frozen =
    field t "DrawChannelFrozen" (lift_typ table_draw_channel_idx_t)
  let draw_channel_unfrozen =
    field t "DrawChannelUnfrozen" (lift_typ table_draw_channel_idx_t)
  let is_enabled = field t "IsEnabled" bool
  let is_user_enabled = field t "IsUserEnabled" bool
  let is_user_enabled_next_frame = field t "IsUserEnabledNextFrame" bool
  let is_visible_x = field t "IsVisibleX" bool
  let is_visible_y = field t "IsVisibleY" bool
  let is_request_output = field t "IsRequestOutput" bool
  let is_skip_items = field t "IsSkipItems" bool
  let is_preserve_width_auto = field t "IsPreserveWidthAuto" bool
  let nav_layer_current = field t "NavLayerCurrent" (lift_typ s8_t)
  let auto_fit_queue = field t "AutoFitQueue" (lift_typ u8_t)
  let cannot_skip_items_queue = field t "CannotSkipItemsQueue" (lift_typ u8_t)
  let sort_direction = field t "SortDirection" (lift_typ u8_t)
  let sort_directions_avail_count =
    field t "SortDirectionsAvailCount" (lift_typ u8_t)
  let sort_directions_avail_mask =
    field t "SortDirectionsAvailMask" (lift_typ u8_t)
  let sort_directions_avail_list =
    field t "SortDirectionsAvailList" (lift_typ u8_t)
  let () = seal t
end

module Table = struct
  type t = table_t structure
  let t : t typ = structure "ImGuiTable"
  let id = field t "ID" (lift_typ id_t)
  let flags = field t "Flags" (lift_typ table_flags_t)
  let raw_data = field t "RawData" (ptr void)
  let temp_data = field t "TempData" (ptr (lift_typ table_temp_data_t))
  let columns = field t "Columns" (lift_typ Span_ImTableColumn.t)
  let display_order_to_index =
    field t "DisplayOrderToIndex" (lift_typ Span_ImTableColumnIdx.t)
  let row_cell_data = field t "RowCellData" (lift_typ Span_ImTableCellData.t)
  let enabled_mask_by_display_order =
    field t "EnabledMaskByDisplayOrder" (lift_typ bit_array_ptr_t)
  let enabled_mask_by_index =
    field t "EnabledMaskByIndex" (lift_typ bit_array_ptr_t)
  let visible_mask_by_index =
    field t "VisibleMaskByIndex" (lift_typ bit_array_ptr_t)
  let settings_loaded_flags =
    field t "SettingsLoadedFlags" (lift_typ table_flags_t)
  let settings_offset = field t "SettingsOffset" int
  let last_frame_active = field t "LastFrameActive" int
  let columns_count = field t "ColumnsCount" int
  let current_row = field t "CurrentRow" int
  let current_column = field t "CurrentColumn" int
  let instance_current = field t "InstanceCurrent" (lift_typ s16_t)
  let instance_interacted = field t "InstanceInteracted" (lift_typ s16_t)
  let row_pos_y1 = field t "RowPosY1" float
  let row_pos_y2 = field t "RowPosY2" float
  let row_min_height = field t "RowMinHeight" float
  let row_cell_padding_y = field t "RowCellPaddingY" float
  let row_text_baseline = field t "RowTextBaseline" float
  let row_indent_offset_x = field t "RowIndentOffsetX" float
  let row_flags = field t "RowFlags" (lift_typ table_row_flags_t)
  let last_row_flags = field t "LastRowFlags" (lift_typ table_row_flags_t)
  let row_bg_color_counter = field t "RowBgColorCounter" int
  let row_bg_color = field t "RowBgColor" (array (2) (lift_typ u32_t))
  let border_color_strong = field t "BorderColorStrong" (lift_typ u32_t)
  let border_color_light = field t "BorderColorLight" (lift_typ u32_t)
  let border_x1 = field t "BorderX1" float
  let border_x2 = field t "BorderX2" float
  let host_indent_x = field t "HostIndentX" float
  let min_column_width = field t "MinColumnWidth" float
  let outer_padding_x = field t "OuterPaddingX" float
  let cell_padding_x = field t "CellPaddingX" float
  let cell_spacing_x1 = field t "CellSpacingX1" float
  let cell_spacing_x2 = field t "CellSpacingX2" float
  let inner_width = field t "InnerWidth" float
  let columns_given_width = field t "ColumnsGivenWidth" float
  let columns_auto_fit_width = field t "ColumnsAutoFitWidth" float
  let columns_stretch_sum_weights = field t "ColumnsStretchSumWeights" float
  let resized_column_next_width = field t "ResizedColumnNextWidth" float
  let resize_lock_min_contents_x2 = field t "ResizeLockMinContentsX2" float
  let ref_scale = field t "RefScale" float
  let angled_headers_height = field t "AngledHeadersHeight" float
  let angled_headers_slope = field t "AngledHeadersSlope" float
  let outer_rect = field t "OuterRect" (lift_typ Rect.t)
  let inner_rect = field t "InnerRect" (lift_typ Rect.t)
  let work_rect = field t "WorkRect" (lift_typ Rect.t)
  let inner_clip_rect = field t "InnerClipRect" (lift_typ Rect.t)
  let bg_clip_rect = field t "BgClipRect" (lift_typ Rect.t)
  let bg0_clip_rect_for_draw_cmd =
    field t "Bg0ClipRectForDrawCmd" (lift_typ Rect.t)
  let bg2_clip_rect_for_draw_cmd =
    field t "Bg2ClipRectForDrawCmd" (lift_typ Rect.t)
  let host_clip_rect = field t "HostClipRect" (lift_typ Rect.t)
  let host_backup_inner_clip_rect =
    field t "HostBackupInnerClipRect" (lift_typ Rect.t)
  let outer_window = field t "OuterWindow" (ptr (lift_typ window_t))
  let inner_window = field t "InnerWindow" (ptr (lift_typ window_t))
  let columns_names = field t "ColumnsNames" (lift_typ TextBuffer.t)
  let draw_splitter =
    field t "DrawSplitter" (ptr (lift_typ draw_list_splitter_t))
  let instance_data_first =
    field t "InstanceDataFirst" (lift_typ TableInstanceData.t)
  let instance_data_extra =
    field t "InstanceDataExtra" (lift_typ Vector_ImTableInstanceData.t)
  let sort_specs_single =
    field t "SortSpecsSingle" (lift_typ TableColumnSortSpecs.t)
  let sort_specs_multi =
    field t "SortSpecsMulti" (lift_typ Vector_ImTableColumnSortSpecs.t)
  let sort_specs = field t "SortSpecs" (lift_typ TableSortSpecs.t)
  let sort_specs_count = field t "SortSpecsCount" (lift_typ table_column_idx_t)
  let columns_enabled_count =
    field t "ColumnsEnabledCount" (lift_typ table_column_idx_t)
  let columns_enabled_fixed_count =
    field t "ColumnsEnabledFixedCount" (lift_typ table_column_idx_t)
  let decl_columns_count =
    field t "DeclColumnsCount" (lift_typ table_column_idx_t)
  let angled_headers_count =
    field t "AngledHeadersCount" (lift_typ table_column_idx_t)
  let hovered_column_body =
    field t "HoveredColumnBody" (lift_typ table_column_idx_t)
  let hovered_column_border =
    field t "HoveredColumnBorder" (lift_typ table_column_idx_t)
  let highlight_column_header =
    field t "HighlightColumnHeader" (lift_typ table_column_idx_t)
  let auto_fit_single_column =
    field t "AutoFitSingleColumn" (lift_typ table_column_idx_t)
  let resized_column = field t "ResizedColumn" (lift_typ table_column_idx_t)
  let last_resized_column =
    field t "LastResizedColumn" (lift_typ table_column_idx_t)
  let held_header_column =
    field t "HeldHeaderColumn" (lift_typ table_column_idx_t)
  let reorder_column = field t "ReorderColumn" (lift_typ table_column_idx_t)
  let reorder_column_dir =
    field t "ReorderColumnDir" (lift_typ table_column_idx_t)
  let left_most_enabled_column =
    field t "LeftMostEnabledColumn" (lift_typ table_column_idx_t)
  let right_most_enabled_column =
    field t "RightMostEnabledColumn" (lift_typ table_column_idx_t)
  let left_most_stretched_column =
    field t "LeftMostStretchedColumn" (lift_typ table_column_idx_t)
  let right_most_stretched_column =
    field t "RightMostStretchedColumn" (lift_typ table_column_idx_t)
  let context_popup_column =
    field t "ContextPopupColumn" (lift_typ table_column_idx_t)
  let freeze_rows_request =
    field t "FreezeRowsRequest" (lift_typ table_column_idx_t)
  let freeze_rows_count =
    field t "FreezeRowsCount" (lift_typ table_column_idx_t)
  let freeze_columns_request =
    field t "FreezeColumnsRequest" (lift_typ table_column_idx_t)
  let freeze_columns_count =
    field t "FreezeColumnsCount" (lift_typ table_column_idx_t)
  let row_cell_data_current =
    field t "RowCellDataCurrent" (lift_typ table_column_idx_t)
  let dummy_draw_channel =
    field t "DummyDrawChannel" (lift_typ table_draw_channel_idx_t)
  let bg2_draw_channel_current =
    field t "Bg2DrawChannelCurrent" (lift_typ table_draw_channel_idx_t)
  let bg2_draw_channel_unfrozen =
    field t "Bg2DrawChannelUnfrozen" (lift_typ table_draw_channel_idx_t)
  let is_layout_locked = field t "IsLayoutLocked" bool
  let is_inside_row = field t "IsInsideRow" bool
  let is_initializing = field t "IsInitializing" bool
  let is_sort_specs_dirty = field t "IsSortSpecsDirty" bool
  let is_using_headers = field t "IsUsingHeaders" bool
  let is_context_popup_open = field t "IsContextPopupOpen" bool
  let disable_default_context_menu = field t "DisableDefaultContextMenu" bool
  let is_settings_request_load = field t "IsSettingsRequestLoad" bool
  let is_settings_dirty = field t "IsSettingsDirty" bool
  let is_default_display_order = field t "IsDefaultDisplayOrder" bool
  let is_reset_all_request = field t "IsResetAllRequest" bool
  let is_reset_display_order_request =
    field t "IsResetDisplayOrderRequest" bool
  let is_unfrozen_rows = field t "IsUnfrozenRows" bool
  let is_default_sizing_policy = field t "IsDefaultSizingPolicy" bool
  let is_active_id_alive_before_table =
    field t "IsActiveIdAliveBeforeTable" bool
  let is_active_id_in_table = field t "IsActiveIdInTable" bool
  let has_scrollbar_y_curr = field t "HasScrollbarYCurr" bool
  let has_scrollbar_y_prev = field t "HasScrollbarYPrev" bool
  let memory_compacted = field t "MemoryCompacted" bool
  let host_skip_items = field t "HostSkipItems" bool
  let () = seal t
end

module TableColumnSettings = struct
  type t = table_column_settings_t structure
  let t : t typ = structure "ImGuiTableColumnSettings"
  let width_or_weight = field t "WidthOrWeight" float
  let user_id = field t "UserID" (lift_typ id_t)
  let index = field t "Index" (lift_typ table_column_idx_t)
  let display_order = field t "DisplayOrder" (lift_typ table_column_idx_t)
  let sort_order = field t "SortOrder" (lift_typ table_column_idx_t)
  let sort_direction = field t "SortDirection" (lift_typ u8_t)
  let is_enabled = field t "IsEnabled" (lift_typ u8_t)
  let is_stretch = field t "IsStretch" (lift_typ u8_t)
  let () = seal t
end

module Structs (S : Ctypes.TYPE) = struct
  open S
  module BitArrayForNamedKeys = struct
    type t = BitArray_ImKey_NamedKey_count__lessImKey_NamedKey_Begin.t
    let t : t typ = lift_typ
      BitArray_ImKey_NamedKey_count__lessImKey_NamedKey_Begin.t
  end
  module Vector_const_charPtr = struct
    type t = vector_const_char_ptr_t structure
    let t : t typ = structure "ImVector_const_charPtr"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr string)
    let () = seal t
  end
  
  module KeyData = struct
    type t = key_data_t structure
    let t : t typ = structure "ImGuiKeyData"
    let down = field t "Down" bool
    let down_duration = field t "DownDuration" float
    let down_duration_prev = field t "DownDurationPrev" float
    let analog_value = field t "AnalogValue" float
    let () = seal t
  end
  
  module Vector_ImWchar = struct
    type t = vector_im_wchar_t structure
    let t : t typ = structure "ImVector_ImWchar"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ wchar_t))
    let () = seal t
  end
  
  module InputTextCallbackData = struct
    type t = input_text_callback_data_t structure
    let t : t typ = structure "ImGuiInputTextCallbackData"
    let ctx = field t "Ctx" (ptr (lift_typ context_t))
    let event_flag = field t "EventFlag" (lift_typ input_text_flags_t)
    let flags = field t "Flags" (lift_typ input_text_flags_t)
    let user_data = field t "UserData" (ptr void)
    let event_char = field t "EventChar" (lift_typ wchar_t)
    let event_key = field t "EventKey" (lift_typ Key.t)
    let buf = field t "Buf" string
    let buf_text_len = field t "BufTextLen" int
    let buf_size = field t "BufSize" int
    let buf_dirty = field t "BufDirty" bool
    let cursor_pos = field t "CursorPos" int
    let selection_start = field t "SelectionStart" int
    let selection_end = field t "SelectionEnd" int
    let () = seal t
  end
  
  module SizeCallbackData = struct
    type t = size_callback_data_t structure
    let t : t typ = structure "ImGuiSizeCallbackData"
    let user_data = field t "UserData" (ptr void)
    let pos = field t "Pos" (lift_typ Vec2.t)
    let current_size = field t "CurrentSize" (lift_typ Vec2.t)
    let desired_size = field t "DesiredSize" (lift_typ Vec2.t)
    let () = seal t
  end
  
  module OnceUponAFrame = struct
    type t = once_upon_a_frame_t structure
    let t : t typ = structure "ImGuiOnceUponAFrame"
    let ref_frame = field t "RefFrame" int
    let () = seal t
  end
  
  module TextRange = struct
    type t = text_range_t structure
    let t : t typ = structure "ImGuiTextRange"
    let b = field t "b" string
    let e = field t "e" string
    let () = seal t
  end
  
  module Vector_ImTextRange = struct
    type t = vector_im_text_range_t structure
    let t : t typ = structure "ImVector_ImGuiTextRange"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ text_range_t))
    let () = seal t
  end
  
  module TextFilter = struct
    type t = text_filter_t structure
    let t : t typ = structure "ImGuiTextFilter"
    let input_buf = field t "InputBuf" (array (256) char)
    let filters = field t "Filters" (lift_typ vector_im_text_range_t)
    let count_grep = field t "CountGrep" int
    let () = seal t
  end
  
  module StoragePair = struct
    type t = storage_pair_t structure
    let t : t typ = structure "ImGuiStoragePair"
    let key = field t "key" (lift_typ id_t)
    let val_i = field t "val_i" int
    let val_f = field t "val_f" float
    let val_p = field t "val_p" (ptr void)
    let () = seal t
  end
  
  module Vector_ImStoragePair = struct
    type t = vector_im_storage_pair_t structure
    let t : t typ = structure "ImVector_ImGuiStoragePair"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ storage_pair_t))
    let () = seal t
  end
  
  module ListClipper = struct
    type t = list_clipper_t structure
    let t : t typ = structure "ImGuiListClipper"
    let ctx = field t "Ctx" (ptr (lift_typ context_t))
    let display_start = field t "DisplayStart" int
    let display_end = field t "DisplayEnd" int
    let items_count = field t "ItemsCount" int
    let items_height = field t "ItemsHeight" float
    let start_pos_y = field t "StartPosY" float
    let temp_data = field t "TempData" (ptr void)
    let () = seal t
  end
  
  module Color = struct
    type t = color_t structure
    let t : t typ = structure "ImColor"
    let value = field t "Value" (lift_typ Vec4.t)
    let () = seal t
  end
  
  module DrawCmd = struct
    type t = draw_cmd_t structure
    let t : t typ = structure "ImDrawCmd"
    let clip_rect = field t "ClipRect" (lift_typ Vec4.t)
    let texture_id = field t "TextureId" (lift_typ texture_id_t)
    let vtx_offset = field t "VtxOffset" (lift_typ int_as_uint)
    let idx_offset = field t "IdxOffset" (lift_typ int_as_uint)
    let elem_count = field t "ElemCount" (lift_typ int_as_uint)
    let user_callback =
      field t "UserCallback"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ DrawList.t)) @-> (ptr (lift_typ draw_cmd_t))
              @-> returning void)))
    let user_callback_data = field t "UserCallbackData" (ptr void)
    let () = seal t
  end
  
  module DrawVert = struct
    type t = draw_vert_t structure
    let t : t typ = structure "ImDrawVert"
    let pos = field t "pos" (lift_typ Vec2.t)
    let uv = field t "uv" (lift_typ Vec2.t)
    let col = field t "col" (lift_typ u32_t)
    let () = seal t
  end
  
  module DrawCmdHeader = struct
    type t = draw_cmd_header_t structure
    let t : t typ = structure "ImDrawCmdHeader"
    let clip_rect = field t "ClipRect" (lift_typ Vec4.t)
    let texture_id = field t "TextureId" (lift_typ texture_id_t)
    let vtx_offset = field t "VtxOffset" (lift_typ int_as_uint)
    let () = seal t
  end
  
  module Vector_ImDrawCmd = struct
    type t = vector_im_draw_cmd_t structure
    let t : t typ = structure "ImVector_ImDrawCmd"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ draw_cmd_t))
    let () = seal t
  end
  
  module Vector_ImDrawIdx = struct
    type t = vector_im_draw_idx_t structure
    let t : t typ = structure "ImVector_ImDrawIdx"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ draw_idx_t))
    let () = seal t
  end
  
  module DrawChannel = struct
    type t = draw_channel_t structure
    let t : t typ = structure "ImDrawChannel"
    let cmd_buffer = field t "_CmdBuffer" (lift_typ vector_im_draw_cmd_t)
    let idx_buffer = field t "_IdxBuffer" (lift_typ vector_im_draw_idx_t)
    let () = seal t
  end
  
  module DrawListSplitter = struct
    type t = draw_list_splitter_t structure
    let t : t typ = structure "ImDrawListSplitter"
    let current = field t "_Current" int
    let count = field t "_Count" int
    let channels = field t "_Channels" (lift_typ Vector_ImDrawChannel.t)
    let () = seal t
  end
  
  module Vector_ImDrawVert = struct
    type t = vector_im_draw_vert_t structure
    let t : t typ = structure "ImVector_ImDrawVert"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ draw_vert_t))
    let () = seal t
  end
  
  module Vector_ImVec2 = struct
    type t = vector_im_vec2_t structure
    let t : t typ = structure "ImVector_ImVec2"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ Vec2.t))
    let () = seal t
  end
  
  module Vector_ImVec4 = struct
    type t = vector_im_vec4_t structure
    let t : t typ = structure "ImVector_ImVec4"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ Vec4.t))
    let () = seal t
  end
  
  module Vector_ImTextureId = struct
    type t = vector_im_texture_id_t structure
    let t : t typ = structure "ImVector_ImTextureID"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ texture_id_t))
    let () = seal t
  end
  
  module Vector_ImDrawListPtr = struct
    type t = vector_im_draw_list_ptr_t structure
    let t : t typ = structure "ImVector_ImDrawListPtr"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (ptr (lift_typ DrawList.t)))
    let () = seal t
  end
  
  module DrawData = struct
    type t = draw_data_t structure
    let t : t typ = structure "ImDrawData"
    let valid = field t "Valid" bool
    let cmd_lists_count = field t "CmdListsCount" int
    let total_idx_count = field t "TotalIdxCount" int
    let total_vtx_count = field t "TotalVtxCount" int
    let cmd_lists = field t "CmdLists" (lift_typ vector_im_draw_list_ptr_t)
    let display_pos = field t "DisplayPos" (lift_typ Vec2.t)
    let display_size = field t "DisplaySize" (lift_typ Vec2.t)
    let framebuffer_scale = field t "FramebufferScale" (lift_typ Vec2.t)
    let owner_viewport = field t "OwnerViewport" (ptr (lift_typ viewport_t))
    let () = seal t
  end
  
  module FontConfig = struct
    type t = font_config_t structure
    let t : t typ = structure "ImFontConfig"
    let font_data = field t "FontData" (ptr void)
    let font_data_size = field t "FontDataSize" int
    let font_data_owned_by_atlas = field t "FontDataOwnedByAtlas" bool
    let font_no = field t "FontNo" int
    let size_pixels = field t "SizePixels" float
    let oversample_h = field t "OversampleH" int
    let oversample_v = field t "OversampleV" int
    let pixel_snap_h = field t "PixelSnapH" bool
    let glyph_extra_spacing = field t "GlyphExtraSpacing" (lift_typ Vec2.t)
    let glyph_offset = field t "GlyphOffset" (lift_typ Vec2.t)
    let glyph_ranges = field t "GlyphRanges" (ptr (lift_typ wchar_t))
    let glyph_min_advance_x = field t "GlyphMinAdvanceX" float
    let glyph_max_advance_x = field t "GlyphMaxAdvanceX" float
    let merge_mode = field t "MergeMode" bool
    let font_builder_flags = field t "FontBuilderFlags" (lift_typ int_as_uint)
    let rasterizer_multiply = field t "RasterizerMultiply" float
    let rasterizer_density = field t "RasterizerDensity" float
    let ellipsis_char = field t "EllipsisChar" (lift_typ wchar_t)
    let name = field t "Name" (array (40) char)
    let dst_font = field t "DstFont" (ptr (lift_typ Font.t))
    let () = seal t
  end
  
  module Vector_ImU32 = struct
    type t = vector_im_u32_t structure
    let t : t typ = structure "ImVector_ImU32"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ u32_t))
    let () = seal t
  end
  
  module FontGlyphRangesBuilder = struct
    type t = font_glyph_ranges_builder_t structure
    let t : t typ = structure "ImFontGlyphRangesBuilder"
    let used_chars = field t "UsedChars" (lift_typ vector_im_u32_t)
    let () = seal t
  end
  
  module FontAtlasCustomRect = struct
    type t = font_atlas_custom_rect_t structure
    let t : t typ = structure "ImFontAtlasCustomRect"
    let width = field t "Width" (lift_typ int_as_ushort)
    let height = field t "Height" (lift_typ int_as_ushort)
    let x = field t "X" (lift_typ int_as_ushort)
    let y = field t "Y" (lift_typ int_as_ushort)
    let glyph_id = field t "GlyphID" (lift_typ int_as_uint)
    let glyph_advance_x = field t "GlyphAdvanceX" float
    let glyph_offset = field t "GlyphOffset" (lift_typ Vec2.t)
    let font = field t "Font" (ptr (lift_typ Font.t))
    let () = seal t
  end
  
  module Vector_ImFontAtlasCustomRect = struct
    type t = vector_im_font_atlas_custom_rect_t structure
    let t : t typ = structure "ImVector_ImFontAtlasCustomRect"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ font_atlas_custom_rect_t))
    let () = seal t
  end
  
  module Vector_ImFontConfig = struct
    type t = vector_im_font_config_t structure
    let t : t typ = structure "ImVector_ImFontConfig"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ font_config_t))
    let () = seal t
  end
  
  module FontAtlas = struct
    type t = font_atlas_t structure
    let t : t typ = structure "ImFontAtlas"
    let flags = field t "Flags" (lift_typ font_atlas_flags_t)
    let tex_id = field t "TexID" (lift_typ texture_id_t)
    let tex_desired_width = field t "TexDesiredWidth" int
    let tex_glyph_padding = field t "TexGlyphPadding" int
    let locked = field t "Locked" bool
    let user_data = field t "UserData" (ptr void)
    let tex_ready = field t "TexReady" bool
    let tex_pixels_use_colors = field t "TexPixelsUseColors" bool
    let tex_pixels_alpha8 =
      field t "TexPixelsAlpha8" (ptr (lift_typ int_as_uchar))
    let tex_pixels_rgb_a32 =
      field t "TexPixelsRGBA32" (ptr (lift_typ int_as_uint))
    let tex_width = field t "TexWidth" int
    let tex_height = field t "TexHeight" int
    let tex_uv_scale = field t "TexUvScale" (lift_typ Vec2.t)
    let tex_uv_white_pixel = field t "TexUvWhitePixel" (lift_typ Vec2.t)
    let fonts = field t "Fonts" (lift_typ Vector_ImFontPtr.t)
    let custom_rects =
      field t "CustomRects" (lift_typ vector_im_font_atlas_custom_rect_t)
    let config_data = field t "ConfigData" (lift_typ vector_im_font_config_t)
    let tex_uv_lines = field t "TexUvLines" (array (64) (lift_typ Vec4.t))
    let font_builder_io =
      field t "FontBuilderIO" (ptr (lift_typ font_builder_io_t))
    let font_builder_flags = field t "FontBuilderFlags" (lift_typ int_as_uint)
    let pack_id_mouse_cursors = field t "PackIdMouseCursors" int
    let pack_id_lines = field t "PackIdLines" int
    let () = seal t
  end
  
  module Vector_ImFontGlyph = struct
    type t = vector_im_font_glyph_t structure
    let t : t typ = structure "ImVector_ImFontGlyph"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ font_glyph_t))
    let () = seal t
  end
  
  module Viewport = struct
    type t = viewport_t structure
    let t : t typ = structure "ImGuiViewport"
    let id = field t "ID" (lift_typ id_t)
    let flags = field t "Flags" (lift_typ viewport_flags_t)
    let pos = field t "Pos" (lift_typ Vec2.t)
    let size = field t "Size" (lift_typ Vec2.t)
    let work_pos = field t "WorkPos" (lift_typ Vec2.t)
    let work_size = field t "WorkSize" (lift_typ Vec2.t)
    let dpi_scale = field t "DpiScale" float
    let parent_viewport_id = field t "ParentViewportId" (lift_typ id_t)
    let draw_data = field t "DrawData" (ptr (lift_typ draw_data_t))
    let renderer_user_data = field t "RendererUserData" (ptr void)
    let platform_user_data = field t "PlatformUserData" (ptr void)
    let platform_handle = field t "PlatformHandle" (ptr void)
    let platform_handle_raw = field t "PlatformHandleRaw" (ptr void)
    let platform_window_created = field t "PlatformWindowCreated" bool
    let platform_request_move = field t "PlatformRequestMove" bool
    let platform_request_resize = field t "PlatformRequestResize" bool
    let platform_request_close = field t "PlatformRequestClose" bool
    let () = seal t
  end
  
  module Vector_ImPlatformMonitor = struct
    type t = vector_im_platform_monitor_t structure
    let t : t typ = structure "ImVector_ImGuiPlatformMonitor"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ PlatformMonitor.t))
    let () = seal t
  end
  
  module Vector_ImViewportPtr = struct
    type t = vector_im_viewport_ptr_t structure
    let t : t typ = structure "ImVector_ImGuiViewportPtr"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (ptr (lift_typ viewport_t)))
    let () = seal t
  end
  
  module StbUndoRecord = struct
    type t = stb_undo_record_t structure
    let t : t typ = structure "StbUndoRecord"
    let where = field t "where" int
    let insert_length = field t "insert_length" int
    let delete_length = field t "delete_length" int
    let char_storage = field t "char_storage" int
    let () = seal t
  end
  
  module StbUndoState = struct
    type t = stb_undo_state_t structure
    let t : t typ = structure "StbUndoState"
    let undo_rec = field t "undo_rec" (array (99) (lift_typ stb_undo_record_t))
    let undo_char = field t "undo_char" (array (999) (lift_typ wchar_t))
    let undo_point = field t "undo_point" short
    let redo_point = field t "redo_point" short
    let undo_char_point = field t "undo_char_point" int
    let redo_char_point = field t "redo_char_point" int
    let () = seal t
  end
  
  module Stb_TexteditState = struct
    type t = stb_textedit_state_t structure
    let t : t typ = structure "STB_TexteditState"
    let cursor = field t "cursor" int
    let select_start = field t "select_start" int
    let select_end = field t "select_end" int
    let insert_mode = field t "insert_mode" (lift_typ int_as_uchar)
    let row_count_per_page = field t "row_count_per_page" int
    let cursor_at_end_of_line =
      field t "cursor_at_end_of_line" (lift_typ int_as_uchar)
    let initialized = field t "initialized" (lift_typ int_as_uchar)
    let has_preferred_x = field t "has_preferred_x" (lift_typ int_as_uchar)
    let single_line = field t "single_line" (lift_typ int_as_uchar)
    let padding1 = field t "padding1" (lift_typ int_as_uchar)
    let padding2 = field t "padding2" (lift_typ int_as_uchar)
    let padding3 = field t "padding3" (lift_typ int_as_uchar)
    let preferred_x = field t "preferred_x" float
    let undostate = field t "undostate" (lift_typ stb_undo_state_t)
    let () = seal t
  end
  
  module StbTexteditRow = struct
    type t = stb_textedit_row_t structure
    let t : t typ = structure "StbTexteditRow"
    let x0 = field t "x0" float
    let x1 = field t "x1" float
    let baseline_y_delta = field t "baseline_y_delta" float
    let ymin = field t "ymin" float
    let ymax = field t "ymax" float
    let num_chars = field t "num_chars" int
    let () = seal t
  end
  
  module Vec1 = struct
    type t = vec1_t structure
    let t : t typ = structure "ImVec1"
    let x = field t "x" float
    let () = seal t
  end
  
  module BitVector = struct
    type t = bit_vector_t structure
    let t : t typ = structure "ImBitVector"
    let storage = field t "Storage" (lift_typ vector_im_u32_t)
    let () = seal t
  end
  
  module Vector_int = struct
    type t = vector_int_t structure
    let t : t typ = structure "ImVector_int"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr int)
    let () = seal t
  end
  
  module DrawDataBuilder = struct
    type t = draw_data_builder_t structure
    let t : t typ = structure "ImDrawDataBuilder"
    let layers =
      field t "Layers" (array (2) (ptr (lift_typ vector_im_draw_list_ptr_t)))
    let layer_data1 = field t "LayerData1" (lift_typ vector_im_draw_list_ptr_t)
    let () = seal t
  end
  
  module ColorMod = struct
    type t = color_mod_t structure
    let t : t typ = structure "ImGuiColorMod"
    let col = field t "Col" (lift_typ col_t)
    let backup_value = field t "BackupValue" (lift_typ Vec4.t)
    let () = seal t
  end
  
  module StyleMod = struct
    type t = style_mod_t structure
    let t : t typ = structure "ImGuiStyleMod"
    let var_idx = field t "VarIdx" (lift_typ style_var_t)
    let backup_int = field t "BackupInt" (array (2) int)
    let backup_float = field t "BackupFloat" (array (2) float)
    let () = seal t
  end
  
  module GroupData = struct
    type t = group_data_t structure
    let t : t typ = structure "ImGuiGroupData"
    let window_id = field t "WindowID" (lift_typ id_t)
    let backup_cursor_pos = field t "BackupCursorPos" (lift_typ Vec2.t)
    let backup_cursor_max_pos = field t "BackupCursorMaxPos" (lift_typ Vec2.t)
    let backup_cursor_pos_prev_line =
      field t "BackupCursorPosPrevLine" (lift_typ Vec2.t)
    let backup_indent = field t "BackupIndent" (lift_typ vec1_t)
    let backup_group_offset = field t "BackupGroupOffset" (lift_typ vec1_t)
    let backup_curr_line_size = field t "BackupCurrLineSize" (lift_typ Vec2.t)
    let backup_curr_line_text_base_offset =
      field t "BackupCurrLineTextBaseOffset" float
    let backup_active_id_is_alive =
      field t "BackupActiveIdIsAlive" (lift_typ id_t)
    let backup_active_id_previous_frame_is_alive =
      field t "BackupActiveIdPreviousFrameIsAlive" bool
    let backup_hovered_id_is_alive = field t "BackupHoveredIdIsAlive" bool
    let backup_is_same_line = field t "BackupIsSameLine" bool
    let emit_item = field t "EmitItem" bool
    let () = seal t
  end
  
  module MenuColumns = struct
    type t = menu_columns_t structure
    let t : t typ = structure "ImGuiMenuColumns"
    let total_width = field t "TotalWidth" (lift_typ u32_t)
    let next_total_width = field t "NextTotalWidth" (lift_typ u32_t)
    let spacing = field t "Spacing" (lift_typ u16_t)
    let offset_icon = field t "OffsetIcon" (lift_typ u16_t)
    let offset_label = field t "OffsetLabel" (lift_typ u16_t)
    let offset_shortcut = field t "OffsetShortcut" (lift_typ u16_t)
    let offset_mark = field t "OffsetMark" (lift_typ u16_t)
    let widths = field t "Widths" (array (4) (lift_typ u16_t))
    let () = seal t
  end
  
  module NavTreeNodeData = struct
    type t = nav_tree_node_data_t structure
    let t : t typ = structure "ImGuiNavTreeNodeData"
    let id = field t "ID" (lift_typ id_t)
    let in_flags = field t "InFlags" (lift_typ item_flags_t)
    let nav_rect = field t "NavRect" (lift_typ Rect.t)
    let () = seal t
  end
  
  module StackSizes = struct
    type t = stack_sizes_t structure
    let t : t typ = structure "ImGuiStackSizes"
    let size_of_id_stack = field t "SizeOfIDStack" short
    let size_of_color_stack = field t "SizeOfColorStack" short
    let size_of_style_var_stack = field t "SizeOfStyleVarStack" short
    let size_of_font_stack = field t "SizeOfFontStack" short
    let size_of_focus_scope_stack = field t "SizeOfFocusScopeStack" short
    let size_of_group_stack = field t "SizeOfGroupStack" short
    let size_of_item_flags_stack = field t "SizeOfItemFlagsStack" short
    let size_of_begin_popup_stack = field t "SizeOfBeginPopupStack" short
    let size_of_disabled_stack = field t "SizeOfDisabledStack" short
    let () = seal t
  end
  
  module WindowStackData = struct
    type t = window_stack_data_t structure
    let t : t typ = structure "ImGuiWindowStackData"
    let window = field t "Window" (ptr (lift_typ window_t))
    let parent_last_item_data_backup =
      field t "ParentLastItemDataBackup" (lift_typ LastItemData.t)
    let stack_sizes_on_begin =
      field t "StackSizesOnBegin" (lift_typ stack_sizes_t)
    let () = seal t
  end
  
  module ShrinkWidthItem = struct
    type t = shrink_width_item_t structure
    let t : t typ = structure "ImGuiShrinkWidthItem"
    let index = field t "Index" int
    let width = field t "Width" float
    let initial_width = field t "InitialWidth" float
    let () = seal t
  end
  
  module PtrOrIndex = struct
    type t = ptr_or_index_t structure
    let t : t typ = structure "ImGuiPtrOrIndex"
    let ptr = field t "Ptr" (ptr void)
    let index = field t "Index" int
    let () = seal t
  end
  
  module DataVarInfo = struct
    type t = data_var_info_t structure
    let t : t typ = structure "ImGuiDataVarInfo"
    let type_ = field t "Type" (lift_typ data_type_t)
    let count = field t "Count" (lift_typ u32_t)
    let offset = field t "Offset" (lift_typ u32_t)
    let () = seal t
  end
  
  module DataTypeTempStorage = struct
    type t = data_type_temp_storage_t structure
    let t : t typ = structure "ImGuiDataTypeTempStorage"
    let data = field t "Data" (array (8) (lift_typ u8_t))
    let () = seal t
  end
  
  module DataTypeInfo = struct
    type t = data_type_info_t structure
    let t : t typ = structure "ImGuiDataTypeInfo"
    let size = field t "Size" (lift_typ int_as_size_t)
    let name = field t "Name" string
    let print_fmt = field t "PrintFmt" string
    let scan_fmt = field t "ScanFmt" string
    let () = seal t
  end
  
  module PopupData = struct
    type t = popup_data_t structure
    let t : t typ = structure "ImGuiPopupData"
    let popup_id = field t "PopupId" (lift_typ id_t)
    let window = field t "Window" (ptr (lift_typ window_t))
    let restore_nav_window =
      field t "RestoreNavWindow" (ptr (lift_typ window_t))
    let parent_nav_layer = field t "ParentNavLayer" int
    let open_frame_count = field t "OpenFrameCount" int
    let open_parent_id = field t "OpenParentId" (lift_typ id_t)
    let open_popup_pos = field t "OpenPopupPos" (lift_typ Vec2.t)
    let open_mouse_pos = field t "OpenMousePos" (lift_typ Vec2.t)
    let () = seal t
  end
  
  module InputEventMousePos = struct
    type t = input_event_mouse_pos_t structure
    let t : t typ = structure "ImGuiInputEventMousePos"
    let pos_x = field t "PosX" float
    let pos_y = field t "PosY" float
    let mouse_source = field t "MouseSource" (lift_typ MouseSource.t)
    let () = seal t
  end
  
  module InputEventMouseWheel = struct
    type t = input_event_mouse_wheel_t structure
    let t : t typ = structure "ImGuiInputEventMouseWheel"
    let wheel_x = field t "WheelX" float
    let wheel_y = field t "WheelY" float
    let mouse_source = field t "MouseSource" (lift_typ MouseSource.t)
    let () = seal t
  end
  
  module InputEventMouseButton = struct
    type t = input_event_mouse_button_t structure
    let t : t typ = structure "ImGuiInputEventMouseButton"
    let button = field t "Button" int
    let down = field t "Down" bool
    let mouse_source = field t "MouseSource" (lift_typ MouseSource.t)
    let () = seal t
  end
  
  module InputEventMouseViewport = struct
    type t = input_event_mouse_viewport_t structure
    let t : t typ = structure "ImGuiInputEventMouseViewport"
    let hovered_viewport_id = field t "HoveredViewportID" (lift_typ id_t)
    let () = seal t
  end
  
  module InputEventKey = struct
    type t = input_event_key_t structure
    let t : t typ = structure "ImGuiInputEventKey"
    let key = field t "Key" (lift_typ Key.t)
    let down = field t "Down" bool
    let analog_value = field t "AnalogValue" float
    let () = seal t
  end
  
  module InputEventText = struct
    type t = input_event_text_t structure
    let t : t typ = structure "ImGuiInputEventText"
    let char = field t "Char" (lift_typ int_as_uint)
    let () = seal t
  end
  
  module InputEventAppFocused = struct
    type t = input_event_app_focused_t structure
    let t : t typ = structure "ImGuiInputEventAppFocused"
    let focused = field t "Focused" bool
    let () = seal t
  end
  
  module InputEvent = struct
    type t = input_event_t structure
    let t : t typ = structure "ImGuiInputEvent"
    let type_ = field t "Type" (lift_typ InputEventType.t)
    let source = field t "Source" (lift_typ InputSource.t)
    let event_id = field t "EventId" (lift_typ u32_t)
    let mouse_pos = field t "MousePos" (lift_typ input_event_mouse_pos_t)
    let mouse_wheel = field t "MouseWheel" (lift_typ input_event_mouse_wheel_t)
    let mouse_button =
      field t "MouseButton" (lift_typ input_event_mouse_button_t)
    let mouse_viewport =
      field t "MouseViewport" (lift_typ input_event_mouse_viewport_t)
    let key = field t "Key" (lift_typ input_event_key_t)
    let text = field t "Text" (lift_typ input_event_text_t)
    let app_focused = field t "AppFocused" (lift_typ input_event_app_focused_t)
    let added_by_test_engine = field t "AddedByTestEngine" bool
    let () = seal t
  end
  
  module KeyRoutingData = struct
    type t = key_routing_data_t structure
    let t : t typ = structure "ImGuiKeyRoutingData"
    let next_entry_index =
      field t "NextEntryIndex" (lift_typ key_routing_index_t)
    let mods = field t "Mods" (lift_typ u16_t)
    let routing_curr_score = field t "RoutingCurrScore" (lift_typ u8_t)
    let routing_next_score = field t "RoutingNextScore" (lift_typ u8_t)
    let routing_curr = field t "RoutingCurr" (lift_typ id_t)
    let routing_next = field t "RoutingNext" (lift_typ id_t)
    let () = seal t
  end
  
  module Vector_ImKeyRoutingData = struct
    type t = vector_im_key_routing_data_t structure
    let t : t typ = structure "ImVector_ImGuiKeyRoutingData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ key_routing_data_t))
    let () = seal t
  end
  
  module ListClipperRange = struct
    type t = list_clipper_range_t structure
    let t : t typ = structure "ImGuiListClipperRange"
    let min = field t "Min" int
    let max = field t "Max" int
    let pos_to_index_convert = field t "PosToIndexConvert" bool
    let pos_to_index_offset_min = field t "PosToIndexOffsetMin" (lift_typ s8_t)
    let pos_to_index_offset_max = field t "PosToIndexOffsetMax" (lift_typ s8_t)
    let () = seal t
  end
  
  module Vector_ImListClipperRange = struct
    type t = vector_im_list_clipper_range_t structure
    let t : t typ = structure "ImVector_ImGuiListClipperRange"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ list_clipper_range_t))
    let () = seal t
  end
  
  module ListClipperData = struct
    type t = list_clipper_data_t structure
    let t : t typ = structure "ImGuiListClipperData"
    let list_clipper = field t "ListClipper" (ptr (lift_typ list_clipper_t))
    let lossyness_offset = field t "LossynessOffset" float
    let step_no = field t "StepNo" int
    let items_frozen = field t "ItemsFrozen" int
    let ranges = field t "Ranges" (lift_typ vector_im_list_clipper_range_t)
    let () = seal t
  end
  
  module FocusScopeData = struct
    type t = focus_scope_data_t structure
    let t : t typ = structure "ImGuiFocusScopeData"
    let id = field t "ID" (lift_typ id_t)
    let window_id = field t "WindowID" (lift_typ id_t)
    let () = seal t
  end
  
  module TypingSelectRequest = struct
    type t = typing_select_request_t structure
    let t : t typ = structure "ImGuiTypingSelectRequest"
    let flags = field t "Flags" (lift_typ typing_select_flags_t)
    let search_buffer_len = field t "SearchBufferLen" int
    let search_buffer = field t "SearchBuffer" string
    let select_request = field t "SelectRequest" bool
    let single_char_mode = field t "SingleCharMode" bool
    let single_char_size = field t "SingleCharSize" (lift_typ s8_t)
    let () = seal t
  end
  
  module OldColumnData = struct
    type t = old_column_data_t structure
    let t : t typ = structure "ImGuiOldColumnData"
    let offset_norm = field t "OffsetNorm" float
    let offset_norm_before_resize = field t "OffsetNormBeforeResize" float
    let flags = field t "Flags" (lift_typ old_column_flags_t)
    let clip_rect = field t "ClipRect" (lift_typ Rect.t)
    let () = seal t
  end
  
  module Vector_ImOldColumnData = struct
    type t = vector_im_old_column_data_t structure
    let t : t typ = structure "ImVector_ImGuiOldColumnData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ old_column_data_t))
    let () = seal t
  end
  
  module OldColumns = struct
    type t = old_columns_t structure
    let t : t typ = structure "ImGuiOldColumns"
    let id = field t "ID" (lift_typ id_t)
    let flags = field t "Flags" (lift_typ old_column_flags_t)
    let is_first_frame = field t "IsFirstFrame" bool
    let is_being_resized = field t "IsBeingResized" bool
    let current = field t "Current" int
    let count = field t "Count" int
    let off_min_x = field t "OffMinX" float
    let off_max_x = field t "OffMaxX" float
    let line_min_y = field t "LineMinY" float
    let line_max_y = field t "LineMaxY" float
    let host_cursor_pos_y = field t "HostCursorPosY" float
    let host_cursor_max_pos_x = field t "HostCursorMaxPosX" float
    let host_initial_clip_rect =
      field t "HostInitialClipRect" (lift_typ Rect.t)
    let host_backup_clip_rect = field t "HostBackupClipRect" (lift_typ Rect.t)
    let host_backup_parent_work_rect =
      field t "HostBackupParentWorkRect" (lift_typ Rect.t)
    let columns = field t "Columns" (lift_typ vector_im_old_column_data_t)
    let splitter = field t "Splitter" (lift_typ draw_list_splitter_t)
    let () = seal t
  end
  
  module Vector_ImDockRequest = struct
    type t = vector_im_dock_request_t structure
    let t : t typ = structure "ImVector_ImGuiDockRequest"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ dock_request_t))
    let () = seal t
  end
  
  module Vector_ImDockNodeSettings = struct
    type t = vector_im_dock_node_settings_t structure
    let t : t typ = structure "ImVector_ImGuiDockNodeSettings"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ dock_node_settings_t))
    let () = seal t
  end
  
  module ViewportP = struct
    type t = viewport_p_t structure
    let t : t typ = structure "ImGuiViewportP"
    let im_viewport = field t "_ImGuiViewport" (lift_typ viewport_t)
    let window = field t "Window" (ptr (lift_typ window_t))
    let idx = field t "Idx" int
    let last_frame_active = field t "LastFrameActive" int
    let last_focused_stamp_count = field t "LastFocusedStampCount" int
    let last_name_hash = field t "LastNameHash" (lift_typ id_t)
    let last_pos = field t "LastPos" (lift_typ Vec2.t)
    let alpha = field t "Alpha" float
    let last_alpha = field t "LastAlpha" float
    let last_focused_had_nav_window = field t "LastFocusedHadNavWindow" bool
    let platform_monitor = field t "PlatformMonitor" short
    let bg_fg_draw_lists_last_frame =
      field t "BgFgDrawListsLastFrame" (array (2) int)
    let bg_fg_draw_lists =
      field t "BgFgDrawLists" (array (2) (ptr (lift_typ DrawList.t)))
    let draw_data_p = field t "DrawDataP" (lift_typ draw_data_t)
    let draw_data_builder =
      field t "DrawDataBuilder" (lift_typ draw_data_builder_t)
    let last_platform_pos = field t "LastPlatformPos" (lift_typ Vec2.t)
    let last_platform_size = field t "LastPlatformSize" (lift_typ Vec2.t)
    let last_renderer_size = field t "LastRendererSize" (lift_typ Vec2.t)
    let work_offset_min = field t "WorkOffsetMin" (lift_typ Vec2.t)
    let work_offset_max = field t "WorkOffsetMax" (lift_typ Vec2.t)
    let build_work_offset_min = field t "BuildWorkOffsetMin" (lift_typ Vec2.t)
    let build_work_offset_max = field t "BuildWorkOffsetMax" (lift_typ Vec2.t)
    let () = seal t
  end
  
  module WindowSettings = struct
    type t = window_settings_t structure
    let t : t typ = structure "ImGuiWindowSettings"
    let id = field t "ID" (lift_typ id_t)
    let pos = field t "Pos" (lift_typ Vec2ih.t)
    let size = field t "Size" (lift_typ Vec2ih.t)
    let viewport_pos = field t "ViewportPos" (lift_typ Vec2ih.t)
    let viewport_id = field t "ViewportId" (lift_typ id_t)
    let dock_id = field t "DockId" (lift_typ id_t)
    let class_id = field t "ClassId" (lift_typ id_t)
    let dock_order = field t "DockOrder" short
    let collapsed = field t "Collapsed" bool
    let is_child = field t "IsChild" bool
    let want_apply = field t "WantApply" bool
    let want_delete = field t "WantDelete" bool
    let () = seal t
  end
  
  module SettingsHandler = struct
    type t = settings_handler_t structure
    let t : t typ = structure "ImGuiSettingsHandler"
    let type_name = field t "TypeName" string
    let type_hash = field t "TypeHash" (lift_typ id_t)
    let clear_all_fn =
      field t "ClearAllFn"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ context_t)) @-> (ptr (lift_typ settings_handler_t))
              @-> returning void)))
    let read_init_fn =
      field t "ReadInitFn"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ context_t)) @-> (ptr (lift_typ settings_handler_t))
              @-> returning void)))
    let read_open_fn =
      field t "ReadOpenFn"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ context_t)) @-> (ptr (lift_typ settings_handler_t))
              @-> string @-> returning (ptr void))))
    let read_line_fn =
      field t "ReadLineFn"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ context_t)) @-> (ptr (lift_typ settings_handler_t))
              @-> (ptr void) @-> string @-> returning void)))
    let apply_all_fn =
      field t "ApplyAllFn"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ context_t)) @-> (ptr (lift_typ settings_handler_t))
              @-> returning void)))
    let write_all_fn =
      field t "WriteAllFn"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ context_t)) @-> (ptr (lift_typ settings_handler_t))
              @-> (ptr (lift_typ TextBuffer.t)) @-> returning void)))
    let user_data = field t "UserData" (ptr void)
    let () = seal t
  end
  
  module LocEntry = struct
    type t = loc_entry_t structure
    let t : t typ = structure "ImGuiLocEntry"
    let key = field t "Key" (lift_typ LocKey.t)
    let text = field t "Text" string
    let () = seal t
  end
  
  module DebugAllocEntry = struct
    type t = debug_alloc_entry_t structure
    let t : t typ = structure "ImGuiDebugAllocEntry"
    let frame_count = field t "FrameCount" int
    let alloc_count = field t "AllocCount" (lift_typ s16_t)
    let free_count = field t "FreeCount" (lift_typ s16_t)
    let () = seal t
  end
  
  module Vector_ImStackLevelInfo = struct
    type t = vector_im_stack_level_info_t structure
    let t : t typ = structure "ImVector_ImGuiStackLevelInfo"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ stack_level_info_t))
    let () = seal t
  end
  
  module ContextHook = struct
    type t = context_hook_t structure
    let t : t typ = structure "ImGuiContextHook"
    let hook_id = field t "HookId" (lift_typ id_t)
    let type_ = field t "Type" (lift_typ ContextHookType.t)
    let owner = field t "Owner" (lift_typ id_t)
    let callback =
      field t "Callback"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ context_t)) @-> (ptr (lift_typ context_hook_t))
              @-> returning void)))
    let user_data = field t "UserData" (ptr void)
    let () = seal t
  end
  
  module Vector_ImTable = struct
    type t = vector_im_table_t structure
    let t : t typ = structure "ImVector_ImGuiTable"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ table_t))
    let () = seal t
  end
  
  module Vector_ImTabBar = struct
    type t = vector_im_tab_bar_t structure
    let t : t typ = structure "ImVector_ImGuiTabBar"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ tab_bar_t))
    let () = seal t
  end
  
  module TabItem = struct
    type t = tab_item_t structure
    let t : t typ = structure "ImGuiTabItem"
    let id = field t "ID" (lift_typ id_t)
    let flags = field t "Flags" (lift_typ tab_item_flags_t)
    let window = field t "Window" (ptr (lift_typ window_t))
    let last_frame_visible = field t "LastFrameVisible" int
    let last_frame_selected = field t "LastFrameSelected" int
    let offset = field t "Offset" float
    let width = field t "Width" float
    let content_width = field t "ContentWidth" float
    let requested_width = field t "RequestedWidth" float
    let name_offset = field t "NameOffset" (lift_typ s32_t)
    let begin_order = field t "BeginOrder" (lift_typ s16_t)
    let index_during_layout = field t "IndexDuringLayout" (lift_typ s16_t)
    let want_close = field t "WantClose" bool
    let () = seal t
  end
  
  module Vector_ImTabItem = struct
    type t = vector_im_tab_item_t structure
    let t : t typ = structure "ImVector_ImGuiTabItem"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ tab_item_t))
    let () = seal t
  end
  
  module TabBar = struct
    type t = tab_bar_t structure
    let t : t typ = structure "ImGuiTabBar"
    let tabs = field t "Tabs" (lift_typ vector_im_tab_item_t)
    let flags = field t "Flags" (lift_typ tab_bar_flags_t)
    let id = field t "ID" (lift_typ id_t)
    let selected_tab_id = field t "SelectedTabId" (lift_typ id_t)
    let next_selected_tab_id = field t "NextSelectedTabId" (lift_typ id_t)
    let visible_tab_id = field t "VisibleTabId" (lift_typ id_t)
    let curr_frame_visible = field t "CurrFrameVisible" int
    let prev_frame_visible = field t "PrevFrameVisible" int
    let bar_rect = field t "BarRect" (lift_typ Rect.t)
    let curr_tabs_contents_height = field t "CurrTabsContentsHeight" float
    let prev_tabs_contents_height = field t "PrevTabsContentsHeight" float
    let width_all_tabs = field t "WidthAllTabs" float
    let width_all_tabs_ideal = field t "WidthAllTabsIdeal" float
    let scrolling_anim = field t "ScrollingAnim" float
    let scrolling_target = field t "ScrollingTarget" float
    let scrolling_target_dist_to_visibility =
      field t "ScrollingTargetDistToVisibility" float
    let scrolling_speed = field t "ScrollingSpeed" float
    let scrolling_rect_min_x = field t "ScrollingRectMinX" float
    let scrolling_rect_max_x = field t "ScrollingRectMaxX" float
    let separator_min_x = field t "SeparatorMinX" float
    let separator_max_x = field t "SeparatorMaxX" float
    let reorder_request_tab_id = field t "ReorderRequestTabId" (lift_typ id_t)
    let reorder_request_offset =
      field t "ReorderRequestOffset" (lift_typ s16_t)
    let begin_count = field t "BeginCount" (lift_typ s8_t)
    let want_layout = field t "WantLayout" bool
    let visible_tab_was_submitted = field t "VisibleTabWasSubmitted" bool
    let tabs_added_new = field t "TabsAddedNew" bool
    let tabs_active_count = field t "TabsActiveCount" (lift_typ s16_t)
    let last_tab_item_idx = field t "LastTabItemIdx" (lift_typ s16_t)
    let item_spacing_y = field t "ItemSpacingY" float
    let frame_padding = field t "FramePadding" (lift_typ Vec2.t)
    let backup_cursor_pos = field t "BackupCursorPos" (lift_typ Vec2.t)
    let tabs_names = field t "TabsNames" (lift_typ TextBuffer.t)
    let () = seal t
  end
  
  module TableCellData = struct
    type t = table_cell_data_t structure
    let t : t typ = structure "ImGuiTableCellData"
    let bg_color = field t "BgColor" (lift_typ u32_t)
    let column = field t "Column" (lift_typ table_column_idx_t)
    let () = seal t
  end
  
  module TableHeaderData = struct
    type t = table_header_data_t structure
    let t : t typ = structure "ImGuiTableHeaderData"
    let index = field t "Index" (lift_typ table_column_idx_t)
    let text_color = field t "TextColor" (lift_typ u32_t)
    let bg_color0 = field t "BgColor0" (lift_typ u32_t)
    let bg_color1 = field t "BgColor1" (lift_typ u32_t)
    let () = seal t
  end
  
  module Vector_ImTableHeaderData = struct
    type t = vector_im_table_header_data_t structure
    let t : t typ = structure "ImVector_ImGuiTableHeaderData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ table_header_data_t))
    let () = seal t
  end
  
  module TableTempData = struct
    type t = table_temp_data_t structure
    let t : t typ = structure "ImGuiTableTempData"
    let table_index = field t "TableIndex" int
    let last_time_active = field t "LastTimeActive" float
    let angled_headers_extra_width = field t "AngledHeadersExtraWidth" float
    let angled_headers_requests =
      field t "AngledHeadersRequests" (lift_typ vector_im_table_header_data_t)
    let user_outer_size = field t "UserOuterSize" (lift_typ Vec2.t)
    let draw_splitter = field t "DrawSplitter" (lift_typ draw_list_splitter_t)
    let host_backup_work_rect = field t "HostBackupWorkRect" (lift_typ Rect.t)
    let host_backup_parent_work_rect =
      field t "HostBackupParentWorkRect" (lift_typ Rect.t)
    let host_backup_prev_line_size =
      field t "HostBackupPrevLineSize" (lift_typ Vec2.t)
    let host_backup_curr_line_size =
      field t "HostBackupCurrLineSize" (lift_typ Vec2.t)
    let host_backup_cursor_max_pos =
      field t "HostBackupCursorMaxPos" (lift_typ Vec2.t)
    let host_backup_columns_offset =
      field t "HostBackupColumnsOffset" (lift_typ vec1_t)
    let host_backup_item_width = field t "HostBackupItemWidth" float
    let host_backup_item_width_stack_size =
      field t "HostBackupItemWidthStackSize" int
    let () = seal t
  end
  
  module TableSettings = struct
    type t = table_settings_t structure
    let t : t typ = structure "ImGuiTableSettings"
    let id = field t "ID" (lift_typ id_t)
    let save_flags = field t "SaveFlags" (lift_typ table_flags_t)
    let ref_scale = field t "RefScale" float
    let columns_count = field t "ColumnsCount" (lift_typ table_column_idx_t)
    let columns_count_max =
      field t "ColumnsCountMax" (lift_typ table_column_idx_t)
    let want_apply = field t "WantApply" bool
    let () = seal t
  end
  
  module FontBuilderIo = struct
    type t = font_builder_io_t structure
    let t : t typ = structure "ImFontBuilderIO"
    let font_builder_build =
      field t "FontBuilder_Build"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ font_atlas_t)) @-> returning bool)))
    let () = seal t
  end
  
  
end
