(* This file was generated by imguiml_generator.exe on 26/04/2024 *)

open Ctypes
open Cimgui_types
open Cimgui_enums.Enums (Cimgui_enums_generated)
open Cimgui_base_structs.Base(Cimgui_base_structs_generated)

module TableColumnSortSpecs = struct
  type t = table_column_sort_specs_t structure
  let t : t typ = structure "ImGuiTableColumnSortSpecs"
  let column_user_id = field t "ColumnUserID" (lift_typ id_t)
  let column_index = field t "ColumnIndex" (lift_typ s16_t)
  let sort_order = field t "SortOrder" (lift_typ s16_t)
  let sort_direction = field t "SortDirection" (lift_typ sort_direction_t)
  let () = seal t
end

module NextItemData = struct
  type t = next_item_data_t structure
  let t : t typ = structure "ImGuiNextItemData"
  let flags = field t "Flags" (lift_typ next_item_data_flags_t)
  let item_flags = field t "ItemFlags" (lift_typ item_flags_t)
  let selection_user_data =
    field t "SelectionUserData" (lift_typ selection_user_data_t)
  let width = field t "Width" float
  let shortcut = field t "Shortcut" (lift_typ key_chord_t)
  let open_val = field t "OpenVal" bool
  let open_cond = field t "OpenCond" (lift_typ cond_t)
  let () = seal t
end

module Structs (S : Ctypes.TYPE) = struct
  open S
  module TableSortSpecs = struct
    type t = table_sort_specs_t structure
    let t : t typ = structure "ImGuiTableSortSpecs"
    let specs = field t "Specs" (ptr (lift_typ table_column_sort_specs_t))
    let specs_count = field t "SpecsCount" int
    let specs_dirty = field t "SpecsDirty" bool
    let () = seal t
  end
  
  module Style = struct
    type t = style_t structure
    let t : t typ = structure "ImGuiStyle"
    let alpha = field t "Alpha" float
    let disabled_alpha = field t "DisabledAlpha" float
    let window_padding = field t "WindowPadding" (lift_typ Vec2.t)
    let window_rounding = field t "WindowRounding" float
    let window_border_size = field t "WindowBorderSize" float
    let window_min_size = field t "WindowMinSize" (lift_typ Vec2.t)
    let window_title_align = field t "WindowTitleAlign" (lift_typ Vec2.t)
    let window_menu_button_position =
      field t "WindowMenuButtonPosition" (lift_typ dir_t)
    let child_rounding = field t "ChildRounding" float
    let child_border_size = field t "ChildBorderSize" float
    let popup_rounding = field t "PopupRounding" float
    let popup_border_size = field t "PopupBorderSize" float
    let frame_padding = field t "FramePadding" (lift_typ Vec2.t)
    let frame_rounding = field t "FrameRounding" float
    let frame_border_size = field t "FrameBorderSize" float
    let item_spacing = field t "ItemSpacing" (lift_typ Vec2.t)
    let item_inner_spacing = field t "ItemInnerSpacing" (lift_typ Vec2.t)
    let cell_padding = field t "CellPadding" (lift_typ Vec2.t)
    let touch_extra_padding = field t "TouchExtraPadding" (lift_typ Vec2.t)
    let indent_spacing = field t "IndentSpacing" float
    let columns_min_spacing = field t "ColumnsMinSpacing" float
    let scrollbar_size = field t "ScrollbarSize" float
    let scrollbar_rounding = field t "ScrollbarRounding" float
    let grab_min_size = field t "GrabMinSize" float
    let grab_rounding = field t "GrabRounding" float
    let log_slider_deadzone = field t "LogSliderDeadzone" float
    let tab_rounding = field t "TabRounding" float
    let tab_border_size = field t "TabBorderSize" float
    let tab_min_width_for_close_button =
      field t "TabMinWidthForCloseButton" float
    let tab_bar_border_size = field t "TabBarBorderSize" float
    let table_angled_headers_angle = field t "TableAngledHeadersAngle" float
    let table_angled_headers_text_align =
      field t "TableAngledHeadersTextAlign" (lift_typ Vec2.t)
    let color_button_position = field t "ColorButtonPosition" (lift_typ dir_t)
    let button_text_align = field t "ButtonTextAlign" (lift_typ Vec2.t)
    let selectable_text_align = field t "SelectableTextAlign" (lift_typ Vec2.t)
    let separator_text_border_size = field t "SeparatorTextBorderSize" float
    let separator_text_align = field t "SeparatorTextAlign" (lift_typ Vec2.t)
    let separator_text_padding =
      field t "SeparatorTextPadding" (lift_typ Vec2.t)
    let display_window_padding =
      field t "DisplayWindowPadding" (lift_typ Vec2.t)
    let display_safe_area_padding =
      field t "DisplaySafeAreaPadding" (lift_typ Vec2.t)
    let docking_separator_size = field t "DockingSeparatorSize" float
    let mouse_cursor_scale = field t "MouseCursorScale" float
    let anti_aliased_lines = field t "AntiAliasedLines" bool
    let anti_aliased_lines_use_tex = field t "AntiAliasedLinesUseTex" bool
    let anti_aliased_fill = field t "AntiAliasedFill" bool
    let curve_tessellation_tol = field t "CurveTessellationTol" float
    let circle_tessellation_max_error =
      field t "CircleTessellationMaxError" float
    let colors = field t "Colors" (array (55) (lift_typ Vec4.t))
    let hover_stationary_delay = field t "HoverStationaryDelay" float
    let hover_delay_short = field t "HoverDelayShort" float
    let hover_delay_normal = field t "HoverDelayNormal" float
    let hover_flags_for_tooltip_mouse =
      field t "HoverFlagsForTooltipMouse" (lift_typ hovered_flags_t)
    let hover_flags_for_tooltip_nav =
      field t "HoverFlagsForTooltipNav" (lift_typ hovered_flags_t)
    let () = seal t
  end
  
  module Io = struct
    type t = io_t structure
    let t : t typ = structure "ImGuiIO"
    let config_flags = field t "ConfigFlags" (lift_typ config_flags_t)
    let backend_flags = field t "BackendFlags" (lift_typ backend_flags_t)
    let display_size = field t "DisplaySize" (lift_typ Vec2.t)
    let delta_time = field t "DeltaTime" float
    let ini_saving_rate = field t "IniSavingRate" float
    let ini_filename = field t "IniFilename" string
    let log_filename = field t "LogFilename" string
    let user_data = field t "UserData" (ptr void)
    let fonts = field t "Fonts" (ptr (lift_typ font_atlas_t))
    let font_global_scale = field t "FontGlobalScale" float
    let font_allow_user_scaling = field t "FontAllowUserScaling" bool
    let font_default = field t "FontDefault" (ptr (lift_typ font_t))
    let display_framebuffer_scale =
      field t "DisplayFramebufferScale" (lift_typ Vec2.t)
    let config_docking_no_split = field t "ConfigDockingNoSplit" bool
    let config_docking_with_shift = field t "ConfigDockingWithShift" bool
    let config_docking_always_tab_bar =
      field t "ConfigDockingAlwaysTabBar" bool
    let config_docking_transparent_payload =
      field t "ConfigDockingTransparentPayload" bool
    let config_viewports_no_auto_merge =
      field t "ConfigViewportsNoAutoMerge" bool
    let config_viewports_no_task_bar_icon =
      field t "ConfigViewportsNoTaskBarIcon" bool
    let config_viewports_no_decoration =
      field t "ConfigViewportsNoDecoration" bool
    let config_viewports_no_default_parent =
      field t "ConfigViewportsNoDefaultParent" bool
    let mouse_draw_cursor = field t "MouseDrawCursor" bool
    let config_mac_osx_behaviors = field t "ConfigMacOSXBehaviors" bool
    let config_input_trickle_event_queue =
      field t "ConfigInputTrickleEventQueue" bool
    let config_input_text_cursor_blink =
      field t "ConfigInputTextCursorBlink" bool
    let config_input_text_enter_keep_active =
      field t "ConfigInputTextEnterKeepActive" bool
    let config_drag_click_to_input_text =
      field t "ConfigDragClickToInputText" bool
    let config_windows_resize_from_edges =
      field t "ConfigWindowsResizeFromEdges" bool
    let config_windows_move_from_title_bar_only =
      field t "ConfigWindowsMoveFromTitleBarOnly" bool
    let config_memory_compact_timer = field t "ConfigMemoryCompactTimer" float
    let mouse_double_click_time = field t "MouseDoubleClickTime" float
    let mouse_double_click_max_dist = field t "MouseDoubleClickMaxDist" float
    let mouse_drag_threshold = field t "MouseDragThreshold" float
    let key_repeat_delay = field t "KeyRepeatDelay" float
    let key_repeat_rate = field t "KeyRepeatRate" float
    let config_debug_is_debugger_present =
      field t "ConfigDebugIsDebuggerPresent" bool
    let config_debug_begin_return_value_once =
      field t "ConfigDebugBeginReturnValueOnce" bool
    let config_debug_begin_return_value_loop =
      field t "ConfigDebugBeginReturnValueLoop" bool
    let config_debug_ignore_focus_loss =
      field t "ConfigDebugIgnoreFocusLoss" bool
    let config_debug_ini_settings = field t "ConfigDebugIniSettings" bool
    let backend_platform_name = field t "BackendPlatformName" string
    let backend_renderer_name = field t "BackendRendererName" string
    let backend_platform_user_data =
      field t "BackendPlatformUserData" (ptr void)
    let backend_renderer_user_data =
      field t "BackendRendererUserData" (ptr void)
    let backend_language_user_data =
      field t "BackendLanguageUserData" (ptr void)
    let get_clipboard_text_fn =
      field t "GetClipboardTextFn"
        (lift_typ (Foreign.funptr ((ptr void) @-> returning string)))
    let set_clipboard_text_fn =
      field t "SetClipboardTextFn"
        (lift_typ (Foreign.funptr ((ptr void) @-> string @-> returning void)))
    let clipboard_user_data = field t "ClipboardUserData" (ptr void)
    let set_platform_ime_data_fn =
      field t "SetPlatformImeDataFn"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @->
              (ptr (lift_typ platform_ime_data_t)) @-> returning void)))
    let platform_locale_decimal_point =
      field t "PlatformLocaleDecimalPoint" (lift_typ wchar_t)
    let want_capture_mouse = field t "WantCaptureMouse" bool
    let want_capture_keyboard = field t "WantCaptureKeyboard" bool
    let want_text_input = field t "WantTextInput" bool
    let want_set_mouse_pos = field t "WantSetMousePos" bool
    let want_save_ini_settings = field t "WantSaveIniSettings" bool
    let nav_active = field t "NavActive" bool
    let nav_visible = field t "NavVisible" bool
    let framerate = field t "Framerate" float
    let metrics_render_vertices = field t "MetricsRenderVertices" int
    let metrics_render_indices = field t "MetricsRenderIndices" int
    let metrics_render_windows = field t "MetricsRenderWindows" int
    let metrics_active_windows = field t "MetricsActiveWindows" int
    let mouse_delta = field t "MouseDelta" (lift_typ Vec2.t)
    let ctx = field t "Ctx" (ptr (lift_typ context_t))
    let mouse_pos = field t "MousePos" (lift_typ Vec2.t)
    let mouse_down = field t "MouseDown" (array (5) bool)
    let mouse_wheel = field t "MouseWheel" float
    let mouse_wheel_h = field t "MouseWheelH" float
    let mouse_source = field t "MouseSource" (lift_typ MouseSource.t)
    let mouse_hovered_viewport = field t "MouseHoveredViewport" (lift_typ id_t)
    let key_ctrl = field t "KeyCtrl" bool
    let key_shift = field t "KeyShift" bool
    let key_alt = field t "KeyAlt" bool
    let key_super = field t "KeySuper" bool
    let key_mods = field t "KeyMods" (lift_typ key_chord_t)
    let keys_data = field t "KeysData" (array (154) (lift_typ key_data_t))
    let want_capture_mouse_unless_popup_close =
      field t "WantCaptureMouseUnlessPopupClose" bool
    let mouse_pos_prev = field t "MousePosPrev" (lift_typ Vec2.t)
    let mouse_clicked_pos =
      field t "MouseClickedPos" (array (5) (lift_typ Vec2.t))
    let mouse_clicked_time = field t "MouseClickedTime" (array (5) float)
    let mouse_clicked = field t "MouseClicked" (array (5) bool)
    let mouse_double_clicked = field t "MouseDoubleClicked" (array (5) bool)
    let mouse_clicked_count =
      field t "MouseClickedCount" (array (5) (lift_typ u16_t))
    let mouse_clicked_last_count =
      field t "MouseClickedLastCount" (array (5) (lift_typ u16_t))
    let mouse_released = field t "MouseReleased" (array (5) bool)
    let mouse_down_owned = field t "MouseDownOwned" (array (5) bool)
    let mouse_down_owned_unless_popup_close =
      field t "MouseDownOwnedUnlessPopupClose" (array (5) bool)
    let mouse_wheel_request_axis_swap =
      field t "MouseWheelRequestAxisSwap" bool
    let mouse_down_duration = field t "MouseDownDuration" (array (5) float)
    let mouse_down_duration_prev =
      field t "MouseDownDurationPrev" (array (5) float)
    let mouse_drag_max_distance_abs =
      field t "MouseDragMaxDistanceAbs" (array (5) (lift_typ Vec2.t))
    let mouse_drag_max_distance_sqr =
      field t "MouseDragMaxDistanceSqr" (array (5) float)
    let pen_pressure = field t "PenPressure" float
    let app_focus_lost = field t "AppFocusLost" bool
    let app_accepting_events = field t "AppAcceptingEvents" bool
    let backend_using_legacy_key_arrays =
      field t "BackendUsingLegacyKeyArrays" (lift_typ s8_t)
    let backend_using_legacy_nav_input_array =
      field t "BackendUsingLegacyNavInputArray" bool
    let input_queue_surrogate =
      field t "InputQueueSurrogate" (lift_typ wchar16_t)
    let input_queue_characters =
      field t "InputQueueCharacters" (lift_typ vector_im_wchar_t)
    let () = seal t
  end
  
  module WindowClass = struct
    type t = window_class_t structure
    let t : t typ = structure "ImGuiWindowClass"
    let class_id = field t "ClassId" (lift_typ id_t)
    let parent_viewport_id = field t "ParentViewportId" (lift_typ id_t)
    let focus_route_parent_window_id =
      field t "FocusRouteParentWindowId" (lift_typ id_t)
    let viewport_flags_override_set =
      field t "ViewportFlagsOverrideSet" (lift_typ viewport_flags_t)
    let viewport_flags_override_clear =
      field t "ViewportFlagsOverrideClear" (lift_typ viewport_flags_t)
    let tab_item_flags_override_set =
      field t "TabItemFlagsOverrideSet" (lift_typ tab_item_flags_t)
    let dock_node_flags_override_set =
      field t "DockNodeFlagsOverrideSet" (lift_typ dock_node_flags_t)
    let docking_always_tab_bar = field t "DockingAlwaysTabBar" bool
    let docking_allow_unclassed = field t "DockingAllowUnclassed" bool
    let () = seal t
  end
  
  module Payload = struct
    type t = payload_t structure
    let t : t typ = structure "ImGuiPayload"
    let data = field t "Data" (ptr void)
    let data_size = field t "DataSize" int
    let source_id = field t "SourceId" (lift_typ id_t)
    let source_parent_id = field t "SourceParentId" (lift_typ id_t)
    let data_frame_count = field t "DataFrameCount" int
    let data_type = field t "DataType" (array (33) char)
    let preview = field t "Preview" bool
    let delivery = field t "Delivery" bool
    let () = seal t
  end
  
  module Vector_char = struct
    type t = vector_char_t structure
    let t : t typ = structure "ImVector_char"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" string
    let () = seal t
  end
  
  module TextBuffer = struct
    type t = text_buffer_t structure
    let t : t typ = structure "ImGuiTextBuffer"
    let buf = field t "Buf" (lift_typ vector_char_t)
    let () = seal t
  end
  
  module Storage = struct
    type t = storage_t structure
    let t : t typ = structure "ImGuiStorage"
    let data = field t "Data" (lift_typ vector_im_storage_pair_t)
    let () = seal t
  end
  
  module Vector_ImDrawChannel = struct
    type t = vector_im_draw_channel_t structure
    let t : t typ = structure "ImVector_ImDrawChannel"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ draw_channel_t))
    let () = seal t
  end
  
  module DrawList = struct
    type t = draw_list_t structure
    let t : t typ = structure "ImDrawList"
    let cmd_buffer = field t "CmdBuffer" (lift_typ vector_im_draw_cmd_t)
    let idx_buffer = field t "IdxBuffer" (lift_typ vector_im_draw_idx_t)
    let vtx_buffer = field t "VtxBuffer" (lift_typ vector_im_draw_vert_t)
    let flags = field t "Flags" (lift_typ draw_list_flags_t)
    let vtx_current_idx = field t "_VtxCurrentIdx" (lift_typ int_as_uint)
    let data = field t "_Data" (ptr (lift_typ draw_list_shared_data_t))
    let vtx_write_ptr = field t "_VtxWritePtr" (ptr (lift_typ draw_vert_t))
    let idx_write_ptr = field t "_IdxWritePtr" (ptr (lift_typ draw_idx_t))
    let path = field t "_Path" (lift_typ vector_im_vec2_t)
    let cmd_header = field t "_CmdHeader" (lift_typ draw_cmd_header_t)
    let splitter = field t "_Splitter" (lift_typ draw_list_splitter_t)
    let clip_rect_stack = field t "_ClipRectStack" (lift_typ vector_im_vec4_t)
    let texture_id_stack =
      field t "_TextureIdStack" (lift_typ vector_im_texture_id_t)
    let fringe_scale = field t "_FringeScale" float
    let owner_name = field t "_OwnerName" string
    let () = seal t
  end
  
  module Vector_ImFontPtr = struct
    type t = vector_im_font_ptr_t structure
    let t : t typ = structure "ImVector_ImFontPtr"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (ptr (lift_typ font_t)))
    let () = seal t
  end
  
  module Vector_float = struct
    type t = vector_float_t structure
    let t : t typ = structure "ImVector_float"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr float)
    let () = seal t
  end
  
  module Font = struct
    type t = font_t structure
    let t : t typ = structure "ImFont"
    let index_advance_x = field t "IndexAdvanceX" (lift_typ vector_float_t)
    let fallback_advance_x = field t "FallbackAdvanceX" float
    let font_size = field t "FontSize" float
    let index_lookup = field t "IndexLookup" (lift_typ vector_im_wchar_t)
    let glyphs = field t "Glyphs" (lift_typ vector_im_font_glyph_t)
    let fallback_glyph = field t "FallbackGlyph" (ptr (lift_typ font_glyph_t))
    let container_atlas =
      field t "ContainerAtlas" (ptr (lift_typ font_atlas_t))
    let config_data = field t "ConfigData" (ptr (lift_typ font_config_t))
    let config_data_count = field t "ConfigDataCount" short
    let fallback_char = field t "FallbackChar" (lift_typ wchar_t)
    let ellipsis_char = field t "EllipsisChar" (lift_typ wchar_t)
    let ellipsis_char_count = field t "EllipsisCharCount" short
    let ellipsis_width = field t "EllipsisWidth" float
    let ellipsis_char_step = field t "EllipsisCharStep" float
    let dirty_lookup_tables = field t "DirtyLookupTables" bool
    let scale = field t "Scale" float
    let ascent = field t "Ascent" float
    let descent = field t "Descent" float
    let metrics_total_surface = field t "MetricsTotalSurface" int
    let used4k_pages_map = field t "Used4kPagesMap" (array (2) (lift_typ u8_t))
    let () = seal t
  end
  
  module PlatformIo = struct
    type t = platform_io_t structure
    let t : t typ = structure "ImGuiPlatformIO"
    let platform_create_window =
      field t "Platform_CreateWindow"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning void)))
    let platform_destroy_window =
      field t "Platform_DestroyWindow"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning void)))
    let platform_show_window =
      field t "Platform_ShowWindow"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning void)))
    let platform_set_window_pos =
      field t "Platform_SetWindowPos"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> (lift_typ Vec2.t)
              @-> returning void)))
    let platform_get_window_pos =
      field t "Platform_GetWindowPos"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> returning (lift_typ Vec2.t))))
    let platform_set_window_size =
      field t "Platform_SetWindowSize"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> (lift_typ Vec2.t)
              @-> returning void)))
    let platform_get_window_size =
      field t "Platform_GetWindowSize"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> returning (lift_typ Vec2.t))))
    let platform_set_window_focus =
      field t "Platform_SetWindowFocus"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning void)))
    let platform_get_window_focus =
      field t "Platform_GetWindowFocus"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning bool)))
    let platform_get_window_minimized =
      field t "Platform_GetWindowMinimized"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning bool)))
    let platform_set_window_title =
      field t "Platform_SetWindowTitle"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> string @-> returning void)))
    let platform_set_window_alpha =
      field t "Platform_SetWindowAlpha"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> float @-> returning void)))
    let platform_update_window =
      field t "Platform_UpdateWindow"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning void)))
    let platform_render_window =
      field t "Platform_RenderWindow"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> (ptr void) @-> returning void)))
    let platform_swap_buffers =
      field t "Platform_SwapBuffers"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> (ptr void) @-> returning void)))
    let platform_get_window_dpi_scale =
      field t "Platform_GetWindowDpiScale"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning float)))
    let platform_on_changed_viewport =
      field t "Platform_OnChangedViewport"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning void)))
    let platform_create_vk_surface =
      field t "Platform_CreateVkSurface"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> (lift_typ u64_t) @-> (ptr void)
              @-> (ptr (lift_typ u64_t)) @-> returning int)))
    let renderer_create_window =
      field t "Renderer_CreateWindow"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning void)))
    let renderer_destroy_window =
      field t "Renderer_DestroyWindow"
        (lift_typ
          (Foreign.funptr ((ptr (lift_typ viewport_t)) @-> returning void)))
    let renderer_set_window_size =
      field t "Renderer_SetWindowSize"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> (lift_typ Vec2.t)
              @-> returning void)))
    let renderer_render_window =
      field t "Renderer_RenderWindow"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> (ptr void) @-> returning void)))
    let renderer_swap_buffers =
      field t "Renderer_SwapBuffers"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ viewport_t)) @-> (ptr void) @-> returning void)))
    let monitors = field t "Monitors" (lift_typ vector_im_platform_monitor_t)
    let viewports = field t "Viewports" (lift_typ vector_im_viewport_ptr_t)
    let () = seal t
  end
  
  module PlatformMonitor = struct
    type t = platform_monitor_t structure
    let t : t typ = structure "ImGuiPlatformMonitor"
    let main_pos = field t "MainPos" (lift_typ Vec2.t)
    let main_size = field t "MainSize" (lift_typ Vec2.t)
    let work_pos = field t "WorkPos" (lift_typ Vec2.t)
    let work_size = field t "WorkSize" (lift_typ Vec2.t)
    let dpi_scale = field t "DpiScale" float
    let platform_handle = field t "PlatformHandle" (ptr void)
    let () = seal t
  end
  
  module PlatformImeData = struct
    type t = platform_ime_data_t structure
    let t : t typ = structure "ImGuiPlatformImeData"
    let want_visible = field t "WantVisible" bool
    let input_pos = field t "InputPos" (lift_typ Vec2.t)
    let input_line_height = field t "InputLineHeight" float
    let () = seal t
  end
  
  module Rect = struct
    type t = rect_t structure
    let t : t typ = structure "ImRect"
    let min = field t "Min" (lift_typ Vec2.t)
    let max = field t "Max" (lift_typ Vec2.t)
    let () = seal t
  end
  
  module TextIndex = struct
    type t = text_index_t structure
    let t : t typ = structure "ImGuiTextIndex"
    let line_offsets = field t "LineOffsets" (lift_typ vector_int_t)
    let end_offset = field t "EndOffset" int
    let () = seal t
  end
  
  module DrawListSharedData = struct
    type t = draw_list_shared_data_t structure
    let t : t typ = structure "ImDrawListSharedData"
    let tex_uv_white_pixel = field t "TexUvWhitePixel" (lift_typ Vec2.t)
    let font = field t "Font" (ptr (lift_typ font_t))
    let font_size = field t "FontSize" float
    let curve_tessellation_tol = field t "CurveTessellationTol" float
    let circle_segment_max_error = field t "CircleSegmentMaxError" float
    let clip_rect_fullscreen = field t "ClipRectFullscreen" (lift_typ Vec4.t)
    let initial_flags = field t "InitialFlags" (lift_typ draw_list_flags_t)
    let temp_buffer = field t "TempBuffer" (lift_typ vector_im_vec2_t)
    let arc_fast_vtx = field t "ArcFastVtx" (array (48) (lift_typ Vec2.t))
    let arc_fast_radius_cutoff = field t "ArcFastRadiusCutoff" float
    let circle_segment_counts =
      field t "CircleSegmentCounts" (array (64) (lift_typ u8_t))
    let tex_uv_lines = field t "TexUvLines" (ptr (lift_typ Vec4.t))
    let () = seal t
  end
  
  module ComboPreviewData = struct
    type t = combo_preview_data_t structure
    let t : t typ = structure "ImGuiComboPreviewData"
    let preview_rect = field t "PreviewRect" (lift_typ rect_t)
    let backup_cursor_pos = field t "BackupCursorPos" (lift_typ Vec2.t)
    let backup_cursor_max_pos = field t "BackupCursorMaxPos" (lift_typ Vec2.t)
    let backup_cursor_pos_prev_line =
      field t "BackupCursorPosPrevLine" (lift_typ Vec2.t)
    let backup_prev_line_text_base_offset =
      field t "BackupPrevLineTextBaseOffset" float
    let backup_layout = field t "BackupLayout" (lift_typ layout_type_t)
    let () = seal t
  end
  
  module InputTextDeactivatedState = struct
    type t = input_text_deactivated_state_t structure
    let t : t typ = structure "ImGuiInputTextDeactivatedState"
    let id = field t "ID" (lift_typ id_t)
    let text_a = field t "TextA" (lift_typ vector_char_t)
    let () = seal t
  end
  
  module InputTextState = struct
    type t = input_text_state_t structure
    let t : t typ = structure "ImGuiInputTextState"
    let ctx = field t "Ctx" (ptr (lift_typ context_t))
    let id = field t "ID" (lift_typ id_t)
    let cur_len_w = field t "CurLenW" int
    let cur_len_a = field t "CurLenA" int
    let text_w = field t "TextW" (lift_typ vector_im_wchar_t)
    let text_a = field t "TextA" (lift_typ vector_char_t)
    let initial_text_a = field t "InitialTextA" (lift_typ vector_char_t)
    let text_a_is_valid = field t "TextAIsValid" bool
    let buf_capacity_a = field t "BufCapacityA" int
    let scroll_x = field t "ScrollX" float
    let stb = field t "Stb" (lift_typ stb_textedit_state_t)
    let cursor_anim = field t "CursorAnim" float
    let cursor_follow = field t "CursorFollow" bool
    let selected_all_mouse_lock = field t "SelectedAllMouseLock" bool
    let edited = field t "Edited" bool
    let flags = field t "Flags" (lift_typ input_text_flags_t)
    let reload_user_buf = field t "ReloadUserBuf" bool
    let reload_selection_start = field t "ReloadSelectionStart" int
    let reload_selection_end = field t "ReloadSelectionEnd" int
    let () = seal t
  end
  
  module NextWindowData = struct
    type t = next_window_data_t structure
    let t : t typ = structure "ImGuiNextWindowData"
    let flags = field t "Flags" (lift_typ next_window_data_flags_t)
    let pos_cond = field t "PosCond" (lift_typ cond_t)
    let size_cond = field t "SizeCond" (lift_typ cond_t)
    let collapsed_cond = field t "CollapsedCond" (lift_typ cond_t)
    let dock_cond = field t "DockCond" (lift_typ cond_t)
    let pos_val = field t "PosVal" (lift_typ Vec2.t)
    let pos_pivot_val = field t "PosPivotVal" (lift_typ Vec2.t)
    let size_val = field t "SizeVal" (lift_typ Vec2.t)
    let content_size_val = field t "ContentSizeVal" (lift_typ Vec2.t)
    let scroll_val = field t "ScrollVal" (lift_typ Vec2.t)
    let child_flags = field t "ChildFlags" (lift_typ child_flags_t)
    let pos_undock = field t "PosUndock" bool
    let collapsed_val = field t "CollapsedVal" bool
    let size_constraint_rect = field t "SizeConstraintRect" (lift_typ rect_t)
    let size_callback =
      field t "SizeCallback"
        (lift_typ
          (Foreign.funptr
            ((ptr (lift_typ size_callback_data_t)) @-> returning void)))
    let size_callback_user_data = field t "SizeCallbackUserData" (ptr void)
    let bg_alpha_val = field t "BgAlphaVal" float
    let viewport_id = field t "ViewportId" (lift_typ id_t)
    let dock_id = field t "DockId" (lift_typ id_t)
    let window_class = field t "WindowClass" (lift_typ window_class_t)
    let menu_bar_offset_min_val =
      field t "MenuBarOffsetMinVal" (lift_typ Vec2.t)
    let refresh_flags_val =
      field t "RefreshFlagsVal" (lift_typ window_refresh_flags_t)
    let () = seal t
  end
  
  module LastItemData = struct
    type t = last_item_data_t structure
    let t : t typ = structure "ImGuiLastItemData"
    let id = field t "ID" (lift_typ id_t)
    let in_flags = field t "InFlags" (lift_typ item_flags_t)
    let status_flags = field t "StatusFlags" (lift_typ item_status_flags_t)
    let rect = field t "Rect" (lift_typ rect_t)
    let nav_rect = field t "NavRect" (lift_typ rect_t)
    let display_rect = field t "DisplayRect" (lift_typ rect_t)
    let clip_rect = field t "ClipRect" (lift_typ rect_t)
    let () = seal t
  end
  
  module BitArray_ImKey_NamedKey_count__lessImKey_NamedKey_Begin = struct
    type t = bit_array_im_key_named_key_count__less_im_key_named_key_begin_t
    structure
    let t : t typ = structure
    "ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN"
    let storage = field t "Storage" (array (185 >> 5) (lift_typ u32_t))
    let () = seal t
  end
  
  module KeyRoutingTable = struct
    type t = key_routing_table_t structure
    let t : t typ = structure "ImGuiKeyRoutingTable"
    let index = field t "Index" (array (154) (lift_typ key_routing_index_t))
    let entries = field t "Entries" (lift_typ vector_im_key_routing_data_t)
    let entries_next =
      field t "EntriesNext" (lift_typ vector_im_key_routing_data_t)
    let () = seal t
  end
  
  module KeyOwnerData = struct
    type t = key_owner_data_t structure
    let t : t typ = structure "ImGuiKeyOwnerData"
    let owner_curr = field t "OwnerCurr" (lift_typ id_t)
    let owner_next = field t "OwnerNext" (lift_typ id_t)
    let lock_this_frame = field t "LockThisFrame" bool
    let lock_until_release = field t "LockUntilRelease" bool
    let () = seal t
  end
  
  module NavItemData = struct
    type t = nav_item_data_t structure
    let t : t typ = structure "ImGuiNavItemData"
    let window = field t "Window" (ptr (lift_typ window_t))
    let id = field t "ID" (lift_typ id_t)
    let focus_scope_id = field t "FocusScopeId" (lift_typ id_t)
    let rect_rel = field t "RectRel" (lift_typ rect_t)
    let in_flags = field t "InFlags" (lift_typ item_flags_t)
    let dist_box = field t "DistBox" float
    let dist_center = field t "DistCenter" float
    let dist_axial = field t "DistAxial" float
    let selection_user_data =
      field t "SelectionUserData" (lift_typ selection_user_data_t)
    let () = seal t
  end
  
  module TypingSelectState = struct
    type t = typing_select_state_t structure
    let t : t typ = structure "ImGuiTypingSelectState"
    let request = field t "Request" (lift_typ typing_select_request_t)
    let search_buffer = field t "SearchBuffer" (array (64) char)
    let focus_scope = field t "FocusScope" (lift_typ id_t)
    let last_request_frame = field t "LastRequestFrame" int
    let last_request_time = field t "LastRequestTime" float
    let single_char_mode_lock = field t "SingleCharModeLock" bool
    let () = seal t
  end
  
  module Vector_ImWindowPtr = struct
    type t = vector_im_window_ptr_t structure
    let t : t typ = structure "ImVector_ImGuiWindowPtr"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (ptr (lift_typ window_t)))
    let () = seal t
  end
  
  module WindowDockStyle = struct
    type t = window_dock_style_t structure
    let t : t typ = structure "ImGuiWindowDockStyle"
    let colors = field t "Colors" (array (6) (lift_typ u32_t))
    let () = seal t
  end
  
  module DockContext = struct
    type t = dock_context_t structure
    let t : t typ = structure "ImGuiDockContext"
    let nodes = field t "Nodes" (lift_typ storage_t)
    let requests = field t "Requests" (lift_typ vector_im_dock_request_t)
    let nodes_settings =
      field t "NodesSettings" (lift_typ vector_im_dock_node_settings_t)
    let want_full_rebuild = field t "WantFullRebuild" bool
    let () = seal t
  end
  
  module DebugAllocInfo = struct
    type t = debug_alloc_info_t structure
    let t : t typ = structure "ImGuiDebugAllocInfo"
    let total_alloc_count = field t "TotalAllocCount" int
    let total_free_count = field t "TotalFreeCount" int
    let last_entries_idx = field t "LastEntriesIdx" (lift_typ s16_t)
    let last_entries_buf =
      field t "LastEntriesBuf" (array (6) (lift_typ debug_alloc_entry_t))
    let () = seal t
  end
  
  module MetricsConfig = struct
    type t = metrics_config_t structure
    let t : t typ = structure "ImGuiMetricsConfig"
    let show_debug_log = field t "ShowDebugLog" bool
    let show_id_stack_tool = field t "ShowIDStackTool" bool
    let show_windows_rects = field t "ShowWindowsRects" bool
    let show_windows_begin_order = field t "ShowWindowsBeginOrder" bool
    let show_tables_rects = field t "ShowTablesRects" bool
    let show_draw_cmd_mesh = field t "ShowDrawCmdMesh" bool
    let show_draw_cmd_bounding_boxes = field t "ShowDrawCmdBoundingBoxes" bool
    let show_text_encoding_viewer = field t "ShowTextEncodingViewer" bool
    let show_atlas_tinted_with_text_color =
      field t "ShowAtlasTintedWithTextColor" bool
    let show_docking_nodes = field t "ShowDockingNodes" bool
    let show_windows_rects_type = field t "ShowWindowsRectsType" int
    let show_tables_rects_type = field t "ShowTablesRectsType" int
    let highlight_monitor_idx = field t "HighlightMonitorIdx" int
    let highlight_viewport_id = field t "HighlightViewportID" (lift_typ id_t)
    let () = seal t
  end
  
  module IdStackTool = struct
    type t = id_stack_tool_t structure
    let t : t typ = structure "ImGuiIDStackTool"
    let last_active_frame = field t "LastActiveFrame" int
    let stack_level = field t "StackLevel" int
    let query_id = field t "QueryId" (lift_typ id_t)
    let results = field t "Results" (lift_typ vector_im_stack_level_info_t)
    let copy_to_clipboard_on_ctrl_c = field t "CopyToClipboardOnCtrlC" bool
    let copy_to_clipboard_last_time = field t "CopyToClipboardLastTime" float
    let () = seal t
  end
  
  module Vector_ImInputEvent = struct
    type t = vector_im_input_event_t structure
    let t : t typ = structure "ImVector_ImGuiInputEvent"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ input_event_t))
    let () = seal t
  end
  
  module Vector_ImWindowStackData = struct
    type t = vector_im_window_stack_data_t structure
    let t : t typ = structure "ImVector_ImGuiWindowStackData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ window_stack_data_t))
    let () = seal t
  end
  
  module Vector_ImColorMod = struct
    type t = vector_im_color_mod_t structure
    let t : t typ = structure "ImVector_ImGuiColorMod"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ color_mod_t))
    let () = seal t
  end
  
  module Vector_ImStyleMod = struct
    type t = vector_im_style_mod_t structure
    let t : t typ = structure "ImVector_ImGuiStyleMod"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ style_mod_t))
    let () = seal t
  end
  
  module Vector_ImFocusScopeData = struct
    type t = vector_im_focus_scope_data_t structure
    let t : t typ = structure "ImVector_ImGuiFocusScopeData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ focus_scope_data_t))
    let () = seal t
  end
  
  module Vector_ImItemFlags = struct
    type t = vector_im_item_flags_t structure
    let t : t typ = structure "ImVector_ImGuiItemFlags"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ item_flags_t))
    let () = seal t
  end
  
  module Vector_ImGroupData = struct
    type t = vector_im_group_data_t structure
    let t : t typ = structure "ImVector_ImGuiGroupData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ group_data_t))
    let () = seal t
  end
  
  module Vector_ImPopupData = struct
    type t = vector_im_popup_data_t structure
    let t : t typ = structure "ImVector_ImGuiPopupData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ popup_data_t))
    let () = seal t
  end
  
  module Vector_ImNavTreeNodeData = struct
    type t = vector_im_nav_tree_node_data_t structure
    let t : t typ = structure "ImVector_ImGuiNavTreeNodeData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ nav_tree_node_data_t))
    let () = seal t
  end
  
  module Vector_ImViewportPPtr = struct
    type t = vector_im_viewport_p_ptr_t structure
    let t : t typ = structure "ImVector_ImGuiViewportPPtr"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (ptr (lift_typ viewport_p_t)))
    let () = seal t
  end
  
  module Vector_unsigned_char = struct
    type t = vector_unsigned_char_t structure
    let t : t typ = structure "ImVector_unsigned_char"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ int_as_uchar))
    let () = seal t
  end
  
  module Vector_ImListClipperData = struct
    type t = vector_im_list_clipper_data_t structure
    let t : t typ = structure "ImVector_ImGuiListClipperData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ list_clipper_data_t))
    let () = seal t
  end
  
  module Vector_ImTableTempData = struct
    type t = vector_im_table_temp_data_t structure
    let t : t typ = structure "ImVector_ImGuiTableTempData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ table_temp_data_t))
    let () = seal t
  end
  
  module Pool_ImTable = struct
    type t = pool_im_table_t structure
    let t : t typ = structure "ImPool_ImGuiTable"
    let buf = field t "Buf" (lift_typ vector_im_table_t)
    let map = field t "Map" (lift_typ storage_t)
    let free_idx = field t "FreeIdx" (lift_typ pool_idx_t)
    let alive_count = field t "AliveCount" (lift_typ pool_idx_t)
    let () = seal t
  end
  
  module Pool_ImTabBar = struct
    type t = pool_im_tab_bar_t structure
    let t : t typ = structure "ImPool_ImGuiTabBar"
    let buf = field t "Buf" (lift_typ vector_im_tab_bar_t)
    let map = field t "Map" (lift_typ storage_t)
    let free_idx = field t "FreeIdx" (lift_typ pool_idx_t)
    let alive_count = field t "AliveCount" (lift_typ pool_idx_t)
    let () = seal t
  end
  
  module Vector_ImPtrOrIndex = struct
    type t = vector_im_ptr_or_index_t structure
    let t : t typ = structure "ImVector_ImGuiPtrOrIndex"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ ptr_or_index_t))
    let () = seal t
  end
  
  module Vector_ImShrinkWidthItem = struct
    type t = vector_im_shrink_width_item_t structure
    let t : t typ = structure "ImVector_ImGuiShrinkWidthItem"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ shrink_width_item_t))
    let () = seal t
  end
  
  module Vector_ImId = struct
    type t = vector_im_id_t structure
    let t : t typ = structure "ImVector_ImGuiID"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ id_t))
    let () = seal t
  end
  
  module Vector_ImSettingsHandler = struct
    type t = vector_im_settings_handler_t structure
    let t : t typ = structure "ImVector_ImGuiSettingsHandler"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ settings_handler_t))
    let () = seal t
  end
  
  module ChunkStream_ImWindowSettings = struct
    type t = chunk_stream_im_window_settings_t structure
    let t : t typ = structure "ImChunkStream_ImGuiWindowSettings"
    let buf = field t "Buf" (lift_typ vector_char_t)
    let () = seal t
  end
  
  module ChunkStream_ImTableSettings = struct
    type t = chunk_stream_im_table_settings_t structure
    let t : t typ = structure "ImChunkStream_ImGuiTableSettings"
    let buf = field t "Buf" (lift_typ vector_char_t)
    let () = seal t
  end
  
  module Vector_ImContextHook = struct
    type t = vector_im_context_hook_t structure
    let t : t typ = structure "ImVector_ImGuiContextHook"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ context_hook_t))
    let () = seal t
  end
  
  module WindowTempData = struct
    type t = window_temp_data_t structure
    let t : t typ = structure "ImGuiWindowTempData"
    let cursor_pos = field t "CursorPos" (lift_typ Vec2.t)
    let cursor_pos_prev_line = field t "CursorPosPrevLine" (lift_typ Vec2.t)
    let cursor_start_pos = field t "CursorStartPos" (lift_typ Vec2.t)
    let cursor_max_pos = field t "CursorMaxPos" (lift_typ Vec2.t)
    let ideal_max_pos = field t "IdealMaxPos" (lift_typ Vec2.t)
    let curr_line_size = field t "CurrLineSize" (lift_typ Vec2.t)
    let prev_line_size = field t "PrevLineSize" (lift_typ Vec2.t)
    let curr_line_text_base_offset = field t "CurrLineTextBaseOffset" float
    let prev_line_text_base_offset = field t "PrevLineTextBaseOffset" float
    let is_same_line = field t "IsSameLine" bool
    let is_set_pos = field t "IsSetPos" bool
    let indent = field t "Indent" (lift_typ vec1_t)
    let columns_offset = field t "ColumnsOffset" (lift_typ vec1_t)
    let group_offset = field t "GroupOffset" (lift_typ vec1_t)
    let cursor_start_pos_lossyness =
      field t "CursorStartPosLossyness" (lift_typ Vec2.t)
    let nav_layer_current = field t "NavLayerCurrent" (lift_typ NavLayer.t)
    let nav_layers_active_mask = field t "NavLayersActiveMask" short
    let nav_layers_active_mask_next = field t "NavLayersActiveMaskNext" short
    let nav_is_scroll_pushable_x = field t "NavIsScrollPushableX" bool
    let nav_hide_highlight_one_frame = field t "NavHideHighlightOneFrame" bool
    let nav_window_has_scroll_y = field t "NavWindowHasScrollY" bool
    let menu_bar_appending = field t "MenuBarAppending" bool
    let menu_bar_offset = field t "MenuBarOffset" (lift_typ Vec2.t)
    let menu_columns = field t "MenuColumns" (lift_typ menu_columns_t)
    let tree_depth = field t "TreeDepth" int
    let tree_jump_to_parent_on_pop_mask =
      field t "TreeJumpToParentOnPopMask" (lift_typ u32_t)
    let child_windows =
      field t "ChildWindows" (lift_typ vector_im_window_ptr_t)
    let state_storage = field t "StateStorage" (ptr (lift_typ storage_t))
    let current_columns =
      field t "CurrentColumns" (ptr (lift_typ old_columns_t))
    let current_table_idx = field t "CurrentTableIdx" int
    let layout_type = field t "LayoutType" (lift_typ layout_type_t)
    let parent_layout_type =
      field t "ParentLayoutType" (lift_typ layout_type_t)
    let modal_dim_bg_color = field t "ModalDimBgColor" (lift_typ u32_t)
    let item_width = field t "ItemWidth" float
    let text_wrap_pos = field t "TextWrapPos" float
    let item_width_stack = field t "ItemWidthStack" (lift_typ vector_float_t)
    let text_wrap_pos_stack =
      field t "TextWrapPosStack" (lift_typ vector_float_t)
    let () = seal t
  end
  
  module Vector_ImOldColumns = struct
    type t = vector_im_old_columns_t structure
    let t : t typ = structure "ImVector_ImGuiOldColumns"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ old_columns_t))
    let () = seal t
  end
  
  module TableInstanceData = struct
    type t = table_instance_data_t structure
    let t : t typ = structure "ImGuiTableInstanceData"
    let table_instance_id = field t "TableInstanceID" (lift_typ id_t)
    let last_outer_height = field t "LastOuterHeight" float
    let last_top_headers_row_height = field t "LastTopHeadersRowHeight" float
    let last_frozen_height = field t "LastFrozenHeight" float
    let hovered_row_last = field t "HoveredRowLast" int
    let hovered_row_next = field t "HoveredRowNext" int
    let () = seal t
  end
  
  module Span_ImTableColumn = struct
    type t = span_im_table_column_t structure
    let t : t typ = structure "ImSpan_ImGuiTableColumn"
    let data = field t "Data" (ptr (lift_typ table_column_t))
    let data_end = field t "DataEnd" (ptr (lift_typ table_column_t))
    let () = seal t
  end
  
  module Span_ImTableColumnIdx = struct
    type t = span_im_table_column_idx_t structure
    let t : t typ = structure "ImSpan_ImGuiTableColumnIdx"
    let data = field t "Data" (ptr (lift_typ table_column_idx_t))
    let data_end = field t "DataEnd" (ptr (lift_typ table_column_idx_t))
    let () = seal t
  end
  
  module Span_ImTableCellData = struct
    type t = span_im_table_cell_data_t structure
    let t : t typ = structure "ImSpan_ImGuiTableCellData"
    let data = field t "Data" (ptr (lift_typ table_cell_data_t))
    let data_end = field t "DataEnd" (ptr (lift_typ table_cell_data_t))
    let () = seal t
  end
  
  module Vector_ImTableInstanceData = struct
    type t = vector_im_table_instance_data_t structure
    let t : t typ = structure "ImVector_ImGuiTableInstanceData"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ table_instance_data_t))
    let () = seal t
  end
  
  module Vector_ImTableColumnSortSpecs = struct
    type t = vector_im_table_column_sort_specs_t structure
    let t : t typ = structure "ImVector_ImGuiTableColumnSortSpecs"
    let size = field t "Size" int
    let capacity = field t "Capacity" int
    let data = field t "Data" (ptr (lift_typ table_column_sort_specs_t))
    let () = seal t
  end
  
  
end
