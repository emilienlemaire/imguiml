(* This file was generated by imguiml_generator.exe on 26/04/2024 *)

module Enums (S : Ctypes.TYPE) = struct
  open S
  module WindowFlags = struct
    type t =
    | None
    | NoTitleBar
    | NoResize
    | NoMove
    | NoScrollbar
    | NoScrollWithMouse
    | NoCollapse
    | AlwaysAutoResize
    | NoBackground
    | NoSavedSettings
    | NoMouseInputs
    | MenuBar
    | HorizontalScrollbar
    | NoFocusOnAppearing
    | NoBringToFrontOnFocus
    | AlwaysVerticalScrollbar
    | AlwaysHorizontalScrollbar
    | NoNavInputs
    | NoNavFocus
    | UnsavedDocument
    | NoDocking
    | NoNav
    | NoDecoration
    | NoInputs
    | NavFlattened
    | ChildWindow
    | Tooltip
    | Popup
    | Modal
    | ChildMenu
    | DockNodeHost
    
    let none = constant "ImGuiWindowFlags_None" int64_t
    let no_title_bar = constant "ImGuiWindowFlags_NoTitleBar" int64_t
    let no_resize = constant "ImGuiWindowFlags_NoResize" int64_t
    let no_move = constant "ImGuiWindowFlags_NoMove" int64_t
    let no_scrollbar = constant "ImGuiWindowFlags_NoScrollbar" int64_t
    let no_scroll_with_mouse =
      constant "ImGuiWindowFlags_NoScrollWithMouse" int64_t
    let no_collapse = constant "ImGuiWindowFlags_NoCollapse" int64_t
    let always_auto_resize =
      constant "ImGuiWindowFlags_AlwaysAutoResize" int64_t
    let no_background = constant "ImGuiWindowFlags_NoBackground" int64_t
    let no_saved_settings = constant "ImGuiWindowFlags_NoSavedSettings" int64_t
    let no_mouse_inputs = constant "ImGuiWindowFlags_NoMouseInputs" int64_t
    let menu_bar = constant "ImGuiWindowFlags_MenuBar" int64_t
    let horizontal_scrollbar =
      constant "ImGuiWindowFlags_HorizontalScrollbar" int64_t
    let no_focus_on_appearing =
      constant "ImGuiWindowFlags_NoFocusOnAppearing" int64_t
    let no_bring_to_front_on_focus =
      constant "ImGuiWindowFlags_NoBringToFrontOnFocus" int64_t
    let always_vertical_scrollbar =
      constant "ImGuiWindowFlags_AlwaysVerticalScrollbar" int64_t
    let always_horizontal_scrollbar =
      constant "ImGuiWindowFlags_AlwaysHorizontalScrollbar" int64_t
    let no_nav_inputs = constant "ImGuiWindowFlags_NoNavInputs" int64_t
    let no_nav_focus = constant "ImGuiWindowFlags_NoNavFocus" int64_t
    let unsaved_document = constant "ImGuiWindowFlags_UnsavedDocument" int64_t
    let no_docking = constant "ImGuiWindowFlags_NoDocking" int64_t
    let no_nav = constant "ImGuiWindowFlags_NoNav" int64_t
    let no_decoration = constant "ImGuiWindowFlags_NoDecoration" int64_t
    let no_inputs = constant "ImGuiWindowFlags_NoInputs" int64_t
    let nav_flattened = constant "ImGuiWindowFlags_NavFlattened" int64_t
    let child_window = constant "ImGuiWindowFlags_ChildWindow" int64_t
    let tooltip = constant "ImGuiWindowFlags_Tooltip" int64_t
    let popup = constant "ImGuiWindowFlags_Popup" int64_t
    let modal = constant "ImGuiWindowFlags_Modal" int64_t
    let child_menu = constant "ImGuiWindowFlags_ChildMenu" int64_t
    let dock_node_host = constant "ImGuiWindowFlags_DockNodeHost" int64_t
    
    let t : t typ =
      enum "ImGuiWindowFlags_" ~typedef:true
        [(None, none);
         (NoTitleBar, no_title_bar);
         (NoResize, no_resize);
         (NoMove, no_move);
         (NoScrollbar, no_scrollbar);
         (NoScrollWithMouse, no_scroll_with_mouse);
         (NoCollapse, no_collapse);
         (AlwaysAutoResize, always_auto_resize);
         (NoBackground, no_background);
         (NoSavedSettings, no_saved_settings);
         (NoMouseInputs, no_mouse_inputs);
         (MenuBar, menu_bar);
         (HorizontalScrollbar, horizontal_scrollbar);
         (NoFocusOnAppearing, no_focus_on_appearing);
         (NoBringToFrontOnFocus, no_bring_to_front_on_focus);
         (AlwaysVerticalScrollbar, always_vertical_scrollbar);
         (AlwaysHorizontalScrollbar, always_horizontal_scrollbar);
         (NoNavInputs, no_nav_inputs);
         (NoNavFocus, no_nav_focus);
         (UnsavedDocument, unsaved_document);
         (NoDocking, no_docking);
         (NoNav, no_nav);
         (NoDecoration, no_decoration);
         (NoInputs, no_inputs);
         (NavFlattened, nav_flattened);
         (ChildWindow, child_window);
         (Tooltip, tooltip);
         (Popup, popup);
         (Modal, modal);
         (ChildMenu, child_menu);
         (DockNodeHost, dock_node_host)]
     
  end
  module ChildFlags = struct
    type t =
    | None
    | Border
    | AlwaysUseWindowPadding
    | ResizeX
    | ResizeY
    | AutoResizeX
    | AutoResizeY
    | AlwaysAutoResize
    | FrameStyle
    
    let none = constant "ImGuiChildFlags_None" int64_t
    let border = constant "ImGuiChildFlags_Border" int64_t
    let always_use_window_padding =
      constant "ImGuiChildFlags_AlwaysUseWindowPadding" int64_t
    let resize_x = constant "ImGuiChildFlags_ResizeX" int64_t
    let resize_y = constant "ImGuiChildFlags_ResizeY" int64_t
    let auto_resize_x = constant "ImGuiChildFlags_AutoResizeX" int64_t
    let auto_resize_y = constant "ImGuiChildFlags_AutoResizeY" int64_t
    let always_auto_resize =
      constant "ImGuiChildFlags_AlwaysAutoResize" int64_t
    let frame_style = constant "ImGuiChildFlags_FrameStyle" int64_t
    
    let t : t typ =
      enum "ImGuiChildFlags_" ~typedef:true
        [(None, none);
         (Border, border);
         (AlwaysUseWindowPadding, always_use_window_padding);
         (ResizeX, resize_x);
         (ResizeY, resize_y);
         (AutoResizeX, auto_resize_x);
         (AutoResizeY, auto_resize_y);
         (AlwaysAutoResize, always_auto_resize);
         (FrameStyle, frame_style)]
     
  end
  module InputTextFlags = struct
    type t =
    | None
    | CharsDecimal
    | CharsHexadecimal
    | CharsUppercase
    | CharsNoBlank
    | AutoSelectAll
    | EnterReturnsTrue
    | CallbackCompletion
    | CallbackHistory
    | CallbackAlways
    | CallbackCharFilter
    | AllowTabInput
    | CtrlEnterForNewLine
    | NoHorizontalScroll
    | AlwaysOverwrite
    | ReadOnly
    | Password
    | NoUndoRedo
    | CharsScientific
    | CallbackResize
    | CallbackEdit
    | EscapeClearsAll
    
    let none = constant "ImGuiInputTextFlags_None" int64_t
    let chars_decimal = constant "ImGuiInputTextFlags_CharsDecimal" int64_t
    let chars_hexadecimal =
      constant "ImGuiInputTextFlags_CharsHexadecimal" int64_t
    let chars_uppercase = constant "ImGuiInputTextFlags_CharsUppercase" int64_t
    let chars_no_blank = constant "ImGuiInputTextFlags_CharsNoBlank" int64_t
    let auto_select_all = constant "ImGuiInputTextFlags_AutoSelectAll" int64_t
    let enter_returns_true =
      constant "ImGuiInputTextFlags_EnterReturnsTrue" int64_t
    let callback_completion =
      constant "ImGuiInputTextFlags_CallbackCompletion" int64_t
    let callback_history =
      constant "ImGuiInputTextFlags_CallbackHistory" int64_t
    let callback_always = constant "ImGuiInputTextFlags_CallbackAlways" int64_t
    let callback_char_filter =
      constant "ImGuiInputTextFlags_CallbackCharFilter" int64_t
    let allow_tab_input = constant "ImGuiInputTextFlags_AllowTabInput" int64_t
    let ctrl_enter_for_new_line =
      constant "ImGuiInputTextFlags_CtrlEnterForNewLine" int64_t
    let no_horizontal_scroll =
      constant "ImGuiInputTextFlags_NoHorizontalScroll" int64_t
    let always_overwrite =
      constant "ImGuiInputTextFlags_AlwaysOverwrite" int64_t
    let read_only = constant "ImGuiInputTextFlags_ReadOnly" int64_t
    let password = constant "ImGuiInputTextFlags_Password" int64_t
    let no_undo_redo = constant "ImGuiInputTextFlags_NoUndoRedo" int64_t
    let chars_scientific =
      constant "ImGuiInputTextFlags_CharsScientific" int64_t
    let callback_resize = constant "ImGuiInputTextFlags_CallbackResize" int64_t
    let callback_edit = constant "ImGuiInputTextFlags_CallbackEdit" int64_t
    let escape_clears_all =
      constant "ImGuiInputTextFlags_EscapeClearsAll" int64_t
    
    let t : t typ =
      enum "ImGuiInputTextFlags_" ~typedef:true
        [(None, none);
         (CharsDecimal, chars_decimal);
         (CharsHexadecimal, chars_hexadecimal);
         (CharsUppercase, chars_uppercase);
         (CharsNoBlank, chars_no_blank);
         (AutoSelectAll, auto_select_all);
         (EnterReturnsTrue, enter_returns_true);
         (CallbackCompletion, callback_completion);
         (CallbackHistory, callback_history);
         (CallbackAlways, callback_always);
         (CallbackCharFilter, callback_char_filter);
         (AllowTabInput, allow_tab_input);
         (CtrlEnterForNewLine, ctrl_enter_for_new_line);
         (NoHorizontalScroll, no_horizontal_scroll);
         (AlwaysOverwrite, always_overwrite);
         (ReadOnly, read_only);
         (Password, password);
         (NoUndoRedo, no_undo_redo);
         (CharsScientific, chars_scientific);
         (CallbackResize, callback_resize);
         (CallbackEdit, callback_edit);
         (EscapeClearsAll, escape_clears_all)]
     
  end
  module TreeNodeFlags = struct
    type t =
    | None
    | Selected
    | Framed
    | AllowOverlap
    | NoTreePushOnOpen
    | NoAutoOpenOnLog
    | DefaultOpen
    | OpenOnDoubleClick
    | OpenOnArrow
    | Leaf
    | Bullet
    | FramePadding
    | SpanAvailWidth
    | SpanFullWidth
    | SpanTextWidth
    | SpanAllColumns
    | NavLeftJumpsBackHere
    | CollapsingHeader
    
    let none = constant "ImGuiTreeNodeFlags_None" int64_t
    let selected = constant "ImGuiTreeNodeFlags_Selected" int64_t
    let framed = constant "ImGuiTreeNodeFlags_Framed" int64_t
    let allow_overlap = constant "ImGuiTreeNodeFlags_AllowOverlap" int64_t
    let no_tree_push_on_open =
      constant "ImGuiTreeNodeFlags_NoTreePushOnOpen" int64_t
    let no_auto_open_on_log =
      constant "ImGuiTreeNodeFlags_NoAutoOpenOnLog" int64_t
    let default_open = constant "ImGuiTreeNodeFlags_DefaultOpen" int64_t
    let open_on_double_click =
      constant "ImGuiTreeNodeFlags_OpenOnDoubleClick" int64_t
    let open_on_arrow = constant "ImGuiTreeNodeFlags_OpenOnArrow" int64_t
    let leaf = constant "ImGuiTreeNodeFlags_Leaf" int64_t
    let bullet = constant "ImGuiTreeNodeFlags_Bullet" int64_t
    let frame_padding = constant "ImGuiTreeNodeFlags_FramePadding" int64_t
    let span_avail_width = constant "ImGuiTreeNodeFlags_SpanAvailWidth" int64_t
    let span_full_width = constant "ImGuiTreeNodeFlags_SpanFullWidth" int64_t
    let span_text_width = constant "ImGuiTreeNodeFlags_SpanTextWidth" int64_t
    let span_all_columns = constant "ImGuiTreeNodeFlags_SpanAllColumns" int64_t
    let nav_left_jumps_back_here =
      constant "ImGuiTreeNodeFlags_NavLeftJumpsBackHere" int64_t
    let collapsing_header =
      constant "ImGuiTreeNodeFlags_CollapsingHeader" int64_t
    
    let t : t typ =
      enum "ImGuiTreeNodeFlags_" ~typedef:true
        [(None, none);
         (Selected, selected);
         (Framed, framed);
         (AllowOverlap, allow_overlap);
         (NoTreePushOnOpen, no_tree_push_on_open);
         (NoAutoOpenOnLog, no_auto_open_on_log);
         (DefaultOpen, default_open);
         (OpenOnDoubleClick, open_on_double_click);
         (OpenOnArrow, open_on_arrow);
         (Leaf, leaf);
         (Bullet, bullet);
         (FramePadding, frame_padding);
         (SpanAvailWidth, span_avail_width);
         (SpanFullWidth, span_full_width);
         (SpanTextWidth, span_text_width);
         (SpanAllColumns, span_all_columns);
         (NavLeftJumpsBackHere, nav_left_jumps_back_here);
         (CollapsingHeader, collapsing_header)]
     
  end
  module PopupFlags = struct
    type t =
    | None
    | MouseButtonLeft
    | MouseButtonRight
    | MouseButtonMiddle
    | MouseButtonMask_
    | MouseButtonDefault_
    | NoReopen
    | NoOpenOverExistingPopup
    | NoOpenOverItems
    | AnyPopupId
    | AnyPopupLevel
    | AnyPopup
    
    let none = constant "ImGuiPopupFlags_None" int64_t
    let mouse_button_left = constant "ImGuiPopupFlags_MouseButtonLeft" int64_t
    let mouse_button_right =
      constant "ImGuiPopupFlags_MouseButtonRight" int64_t
    let mouse_button_middle =
      constant "ImGuiPopupFlags_MouseButtonMiddle" int64_t
    let mouse_button_mask_ =
      constant "ImGuiPopupFlags_MouseButtonMask_" int64_t
    let mouse_button_default_ =
      constant "ImGuiPopupFlags_MouseButtonDefault_" int64_t
    let no_reopen = constant "ImGuiPopupFlags_NoReopen" int64_t
    let no_open_over_existing_popup =
      constant "ImGuiPopupFlags_NoOpenOverExistingPopup" int64_t
    let no_open_over_items = constant "ImGuiPopupFlags_NoOpenOverItems" int64_t
    let any_popup_id = constant "ImGuiPopupFlags_AnyPopupId" int64_t
    let any_popup_level = constant "ImGuiPopupFlags_AnyPopupLevel" int64_t
    let any_popup = constant "ImGuiPopupFlags_AnyPopup" int64_t
    
    let t : t typ =
      enum "ImGuiPopupFlags_" ~typedef:true
        [(None, none);
         (MouseButtonLeft, mouse_button_left);
         (MouseButtonRight, mouse_button_right);
         (MouseButtonMiddle, mouse_button_middle);
         (MouseButtonMask_, mouse_button_mask_);
         (MouseButtonDefault_, mouse_button_default_);
         (NoReopen, no_reopen);
         (NoOpenOverExistingPopup, no_open_over_existing_popup);
         (NoOpenOverItems, no_open_over_items);
         (AnyPopupId, any_popup_id);
         (AnyPopupLevel, any_popup_level);
         (AnyPopup, any_popup)]
     
  end
  module SelectableFlags = struct
    type t =
    | None
    | DontClosePopups
    | SpanAllColumns
    | AllowDoubleClick
    | Disabled
    | AllowOverlap
    
    let none = constant "ImGuiSelectableFlags_None" int64_t
    let dont_close_popups =
      constant "ImGuiSelectableFlags_DontClosePopups" int64_t
    let span_all_columns =
      constant "ImGuiSelectableFlags_SpanAllColumns" int64_t
    let allow_double_click =
      constant "ImGuiSelectableFlags_AllowDoubleClick" int64_t
    let disabled = constant "ImGuiSelectableFlags_Disabled" int64_t
    let allow_overlap = constant "ImGuiSelectableFlags_AllowOverlap" int64_t
    
    let t : t typ =
      enum "ImGuiSelectableFlags_" ~typedef:true
        [(None, none);
         (DontClosePopups, dont_close_popups);
         (SpanAllColumns, span_all_columns);
         (AllowDoubleClick, allow_double_click);
         (Disabled, disabled);
         (AllowOverlap, allow_overlap)]
     
  end
  module ComboFlags = struct
    type t =
    | None
    | PopupAlignLeft
    | HeightSmall
    | HeightRegular
    | HeightLarge
    | HeightLargest
    | NoArrowButton
    | NoPreview
    | WidthFitPreview
    | HeightMask_
    
    let none = constant "ImGuiComboFlags_None" int64_t
    let popup_align_left = constant "ImGuiComboFlags_PopupAlignLeft" int64_t
    let height_small = constant "ImGuiComboFlags_HeightSmall" int64_t
    let height_regular = constant "ImGuiComboFlags_HeightRegular" int64_t
    let height_large = constant "ImGuiComboFlags_HeightLarge" int64_t
    let height_largest = constant "ImGuiComboFlags_HeightLargest" int64_t
    let no_arrow_button = constant "ImGuiComboFlags_NoArrowButton" int64_t
    let no_preview = constant "ImGuiComboFlags_NoPreview" int64_t
    let width_fit_preview = constant "ImGuiComboFlags_WidthFitPreview" int64_t
    let height_mask_ = constant "ImGuiComboFlags_HeightMask_" int64_t
    
    let t : t typ =
      enum "ImGuiComboFlags_" ~typedef:true
        [(None, none);
         (PopupAlignLeft, popup_align_left);
         (HeightSmall, height_small);
         (HeightRegular, height_regular);
         (HeightLarge, height_large);
         (HeightLargest, height_largest);
         (NoArrowButton, no_arrow_button);
         (NoPreview, no_preview);
         (WidthFitPreview, width_fit_preview);
         (HeightMask_, height_mask_)]
     
  end
  module TabBarFlags = struct
    type t =
    | None
    | Reorderable
    | AutoSelectNewTabs
    | TabListPopupButton
    | NoCloseWithMiddleMouseButton
    | NoTabListScrollingButtons
    | NoTooltip
    | FittingPolicyResizeDown
    | FittingPolicyScroll
    | FittingPolicyMask_
    | FittingPolicyDefault_
    
    let none = constant "ImGuiTabBarFlags_None" int64_t
    let reorderable = constant "ImGuiTabBarFlags_Reorderable" int64_t
    let auto_select_new_tabs =
      constant "ImGuiTabBarFlags_AutoSelectNewTabs" int64_t
    let tab_list_popup_button =
      constant "ImGuiTabBarFlags_TabListPopupButton" int64_t
    let no_close_with_middle_mouse_button =
      constant "ImGuiTabBarFlags_NoCloseWithMiddleMouseButton" int64_t
    let no_tab_list_scrolling_buttons =
      constant "ImGuiTabBarFlags_NoTabListScrollingButtons" int64_t
    let no_tooltip = constant "ImGuiTabBarFlags_NoTooltip" int64_t
    let fitting_policy_resize_down =
      constant "ImGuiTabBarFlags_FittingPolicyResizeDown" int64_t
    let fitting_policy_scroll =
      constant "ImGuiTabBarFlags_FittingPolicyScroll" int64_t
    let fitting_policy_mask_ =
      constant "ImGuiTabBarFlags_FittingPolicyMask_" int64_t
    let fitting_policy_default_ =
      constant "ImGuiTabBarFlags_FittingPolicyDefault_" int64_t
    
    let t : t typ =
      enum "ImGuiTabBarFlags_" ~typedef:true
        [(None, none);
         (Reorderable, reorderable);
         (AutoSelectNewTabs, auto_select_new_tabs);
         (TabListPopupButton, tab_list_popup_button);
         (NoCloseWithMiddleMouseButton, no_close_with_middle_mouse_button);
         (NoTabListScrollingButtons, no_tab_list_scrolling_buttons);
         (NoTooltip, no_tooltip);
         (FittingPolicyResizeDown, fitting_policy_resize_down);
         (FittingPolicyScroll, fitting_policy_scroll);
         (FittingPolicyMask_, fitting_policy_mask_);
         (FittingPolicyDefault_, fitting_policy_default_)]
     
  end
  module TabItemFlags = struct
    type t =
    | None
    | UnsavedDocument
    | SetSelected
    | NoCloseWithMiddleMouseButton
    | NoPushId
    | NoTooltip
    | NoReorder
    | Leading
    | Trailing
    | NoAssumedClosure
    
    let none = constant "ImGuiTabItemFlags_None" int64_t
    let unsaved_document = constant "ImGuiTabItemFlags_UnsavedDocument" int64_t
    let set_selected = constant "ImGuiTabItemFlags_SetSelected" int64_t
    let no_close_with_middle_mouse_button =
      constant "ImGuiTabItemFlags_NoCloseWithMiddleMouseButton" int64_t
    let no_push_id = constant "ImGuiTabItemFlags_NoPushId" int64_t
    let no_tooltip = constant "ImGuiTabItemFlags_NoTooltip" int64_t
    let no_reorder = constant "ImGuiTabItemFlags_NoReorder" int64_t
    let leading = constant "ImGuiTabItemFlags_Leading" int64_t
    let trailing = constant "ImGuiTabItemFlags_Trailing" int64_t
    let no_assumed_closure =
      constant "ImGuiTabItemFlags_NoAssumedClosure" int64_t
    
    let t : t typ =
      enum "ImGuiTabItemFlags_" ~typedef:true
        [(None, none);
         (UnsavedDocument, unsaved_document);
         (SetSelected, set_selected);
         (NoCloseWithMiddleMouseButton, no_close_with_middle_mouse_button);
         (NoPushId, no_push_id);
         (NoTooltip, no_tooltip);
         (NoReorder, no_reorder);
         (Leading, leading);
         (Trailing, trailing);
         (NoAssumedClosure, no_assumed_closure)]
     
  end
  module FocusedFlags = struct
    type t =
    | None
    | ChildWindows
    | RootWindow
    | AnyWindow
    | NoPopupHierarchy
    | DockHierarchy
    | RootAndChildWindows
    
    let none = constant "ImGuiFocusedFlags_None" int64_t
    let child_windows = constant "ImGuiFocusedFlags_ChildWindows" int64_t
    let root_window = constant "ImGuiFocusedFlags_RootWindow" int64_t
    let any_window = constant "ImGuiFocusedFlags_AnyWindow" int64_t
    let no_popup_hierarchy =
      constant "ImGuiFocusedFlags_NoPopupHierarchy" int64_t
    let dock_hierarchy = constant "ImGuiFocusedFlags_DockHierarchy" int64_t
    let root_and_child_windows =
      constant "ImGuiFocusedFlags_RootAndChildWindows" int64_t
    
    let t : t typ =
      enum "ImGuiFocusedFlags_" ~typedef:true
        [(None, none);
         (ChildWindows, child_windows);
         (RootWindow, root_window);
         (AnyWindow, any_window);
         (NoPopupHierarchy, no_popup_hierarchy);
         (DockHierarchy, dock_hierarchy);
         (RootAndChildWindows, root_and_child_windows)]
     
  end
  module HoveredFlags = struct
    type t =
    | None
    | ChildWindows
    | RootWindow
    | AnyWindow
    | NoPopupHierarchy
    | DockHierarchy
    | AllowWhenBlockedByPopup
    | AllowWhenBlockedByActiveItem
    | AllowWhenOverlappedByItem
    | AllowWhenOverlappedByWindow
    | AllowWhenDisabled
    | NoNavOverride
    | AllowWhenOverlapped
    | RectOnly
    | RootAndChildWindows
    | ForTooltip
    | Stationary
    | DelayNone
    | DelayShort
    | DelayNormal
    | NoSharedDelay
    
    let none = constant "ImGuiHoveredFlags_None" int64_t
    let child_windows = constant "ImGuiHoveredFlags_ChildWindows" int64_t
    let root_window = constant "ImGuiHoveredFlags_RootWindow" int64_t
    let any_window = constant "ImGuiHoveredFlags_AnyWindow" int64_t
    let no_popup_hierarchy =
      constant "ImGuiHoveredFlags_NoPopupHierarchy" int64_t
    let dock_hierarchy = constant "ImGuiHoveredFlags_DockHierarchy" int64_t
    let allow_when_blocked_by_popup =
      constant "ImGuiHoveredFlags_AllowWhenBlockedByPopup" int64_t
    let allow_when_blocked_by_active_item =
      constant "ImGuiHoveredFlags_AllowWhenBlockedByActiveItem" int64_t
    let allow_when_overlapped_by_item =
      constant "ImGuiHoveredFlags_AllowWhenOverlappedByItem" int64_t
    let allow_when_overlapped_by_window =
      constant "ImGuiHoveredFlags_AllowWhenOverlappedByWindow" int64_t
    let allow_when_disabled =
      constant "ImGuiHoveredFlags_AllowWhenDisabled" int64_t
    let no_nav_override = constant "ImGuiHoveredFlags_NoNavOverride" int64_t
    let allow_when_overlapped =
      constant "ImGuiHoveredFlags_AllowWhenOverlapped" int64_t
    let rect_only = constant "ImGuiHoveredFlags_RectOnly" int64_t
    let root_and_child_windows =
      constant "ImGuiHoveredFlags_RootAndChildWindows" int64_t
    let for_tooltip = constant "ImGuiHoveredFlags_ForTooltip" int64_t
    let stationary = constant "ImGuiHoveredFlags_Stationary" int64_t
    let delay_none = constant "ImGuiHoveredFlags_DelayNone" int64_t
    let delay_short = constant "ImGuiHoveredFlags_DelayShort" int64_t
    let delay_normal = constant "ImGuiHoveredFlags_DelayNormal" int64_t
    let no_shared_delay = constant "ImGuiHoveredFlags_NoSharedDelay" int64_t
    
    let t : t typ =
      enum "ImGuiHoveredFlags_" ~typedef:true
        [(None, none);
         (ChildWindows, child_windows);
         (RootWindow, root_window);
         (AnyWindow, any_window);
         (NoPopupHierarchy, no_popup_hierarchy);
         (DockHierarchy, dock_hierarchy);
         (AllowWhenBlockedByPopup, allow_when_blocked_by_popup);
         (AllowWhenBlockedByActiveItem, allow_when_blocked_by_active_item);
         (AllowWhenOverlappedByItem, allow_when_overlapped_by_item);
         (AllowWhenOverlappedByWindow, allow_when_overlapped_by_window);
         (AllowWhenDisabled, allow_when_disabled);
         (NoNavOverride, no_nav_override);
         (AllowWhenOverlapped, allow_when_overlapped);
         (RectOnly, rect_only);
         (RootAndChildWindows, root_and_child_windows);
         (ForTooltip, for_tooltip);
         (Stationary, stationary);
         (DelayNone, delay_none);
         (DelayShort, delay_short);
         (DelayNormal, delay_normal);
         (NoSharedDelay, no_shared_delay)]
     
  end
  module DockNodeFlags = struct
    type t =
    | None
    | KeepAliveOnly
    | NoDockingOverCentralNode
    | PassthruCentralNode
    | NoDockingSplit
    | NoResize
    | AutoHideTabBar
    | NoUndocking
    
    let none = constant "ImGuiDockNodeFlags_None" int64_t
    let keep_alive_only = constant "ImGuiDockNodeFlags_KeepAliveOnly" int64_t
    let no_docking_over_central_node =
      constant "ImGuiDockNodeFlags_NoDockingOverCentralNode" int64_t
    let passthru_central_node =
      constant "ImGuiDockNodeFlags_PassthruCentralNode" int64_t
    let no_docking_split = constant "ImGuiDockNodeFlags_NoDockingSplit" int64_t
    let no_resize = constant "ImGuiDockNodeFlags_NoResize" int64_t
    let auto_hide_tab_bar =
      constant "ImGuiDockNodeFlags_AutoHideTabBar" int64_t
    let no_undocking = constant "ImGuiDockNodeFlags_NoUndocking" int64_t
    
    let t : t typ =
      enum "ImGuiDockNodeFlags_" ~typedef:true
        [(None, none);
         (KeepAliveOnly, keep_alive_only);
         (NoDockingOverCentralNode, no_docking_over_central_node);
         (PassthruCentralNode, passthru_central_node);
         (NoDockingSplit, no_docking_split);
         (NoResize, no_resize);
         (AutoHideTabBar, auto_hide_tab_bar);
         (NoUndocking, no_undocking)]
     
  end
  module DragDropFlags = struct
    type t =
    | None
    | SourceNoPreviewTooltip
    | SourceNoDisableHover
    | SourceNoHoldToOpenOthers
    | SourceAllowNullID
    | SourceExtern
    | SourceAutoExpirePayload
    | AcceptBeforeDelivery
    | AcceptNoDrawDefaultRect
    | AcceptNoPreviewTooltip
    | AcceptPeekOnly
    
    let none = constant "ImGuiDragDropFlags_None" int64_t
    let source_no_preview_tooltip =
      constant "ImGuiDragDropFlags_SourceNoPreviewTooltip" int64_t
    let source_no_disable_hover =
      constant "ImGuiDragDropFlags_SourceNoDisableHover" int64_t
    let source_no_hold_to_open_others =
      constant "ImGuiDragDropFlags_SourceNoHoldToOpenOthers" int64_t
    let source_allow_null_id =
      constant "ImGuiDragDropFlags_SourceAllowNullID" int64_t
    let source_extern = constant "ImGuiDragDropFlags_SourceExtern" int64_t
    let source_auto_expire_payload =
      constant "ImGuiDragDropFlags_SourceAutoExpirePayload" int64_t
    let accept_before_delivery =
      constant "ImGuiDragDropFlags_AcceptBeforeDelivery" int64_t
    let accept_no_draw_default_rect =
      constant "ImGuiDragDropFlags_AcceptNoDrawDefaultRect" int64_t
    let accept_no_preview_tooltip =
      constant "ImGuiDragDropFlags_AcceptNoPreviewTooltip" int64_t
    let accept_peek_only = constant "ImGuiDragDropFlags_AcceptPeekOnly" int64_t
    
    let t : t typ =
      enum "ImGuiDragDropFlags_" ~typedef:true
        [(None, none);
         (SourceNoPreviewTooltip, source_no_preview_tooltip);
         (SourceNoDisableHover, source_no_disable_hover);
         (SourceNoHoldToOpenOthers, source_no_hold_to_open_others);
         (SourceAllowNullID, source_allow_null_id);
         (SourceExtern, source_extern);
         (SourceAutoExpirePayload, source_auto_expire_payload);
         (AcceptBeforeDelivery, accept_before_delivery);
         (AcceptNoDrawDefaultRect, accept_no_draw_default_rect);
         (AcceptNoPreviewTooltip, accept_no_preview_tooltip);
         (AcceptPeekOnly, accept_peek_only)]
     
  end
  module DataType = struct
    type t =
    | S8
    | U8
    | S16
    | U16
    | S32
    | U32
    | S64
    | U64
    | Float
    | Double
    | COUNT
    
    let s8 = constant "ImGuiDataType_S8" int64_t
    let u8 = constant "ImGuiDataType_U8" int64_t
    let s16 = constant "ImGuiDataType_S16" int64_t
    let u16 = constant "ImGuiDataType_U16" int64_t
    let s32 = constant "ImGuiDataType_S32" int64_t
    let u32 = constant "ImGuiDataType_U32" int64_t
    let s64 = constant "ImGuiDataType_S64" int64_t
    let u64 = constant "ImGuiDataType_U64" int64_t
    let float = constant "ImGuiDataType_Float" int64_t
    let double = constant "ImGuiDataType_Double" int64_t
    let count = constant "ImGuiDataType_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiDataType_" ~typedef:true
        [(S8, s8);
         (U8, u8);
         (S16, s16);
         (U16, u16);
         (S32, s32);
         (U32, u32);
         (S64, s64);
         (U64, u64);
         (Float, float);
         (Double, double);
         (COUNT, count)]
     
  end
  module Dir = struct
    type t =
    | None
    | Left
    | Right
    | Up
    | Down
    | COUNT
    
    let none = constant "ImGuiDir_None" int64_t
    let left = constant "ImGuiDir_Left" int64_t
    let right = constant "ImGuiDir_Right" int64_t
    let up = constant "ImGuiDir_Up" int64_t
    let down = constant "ImGuiDir_Down" int64_t
    let count = constant "ImGuiDir_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiDir_" ~typedef:true
        [(None, none);
         (Left, left);
         (Right, right);
         (Up, up);
         (Down, down);
         (COUNT, count)]
     
  end
  module SortDirection = struct
    type t =
    | None
    | Ascending
    | Descending
    
    let none = constant "ImGuiSortDirection_None" int64_t
    let ascending = constant "ImGuiSortDirection_Ascending" int64_t
    let descending = constant "ImGuiSortDirection_Descending" int64_t
    
    let t : t typ =
      enum "ImGuiSortDirection_" ~typedef:true
        [(None, none); (Ascending, ascending); (Descending, descending)]
     
  end
  module Key = struct
    type t =
    | None
    | Tab
    | LeftArrow
    | RightArrow
    | UpArrow
    | DownArrow
    | PageUp
    | PageDown
    | Home
    | End
    | Insert
    | Delete
    | Backspace
    | Space
    | Enter
    | Escape
    | LeftCtrl
    | LeftShift
    | LeftAlt
    | LeftSuper
    | RightCtrl
    | RightShift
    | RightAlt
    | RightSuper
    | Menu
    | K0
    | K1
    | K2
    | K3
    | K4
    | K5
    | K6
    | K7
    | K8
    | K9
    | A
    | B
    | C
    | D
    | E
    | F
    | G
    | H
    | I
    | J
    | K
    | L
    | M
    | N
    | O
    | P
    | Q
    | R
    | S
    | T
    | U
    | V
    | W
    | X
    | Y
    | Z
    | F1
    | F2
    | F3
    | F4
    | F5
    | F6
    | F7
    | F8
    | F9
    | F10
    | F11
    | F12
    | F13
    | F14
    | F15
    | F16
    | F17
    | F18
    | F19
    | F20
    | F21
    | F22
    | F23
    | F24
    | Apostrophe
    | Comma
    | Minus
    | Period
    | Slash
    | Semicolon
    | Equal
    | LeftBracket
    | Backslash
    | RightBracket
    | GraveAccent
    | CapsLock
    | ScrollLock
    | NumLock
    | PrintScreen
    | Pause
    | Keypad0
    | Keypad1
    | Keypad2
    | Keypad3
    | Keypad4
    | Keypad5
    | Keypad6
    | Keypad7
    | Keypad8
    | Keypad9
    | KeypadDecimal
    | KeypadDivide
    | KeypadMultiply
    | KeypadSubtract
    | KeypadAdd
    | KeypadEnter
    | KeypadEqual
    | AppBack
    | AppForward
    | GamepadStart
    | GamepadBack
    | GamepadFaceLeft
    | GamepadFaceRight
    | GamepadFaceUp
    | GamepadFaceDown
    | GamepadDpadLeft
    | GamepadDpadRight
    | GamepadDpadUp
    | GamepadDpadDown
    | GamepadL1
    | GamepadR1
    | GamepadL2
    | GamepadR2
    | GamepadL3
    | GamepadR3
    | GamepadLStickLeft
    | GamepadLStickRight
    | GamepadLStickUp
    | GamepadLStickDown
    | GamepadRStickLeft
    | GamepadRStickRight
    | GamepadRStickUp
    | GamepadRStickDown
    | MouseLeft
    | MouseRight
    | MouseMiddle
    | MouseX1
    | MouseX2
    | MouseWheelX
    | MouseWheelY
    | ReservedForModCtrl
    | ReservedForModShift
    | ReservedForModAlt
    | ReservedForModSuper
    | COUNT
    | ImGuiMod_None
    | ImGuiMod_Ctrl
    | ImGuiMod_Shift
    | ImGuiMod_Alt
    | ImGuiMod_Super
    | ImGuiMod_Shortcut
    | ImGuiMod_Mask_
    | NamedKey_BEGIN
    | NamedKey_END
    | NamedKey_COUNT
    | KeysData_SIZE
    | KeysData_OFFSET
    
    let none = constant "ImGuiKey_None" int64_t
    let tab = constant "ImGuiKey_Tab" int64_t
    let left_arrow = constant "ImGuiKey_LeftArrow" int64_t
    let right_arrow = constant "ImGuiKey_RightArrow" int64_t
    let up_arrow = constant "ImGuiKey_UpArrow" int64_t
    let down_arrow = constant "ImGuiKey_DownArrow" int64_t
    let page_up = constant "ImGuiKey_PageUp" int64_t
    let page_down = constant "ImGuiKey_PageDown" int64_t
    let home = constant "ImGuiKey_Home" int64_t
    let end_ = constant "ImGuiKey_End" int64_t
    let insert = constant "ImGuiKey_Insert" int64_t
    let delete = constant "ImGuiKey_Delete" int64_t
    let backspace = constant "ImGuiKey_Backspace" int64_t
    let space = constant "ImGuiKey_Space" int64_t
    let enter = constant "ImGuiKey_Enter" int64_t
    let escape = constant "ImGuiKey_Escape" int64_t
    let left_ctrl = constant "ImGuiKey_LeftCtrl" int64_t
    let left_shift = constant "ImGuiKey_LeftShift" int64_t
    let left_alt = constant "ImGuiKey_LeftAlt" int64_t
    let left_super = constant "ImGuiKey_LeftSuper" int64_t
    let right_ctrl = constant "ImGuiKey_RightCtrl" int64_t
    let right_shift = constant "ImGuiKey_RightShift" int64_t
    let right_alt = constant "ImGuiKey_RightAlt" int64_t
    let right_super = constant "ImGuiKey_RightSuper" int64_t
    let menu = constant "ImGuiKey_Menu" int64_t
    let k0 = constant "ImGuiKey_0" int64_t
    let k1 = constant "ImGuiKey_1" int64_t
    let k2 = constant "ImGuiKey_2" int64_t
    let k3 = constant "ImGuiKey_3" int64_t
    let k4 = constant "ImGuiKey_4" int64_t
    let k5 = constant "ImGuiKey_5" int64_t
    let k6 = constant "ImGuiKey_6" int64_t
    let k7 = constant "ImGuiKey_7" int64_t
    let k8 = constant "ImGuiKey_8" int64_t
    let k9 = constant "ImGuiKey_9" int64_t
    let a = constant "ImGuiKey_A" int64_t
    let b = constant "ImGuiKey_B" int64_t
    let c = constant "ImGuiKey_C" int64_t
    let d = constant "ImGuiKey_D" int64_t
    let e = constant "ImGuiKey_E" int64_t
    let f = constant "ImGuiKey_F" int64_t
    let g = constant "ImGuiKey_G" int64_t
    let h = constant "ImGuiKey_H" int64_t
    let i = constant "ImGuiKey_I" int64_t
    let j = constant "ImGuiKey_J" int64_t
    let k = constant "ImGuiKey_K" int64_t
    let l = constant "ImGuiKey_L" int64_t
    let m = constant "ImGuiKey_M" int64_t
    let n = constant "ImGuiKey_N" int64_t
    let o = constant "ImGuiKey_O" int64_t
    let p = constant "ImGuiKey_P" int64_t
    let q = constant "ImGuiKey_Q" int64_t
    let r = constant "ImGuiKey_R" int64_t
    let s = constant "ImGuiKey_S" int64_t
    let t = constant "ImGuiKey_T" int64_t
    let u = constant "ImGuiKey_U" int64_t
    let v = constant "ImGuiKey_V" int64_t
    let w = constant "ImGuiKey_W" int64_t
    let x = constant "ImGuiKey_X" int64_t
    let y = constant "ImGuiKey_Y" int64_t
    let z = constant "ImGuiKey_Z" int64_t
    let f1 = constant "ImGuiKey_F1" int64_t
    let f2 = constant "ImGuiKey_F2" int64_t
    let f3 = constant "ImGuiKey_F3" int64_t
    let f4 = constant "ImGuiKey_F4" int64_t
    let f5 = constant "ImGuiKey_F5" int64_t
    let f6 = constant "ImGuiKey_F6" int64_t
    let f7 = constant "ImGuiKey_F7" int64_t
    let f8 = constant "ImGuiKey_F8" int64_t
    let f9 = constant "ImGuiKey_F9" int64_t
    let f10 = constant "ImGuiKey_F10" int64_t
    let f11 = constant "ImGuiKey_F11" int64_t
    let f12 = constant "ImGuiKey_F12" int64_t
    let f13 = constant "ImGuiKey_F13" int64_t
    let f14 = constant "ImGuiKey_F14" int64_t
    let f15 = constant "ImGuiKey_F15" int64_t
    let f16 = constant "ImGuiKey_F16" int64_t
    let f17 = constant "ImGuiKey_F17" int64_t
    let f18 = constant "ImGuiKey_F18" int64_t
    let f19 = constant "ImGuiKey_F19" int64_t
    let f20 = constant "ImGuiKey_F20" int64_t
    let f21 = constant "ImGuiKey_F21" int64_t
    let f22 = constant "ImGuiKey_F22" int64_t
    let f23 = constant "ImGuiKey_F23" int64_t
    let f24 = constant "ImGuiKey_F24" int64_t
    let apostrophe = constant "ImGuiKey_Apostrophe" int64_t
    let comma = constant "ImGuiKey_Comma" int64_t
    let minus = constant "ImGuiKey_Minus" int64_t
    let period = constant "ImGuiKey_Period" int64_t
    let slash = constant "ImGuiKey_Slash" int64_t
    let semicolon = constant "ImGuiKey_Semicolon" int64_t
    let equal = constant "ImGuiKey_Equal" int64_t
    let left_bracket = constant "ImGuiKey_LeftBracket" int64_t
    let backslash = constant "ImGuiKey_Backslash" int64_t
    let right_bracket = constant "ImGuiKey_RightBracket" int64_t
    let grave_accent = constant "ImGuiKey_GraveAccent" int64_t
    let caps_lock = constant "ImGuiKey_CapsLock" int64_t
    let scroll_lock = constant "ImGuiKey_ScrollLock" int64_t
    let num_lock = constant "ImGuiKey_NumLock" int64_t
    let print_screen = constant "ImGuiKey_PrintScreen" int64_t
    let pause = constant "ImGuiKey_Pause" int64_t
    let keypad0 = constant "ImGuiKey_Keypad0" int64_t
    let keypad1 = constant "ImGuiKey_Keypad1" int64_t
    let keypad2 = constant "ImGuiKey_Keypad2" int64_t
    let keypad3 = constant "ImGuiKey_Keypad3" int64_t
    let keypad4 = constant "ImGuiKey_Keypad4" int64_t
    let keypad5 = constant "ImGuiKey_Keypad5" int64_t
    let keypad6 = constant "ImGuiKey_Keypad6" int64_t
    let keypad7 = constant "ImGuiKey_Keypad7" int64_t
    let keypad8 = constant "ImGuiKey_Keypad8" int64_t
    let keypad9 = constant "ImGuiKey_Keypad9" int64_t
    let keypad_decimal = constant "ImGuiKey_KeypadDecimal" int64_t
    let keypad_divide = constant "ImGuiKey_KeypadDivide" int64_t
    let keypad_multiply = constant "ImGuiKey_KeypadMultiply" int64_t
    let keypad_subtract = constant "ImGuiKey_KeypadSubtract" int64_t
    let keypad_add = constant "ImGuiKey_KeypadAdd" int64_t
    let keypad_enter = constant "ImGuiKey_KeypadEnter" int64_t
    let keypad_equal = constant "ImGuiKey_KeypadEqual" int64_t
    let app_back = constant "ImGuiKey_AppBack" int64_t
    let app_forward = constant "ImGuiKey_AppForward" int64_t
    let gamepad_start = constant "ImGuiKey_GamepadStart" int64_t
    let gamepad_back = constant "ImGuiKey_GamepadBack" int64_t
    let gamepad_face_left = constant "ImGuiKey_GamepadFaceLeft" int64_t
    let gamepad_face_right = constant "ImGuiKey_GamepadFaceRight" int64_t
    let gamepad_face_up = constant "ImGuiKey_GamepadFaceUp" int64_t
    let gamepad_face_down = constant "ImGuiKey_GamepadFaceDown" int64_t
    let gamepad_dpad_left = constant "ImGuiKey_GamepadDpadLeft" int64_t
    let gamepad_dpad_right = constant "ImGuiKey_GamepadDpadRight" int64_t
    let gamepad_dpad_up = constant "ImGuiKey_GamepadDpadUp" int64_t
    let gamepad_dpad_down = constant "ImGuiKey_GamepadDpadDown" int64_t
    let gamepad_l1 = constant "ImGuiKey_GamepadL1" int64_t
    let gamepad_r1 = constant "ImGuiKey_GamepadR1" int64_t
    let gamepad_l2 = constant "ImGuiKey_GamepadL2" int64_t
    let gamepad_r2 = constant "ImGuiKey_GamepadR2" int64_t
    let gamepad_l3 = constant "ImGuiKey_GamepadL3" int64_t
    let gamepad_r3 = constant "ImGuiKey_GamepadR3" int64_t
    let gamepad_l_stick_left = constant "ImGuiKey_GamepadLStickLeft" int64_t
    let gamepad_l_stick_right = constant "ImGuiKey_GamepadLStickRight" int64_t
    let gamepad_l_stick_up = constant "ImGuiKey_GamepadLStickUp" int64_t
    let gamepad_l_stick_down = constant "ImGuiKey_GamepadLStickDown" int64_t
    let gamepad_r_stick_left = constant "ImGuiKey_GamepadRStickLeft" int64_t
    let gamepad_r_stick_right = constant "ImGuiKey_GamepadRStickRight" int64_t
    let gamepad_r_stick_up = constant "ImGuiKey_GamepadRStickUp" int64_t
    let gamepad_r_stick_down = constant "ImGuiKey_GamepadRStickDown" int64_t
    let mouse_left = constant "ImGuiKey_MouseLeft" int64_t
    let mouse_right = constant "ImGuiKey_MouseRight" int64_t
    let mouse_middle = constant "ImGuiKey_MouseMiddle" int64_t
    let mouse_x1 = constant "ImGuiKey_MouseX1" int64_t
    let mouse_x2 = constant "ImGuiKey_MouseX2" int64_t
    let mouse_wheel_x = constant "ImGuiKey_MouseWheelX" int64_t
    let mouse_wheel_y = constant "ImGuiKey_MouseWheelY" int64_t
    let reserved_for_mod_ctrl = constant "ImGuiKey_ReservedForModCtrl" int64_t
    let reserved_for_mod_shift =
      constant "ImGuiKey_ReservedForModShift" int64_t
    let reserved_for_mod_alt = constant "ImGuiKey_ReservedForModAlt" int64_t
    let reserved_for_mod_super =
      constant "ImGuiKey_ReservedForModSuper" int64_t
    let count = constant "ImGuiKey_COUNT" int64_t
    let im_mod_none = constant "ImGuiMod_None" int64_t
    let im_mod_ctrl = constant "ImGuiMod_Ctrl" int64_t
    let im_mod_shift = constant "ImGuiMod_Shift" int64_t
    let im_mod_alt = constant "ImGuiMod_Alt" int64_t
    let im_mod_super = constant "ImGuiMod_Super" int64_t
    let im_mod_shortcut = constant "ImGuiMod_Shortcut" int64_t
    let im_mod_mask_ = constant "ImGuiMod_Mask_" int64_t
    let named_key_begin = constant "ImGuiKey_NamedKey_BEGIN" int64_t
    let named_key_end = constant "ImGuiKey_NamedKey_END" int64_t
    let named_key_count = constant "ImGuiKey_NamedKey_COUNT" int64_t
    let keys_data_size = constant "ImGuiKey_KeysData_SIZE" int64_t
    let keys_data_offset = constant "ImGuiKey_KeysData_OFFSET" int64_t
    
    let t : t typ =
      enum "ImGuiKey" ~typedef:true
        [(None, none);
         (Tab, tab);
         (LeftArrow, left_arrow);
         (RightArrow, right_arrow);
         (UpArrow, up_arrow);
         (DownArrow, down_arrow);
         (PageUp, page_up);
         (PageDown, page_down);
         (Home, home);
         (End, end_);
         (Insert, insert);
         (Delete, delete);
         (Backspace, backspace);
         (Space, space);
         (Enter, enter);
         (Escape, escape);
         (LeftCtrl, left_ctrl);
         (LeftShift, left_shift);
         (LeftAlt, left_alt);
         (LeftSuper, left_super);
         (RightCtrl, right_ctrl);
         (RightShift, right_shift);
         (RightAlt, right_alt);
         (RightSuper, right_super);
         (Menu, menu);
         (K0, k0);
         (K1, k1);
         (K2, k2);
         (K3, k3);
         (K4, k4);
         (K5, k5);
         (K6, k6);
         (K7, k7);
         (K8, k8);
         (K9, k9);
         (A, a);
         (B, b);
         (C, c);
         (D, d);
         (E, e);
         (F, f);
         (G, g);
         (H, h);
         (I, i);
         (J, j);
         (K, k);
         (L, l);
         (M, m);
         (N, n);
         (O, o);
         (P, p);
         (Q, q);
         (R, r);
         (S, s);
         (T, t);
         (U, u);
         (V, v);
         (W, w);
         (X, x);
         (Y, y);
         (Z, z);
         (F1, f1);
         (F2, f2);
         (F3, f3);
         (F4, f4);
         (F5, f5);
         (F6, f6);
         (F7, f7);
         (F8, f8);
         (F9, f9);
         (F10, f10);
         (F11, f11);
         (F12, f12);
         (F13, f13);
         (F14, f14);
         (F15, f15);
         (F16, f16);
         (F17, f17);
         (F18, f18);
         (F19, f19);
         (F20, f20);
         (F21, f21);
         (F22, f22);
         (F23, f23);
         (F24, f24);
         (Apostrophe, apostrophe);
         (Comma, comma);
         (Minus, minus);
         (Period, period);
         (Slash, slash);
         (Semicolon, semicolon);
         (Equal, equal);
         (LeftBracket, left_bracket);
         (Backslash, backslash);
         (RightBracket, right_bracket);
         (GraveAccent, grave_accent);
         (CapsLock, caps_lock);
         (ScrollLock, scroll_lock);
         (NumLock, num_lock);
         (PrintScreen, print_screen);
         (Pause, pause);
         (Keypad0, keypad0);
         (Keypad1, keypad1);
         (Keypad2, keypad2);
         (Keypad3, keypad3);
         (Keypad4, keypad4);
         (Keypad5, keypad5);
         (Keypad6, keypad6);
         (Keypad7, keypad7);
         (Keypad8, keypad8);
         (Keypad9, keypad9);
         (KeypadDecimal, keypad_decimal);
         (KeypadDivide, keypad_divide);
         (KeypadMultiply, keypad_multiply);
         (KeypadSubtract, keypad_subtract);
         (KeypadAdd, keypad_add);
         (KeypadEnter, keypad_enter);
         (KeypadEqual, keypad_equal);
         (AppBack, app_back);
         (AppForward, app_forward);
         (GamepadStart, gamepad_start);
         (GamepadBack, gamepad_back);
         (GamepadFaceLeft, gamepad_face_left);
         (GamepadFaceRight, gamepad_face_right);
         (GamepadFaceUp, gamepad_face_up);
         (GamepadFaceDown, gamepad_face_down);
         (GamepadDpadLeft, gamepad_dpad_left);
         (GamepadDpadRight, gamepad_dpad_right);
         (GamepadDpadUp, gamepad_dpad_up);
         (GamepadDpadDown, gamepad_dpad_down);
         (GamepadL1, gamepad_l1);
         (GamepadR1, gamepad_r1);
         (GamepadL2, gamepad_l2);
         (GamepadR2, gamepad_r2);
         (GamepadL3, gamepad_l3);
         (GamepadR3, gamepad_r3);
         (GamepadLStickLeft, gamepad_l_stick_left);
         (GamepadLStickRight, gamepad_l_stick_right);
         (GamepadLStickUp, gamepad_l_stick_up);
         (GamepadLStickDown, gamepad_l_stick_down);
         (GamepadRStickLeft, gamepad_r_stick_left);
         (GamepadRStickRight, gamepad_r_stick_right);
         (GamepadRStickUp, gamepad_r_stick_up);
         (GamepadRStickDown, gamepad_r_stick_down);
         (MouseLeft, mouse_left);
         (MouseRight, mouse_right);
         (MouseMiddle, mouse_middle);
         (MouseX1, mouse_x1);
         (MouseX2, mouse_x2);
         (MouseWheelX, mouse_wheel_x);
         (MouseWheelY, mouse_wheel_y);
         (ReservedForModCtrl, reserved_for_mod_ctrl);
         (ReservedForModShift, reserved_for_mod_shift);
         (ReservedForModAlt, reserved_for_mod_alt);
         (ReservedForModSuper, reserved_for_mod_super);
         (COUNT, count);
         (ImGuiMod_None, im_mod_none);
         (ImGuiMod_Ctrl, im_mod_ctrl);
         (ImGuiMod_Shift, im_mod_shift);
         (ImGuiMod_Alt, im_mod_alt);
         (ImGuiMod_Super, im_mod_super);
         (ImGuiMod_Shortcut, im_mod_shortcut);
         (ImGuiMod_Mask_, im_mod_mask_);
         (NamedKey_BEGIN, named_key_begin);
         (NamedKey_END, named_key_end);
         (NamedKey_COUNT, named_key_count);
         (KeysData_SIZE, keys_data_size);
         (KeysData_OFFSET, keys_data_offset)]
     
  end
  module ConfigFlags = struct
    type t =
    | None
    | NavEnableKeyboard
    | NavEnableGamepad
    | NavEnableSetMousePos
    | NavNoCaptureKeyboard
    | NoMouse
    | NoMouseCursorChange
    | DockingEnable
    | ViewportsEnable
    | DpiEnableScaleViewports
    | DpiEnableScaleFonts
    | IsSRGB
    | IsTouchScreen
    
    let none = constant "ImGuiConfigFlags_None" int64_t
    let nav_enable_keyboard =
      constant "ImGuiConfigFlags_NavEnableKeyboard" int64_t
    let nav_enable_gamepad =
      constant "ImGuiConfigFlags_NavEnableGamepad" int64_t
    let nav_enable_set_mouse_pos =
      constant "ImGuiConfigFlags_NavEnableSetMousePos" int64_t
    let nav_no_capture_keyboard =
      constant "ImGuiConfigFlags_NavNoCaptureKeyboard" int64_t
    let no_mouse = constant "ImGuiConfigFlags_NoMouse" int64_t
    let no_mouse_cursor_change =
      constant "ImGuiConfigFlags_NoMouseCursorChange" int64_t
    let docking_enable = constant "ImGuiConfigFlags_DockingEnable" int64_t
    let viewports_enable = constant "ImGuiConfigFlags_ViewportsEnable" int64_t
    let dpi_enable_scale_viewports =
      constant "ImGuiConfigFlags_DpiEnableScaleViewports" int64_t
    let dpi_enable_scale_fonts =
      constant "ImGuiConfigFlags_DpiEnableScaleFonts" int64_t
    let is_srgb = constant "ImGuiConfigFlags_IsSRGB" int64_t
    let is_touch_screen = constant "ImGuiConfigFlags_IsTouchScreen" int64_t
    
    let t : t typ =
      enum "ImGuiConfigFlags_" ~typedef:true
        [(None, none);
         (NavEnableKeyboard, nav_enable_keyboard);
         (NavEnableGamepad, nav_enable_gamepad);
         (NavEnableSetMousePos, nav_enable_set_mouse_pos);
         (NavNoCaptureKeyboard, nav_no_capture_keyboard);
         (NoMouse, no_mouse);
         (NoMouseCursorChange, no_mouse_cursor_change);
         (DockingEnable, docking_enable);
         (ViewportsEnable, viewports_enable);
         (DpiEnableScaleViewports, dpi_enable_scale_viewports);
         (DpiEnableScaleFonts, dpi_enable_scale_fonts);
         (IsSRGB, is_srgb);
         (IsTouchScreen, is_touch_screen)]
     
  end
  module BackendFlags = struct
    type t =
    | None
    | HasGamepad
    | HasMouseCursors
    | HasSetMousePos
    | RendererHasVtxOffset
    | PlatformHasViewports
    | HasMouseHoveredViewport
    | RendererHasViewports
    
    let none = constant "ImGuiBackendFlags_None" int64_t
    let has_gamepad = constant "ImGuiBackendFlags_HasGamepad" int64_t
    let has_mouse_cursors =
      constant "ImGuiBackendFlags_HasMouseCursors" int64_t
    let has_set_mouse_pos = constant "ImGuiBackendFlags_HasSetMousePos" int64_t
    let renderer_has_vtx_offset =
      constant "ImGuiBackendFlags_RendererHasVtxOffset" int64_t
    let platform_has_viewports =
      constant "ImGuiBackendFlags_PlatformHasViewports" int64_t
    let has_mouse_hovered_viewport =
      constant "ImGuiBackendFlags_HasMouseHoveredViewport" int64_t
    let renderer_has_viewports =
      constant "ImGuiBackendFlags_RendererHasViewports" int64_t
    
    let t : t typ =
      enum "ImGuiBackendFlags_" ~typedef:true
        [(None, none);
         (HasGamepad, has_gamepad);
         (HasMouseCursors, has_mouse_cursors);
         (HasSetMousePos, has_set_mouse_pos);
         (RendererHasVtxOffset, renderer_has_vtx_offset);
         (PlatformHasViewports, platform_has_viewports);
         (HasMouseHoveredViewport, has_mouse_hovered_viewport);
         (RendererHasViewports, renderer_has_viewports)]
     
  end
  module Col = struct
    type t =
    | Text
    | TextDisabled
    | WindowBg
    | ChildBg
    | PopupBg
    | Border
    | BorderShadow
    | FrameBg
    | FrameBgHovered
    | FrameBgActive
    | TitleBg
    | TitleBgActive
    | TitleBgCollapsed
    | MenuBarBg
    | ScrollbarBg
    | ScrollbarGrab
    | ScrollbarGrabHovered
    | ScrollbarGrabActive
    | CheckMark
    | SliderGrab
    | SliderGrabActive
    | Button
    | ButtonHovered
    | ButtonActive
    | Header
    | HeaderHovered
    | HeaderActive
    | Separator
    | SeparatorHovered
    | SeparatorActive
    | ResizeGrip
    | ResizeGripHovered
    | ResizeGripActive
    | Tab
    | TabHovered
    | TabActive
    | TabUnfocused
    | TabUnfocusedActive
    | DockingPreview
    | DockingEmptyBg
    | PlotLines
    | PlotLinesHovered
    | PlotHistogram
    | PlotHistogramHovered
    | TableHeaderBg
    | TableBorderStrong
    | TableBorderLight
    | TableRowBg
    | TableRowBgAlt
    | TextSelectedBg
    | DragDropTarget
    | NavHighlight
    | NavWindowingHighlight
    | NavWindowingDimBg
    | ModalWindowDimBg
    | COUNT
    
    let text = constant "ImGuiCol_Text" int64_t
    let text_disabled = constant "ImGuiCol_TextDisabled" int64_t
    let window_bg = constant "ImGuiCol_WindowBg" int64_t
    let child_bg = constant "ImGuiCol_ChildBg" int64_t
    let popup_bg = constant "ImGuiCol_PopupBg" int64_t
    let border = constant "ImGuiCol_Border" int64_t
    let border_shadow = constant "ImGuiCol_BorderShadow" int64_t
    let frame_bg = constant "ImGuiCol_FrameBg" int64_t
    let frame_bg_hovered = constant "ImGuiCol_FrameBgHovered" int64_t
    let frame_bg_active = constant "ImGuiCol_FrameBgActive" int64_t
    let title_bg = constant "ImGuiCol_TitleBg" int64_t
    let title_bg_active = constant "ImGuiCol_TitleBgActive" int64_t
    let title_bg_collapsed = constant "ImGuiCol_TitleBgCollapsed" int64_t
    let menu_bar_bg = constant "ImGuiCol_MenuBarBg" int64_t
    let scrollbar_bg = constant "ImGuiCol_ScrollbarBg" int64_t
    let scrollbar_grab = constant "ImGuiCol_ScrollbarGrab" int64_t
    let scrollbar_grab_hovered =
      constant "ImGuiCol_ScrollbarGrabHovered" int64_t
    let scrollbar_grab_active = constant "ImGuiCol_ScrollbarGrabActive" int64_t
    let check_mark = constant "ImGuiCol_CheckMark" int64_t
    let slider_grab = constant "ImGuiCol_SliderGrab" int64_t
    let slider_grab_active = constant "ImGuiCol_SliderGrabActive" int64_t
    let button = constant "ImGuiCol_Button" int64_t
    let button_hovered = constant "ImGuiCol_ButtonHovered" int64_t
    let button_active = constant "ImGuiCol_ButtonActive" int64_t
    let header = constant "ImGuiCol_Header" int64_t
    let header_hovered = constant "ImGuiCol_HeaderHovered" int64_t
    let header_active = constant "ImGuiCol_HeaderActive" int64_t
    let separator = constant "ImGuiCol_Separator" int64_t
    let separator_hovered = constant "ImGuiCol_SeparatorHovered" int64_t
    let separator_active = constant "ImGuiCol_SeparatorActive" int64_t
    let resize_grip = constant "ImGuiCol_ResizeGrip" int64_t
    let resize_grip_hovered = constant "ImGuiCol_ResizeGripHovered" int64_t
    let resize_grip_active = constant "ImGuiCol_ResizeGripActive" int64_t
    let tab = constant "ImGuiCol_Tab" int64_t
    let tab_hovered = constant "ImGuiCol_TabHovered" int64_t
    let tab_active = constant "ImGuiCol_TabActive" int64_t
    let tab_unfocused = constant "ImGuiCol_TabUnfocused" int64_t
    let tab_unfocused_active = constant "ImGuiCol_TabUnfocusedActive" int64_t
    let docking_preview = constant "ImGuiCol_DockingPreview" int64_t
    let docking_empty_bg = constant "ImGuiCol_DockingEmptyBg" int64_t
    let plot_lines = constant "ImGuiCol_PlotLines" int64_t
    let plot_lines_hovered = constant "ImGuiCol_PlotLinesHovered" int64_t
    let plot_histogram = constant "ImGuiCol_PlotHistogram" int64_t
    let plot_histogram_hovered =
      constant "ImGuiCol_PlotHistogramHovered" int64_t
    let table_header_bg = constant "ImGuiCol_TableHeaderBg" int64_t
    let table_border_strong = constant "ImGuiCol_TableBorderStrong" int64_t
    let table_border_light = constant "ImGuiCol_TableBorderLight" int64_t
    let table_row_bg = constant "ImGuiCol_TableRowBg" int64_t
    let table_row_bg_alt = constant "ImGuiCol_TableRowBgAlt" int64_t
    let text_selected_bg = constant "ImGuiCol_TextSelectedBg" int64_t
    let drag_drop_target = constant "ImGuiCol_DragDropTarget" int64_t
    let nav_highlight = constant "ImGuiCol_NavHighlight" int64_t
    let nav_windowing_highlight =
      constant "ImGuiCol_NavWindowingHighlight" int64_t
    let nav_windowing_dim_bg = constant "ImGuiCol_NavWindowingDimBg" int64_t
    let modal_window_dim_bg = constant "ImGuiCol_ModalWindowDimBg" int64_t
    let count = constant "ImGuiCol_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiCol_" ~typedef:true
        [(Text, text);
         (TextDisabled, text_disabled);
         (WindowBg, window_bg);
         (ChildBg, child_bg);
         (PopupBg, popup_bg);
         (Border, border);
         (BorderShadow, border_shadow);
         (FrameBg, frame_bg);
         (FrameBgHovered, frame_bg_hovered);
         (FrameBgActive, frame_bg_active);
         (TitleBg, title_bg);
         (TitleBgActive, title_bg_active);
         (TitleBgCollapsed, title_bg_collapsed);
         (MenuBarBg, menu_bar_bg);
         (ScrollbarBg, scrollbar_bg);
         (ScrollbarGrab, scrollbar_grab);
         (ScrollbarGrabHovered, scrollbar_grab_hovered);
         (ScrollbarGrabActive, scrollbar_grab_active);
         (CheckMark, check_mark);
         (SliderGrab, slider_grab);
         (SliderGrabActive, slider_grab_active);
         (Button, button);
         (ButtonHovered, button_hovered);
         (ButtonActive, button_active);
         (Header, header);
         (HeaderHovered, header_hovered);
         (HeaderActive, header_active);
         (Separator, separator);
         (SeparatorHovered, separator_hovered);
         (SeparatorActive, separator_active);
         (ResizeGrip, resize_grip);
         (ResizeGripHovered, resize_grip_hovered);
         (ResizeGripActive, resize_grip_active);
         (Tab, tab);
         (TabHovered, tab_hovered);
         (TabActive, tab_active);
         (TabUnfocused, tab_unfocused);
         (TabUnfocusedActive, tab_unfocused_active);
         (DockingPreview, docking_preview);
         (DockingEmptyBg, docking_empty_bg);
         (PlotLines, plot_lines);
         (PlotLinesHovered, plot_lines_hovered);
         (PlotHistogram, plot_histogram);
         (PlotHistogramHovered, plot_histogram_hovered);
         (TableHeaderBg, table_header_bg);
         (TableBorderStrong, table_border_strong);
         (TableBorderLight, table_border_light);
         (TableRowBg, table_row_bg);
         (TableRowBgAlt, table_row_bg_alt);
         (TextSelectedBg, text_selected_bg);
         (DragDropTarget, drag_drop_target);
         (NavHighlight, nav_highlight);
         (NavWindowingHighlight, nav_windowing_highlight);
         (NavWindowingDimBg, nav_windowing_dim_bg);
         (ModalWindowDimBg, modal_window_dim_bg);
         (COUNT, count)]
     
  end
  module StyleVar = struct
    type t =
    | Alpha
    | DisabledAlpha
    | WindowPadding
    | WindowRounding
    | WindowBorderSize
    | WindowMinSize
    | WindowTitleAlign
    | ChildRounding
    | ChildBorderSize
    | PopupRounding
    | PopupBorderSize
    | FramePadding
    | FrameRounding
    | FrameBorderSize
    | ItemSpacing
    | ItemInnerSpacing
    | IndentSpacing
    | CellPadding
    | ScrollbarSize
    | ScrollbarRounding
    | GrabMinSize
    | GrabRounding
    | TabRounding
    | TabBorderSize
    | TabBarBorderSize
    | TableAngledHeadersAngle
    | TableAngledHeadersTextAlign
    | ButtonTextAlign
    | SelectableTextAlign
    | SeparatorTextBorderSize
    | SeparatorTextAlign
    | SeparatorTextPadding
    | DockingSeparatorSize
    | COUNT
    
    let alpha = constant "ImGuiStyleVar_Alpha" int64_t
    let disabled_alpha = constant "ImGuiStyleVar_DisabledAlpha" int64_t
    let window_padding = constant "ImGuiStyleVar_WindowPadding" int64_t
    let window_rounding = constant "ImGuiStyleVar_WindowRounding" int64_t
    let window_border_size = constant "ImGuiStyleVar_WindowBorderSize" int64_t
    let window_min_size = constant "ImGuiStyleVar_WindowMinSize" int64_t
    let window_title_align = constant "ImGuiStyleVar_WindowTitleAlign" int64_t
    let child_rounding = constant "ImGuiStyleVar_ChildRounding" int64_t
    let child_border_size = constant "ImGuiStyleVar_ChildBorderSize" int64_t
    let popup_rounding = constant "ImGuiStyleVar_PopupRounding" int64_t
    let popup_border_size = constant "ImGuiStyleVar_PopupBorderSize" int64_t
    let frame_padding = constant "ImGuiStyleVar_FramePadding" int64_t
    let frame_rounding = constant "ImGuiStyleVar_FrameRounding" int64_t
    let frame_border_size = constant "ImGuiStyleVar_FrameBorderSize" int64_t
    let item_spacing = constant "ImGuiStyleVar_ItemSpacing" int64_t
    let item_inner_spacing = constant "ImGuiStyleVar_ItemInnerSpacing" int64_t
    let indent_spacing = constant "ImGuiStyleVar_IndentSpacing" int64_t
    let cell_padding = constant "ImGuiStyleVar_CellPadding" int64_t
    let scrollbar_size = constant "ImGuiStyleVar_ScrollbarSize" int64_t
    let scrollbar_rounding = constant "ImGuiStyleVar_ScrollbarRounding" int64_t
    let grab_min_size = constant "ImGuiStyleVar_GrabMinSize" int64_t
    let grab_rounding = constant "ImGuiStyleVar_GrabRounding" int64_t
    let tab_rounding = constant "ImGuiStyleVar_TabRounding" int64_t
    let tab_border_size = constant "ImGuiStyleVar_TabBorderSize" int64_t
    let tab_bar_border_size = constant "ImGuiStyleVar_TabBarBorderSize" int64_t
    let table_angled_headers_angle =
      constant "ImGuiStyleVar_TableAngledHeadersAngle" int64_t
    let table_angled_headers_text_align =
      constant "ImGuiStyleVar_TableAngledHeadersTextAlign" int64_t
    let button_text_align = constant "ImGuiStyleVar_ButtonTextAlign" int64_t
    let selectable_text_align =
      constant "ImGuiStyleVar_SelectableTextAlign" int64_t
    let separator_text_border_size =
      constant "ImGuiStyleVar_SeparatorTextBorderSize" int64_t
    let separator_text_align =
      constant "ImGuiStyleVar_SeparatorTextAlign" int64_t
    let separator_text_padding =
      constant "ImGuiStyleVar_SeparatorTextPadding" int64_t
    let docking_separator_size =
      constant "ImGuiStyleVar_DockingSeparatorSize" int64_t
    let count = constant "ImGuiStyleVar_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiStyleVar_" ~typedef:true
        [(Alpha, alpha);
         (DisabledAlpha, disabled_alpha);
         (WindowPadding, window_padding);
         (WindowRounding, window_rounding);
         (WindowBorderSize, window_border_size);
         (WindowMinSize, window_min_size);
         (WindowTitleAlign, window_title_align);
         (ChildRounding, child_rounding);
         (ChildBorderSize, child_border_size);
         (PopupRounding, popup_rounding);
         (PopupBorderSize, popup_border_size);
         (FramePadding, frame_padding);
         (FrameRounding, frame_rounding);
         (FrameBorderSize, frame_border_size);
         (ItemSpacing, item_spacing);
         (ItemInnerSpacing, item_inner_spacing);
         (IndentSpacing, indent_spacing);
         (CellPadding, cell_padding);
         (ScrollbarSize, scrollbar_size);
         (ScrollbarRounding, scrollbar_rounding);
         (GrabMinSize, grab_min_size);
         (GrabRounding, grab_rounding);
         (TabRounding, tab_rounding);
         (TabBorderSize, tab_border_size);
         (TabBarBorderSize, tab_bar_border_size);
         (TableAngledHeadersAngle, table_angled_headers_angle);
         (TableAngledHeadersTextAlign, table_angled_headers_text_align);
         (ButtonTextAlign, button_text_align);
         (SelectableTextAlign, selectable_text_align);
         (SeparatorTextBorderSize, separator_text_border_size);
         (SeparatorTextAlign, separator_text_align);
         (SeparatorTextPadding, separator_text_padding);
         (DockingSeparatorSize, docking_separator_size);
         (COUNT, count)]
     
  end
  module ButtonFlags = struct
    type t =
    | None
    | MouseButtonLeft
    | MouseButtonRight
    | MouseButtonMiddle
    | MouseButtonMask_
    | MouseButtonDefault_
    
    let none = constant "ImGuiButtonFlags_None" int64_t
    let mouse_button_left = constant "ImGuiButtonFlags_MouseButtonLeft" int64_t
    let mouse_button_right =
      constant "ImGuiButtonFlags_MouseButtonRight" int64_t
    let mouse_button_middle =
      constant "ImGuiButtonFlags_MouseButtonMiddle" int64_t
    let mouse_button_mask_ =
      constant "ImGuiButtonFlags_MouseButtonMask_" int64_t
    let mouse_button_default_ =
      constant "ImGuiButtonFlags_MouseButtonDefault_" int64_t
    
    let t : t typ =
      enum "ImGuiButtonFlags_" ~typedef:true
        [(None, none);
         (MouseButtonLeft, mouse_button_left);
         (MouseButtonRight, mouse_button_right);
         (MouseButtonMiddle, mouse_button_middle);
         (MouseButtonMask_, mouse_button_mask_);
         (MouseButtonDefault_, mouse_button_default_)]
     
  end
  module ColorEditFlags = struct
    type t =
    | None
    | NoAlpha
    | NoPicker
    | NoOptions
    | NoSmallPreview
    | NoInputs
    | NoTooltip
    | NoLabel
    | NoSidePreview
    | NoDragDrop
    | NoBorder
    | AlphaBar
    | AlphaPreview
    | AlphaPreviewHalf
    | HDR
    | DisplayRGB
    | DisplayHSV
    | DisplayHex
    | Uint8
    | Float
    | PickerHueBar
    | PickerHueWheel
    | InputRGB
    | InputHSV
    | DefaultOptions_
    | DisplayMask_
    | DataTypeMask_
    | PickerMask_
    | InputMask_
    
    let none = constant "ImGuiColorEditFlags_None" int64_t
    let no_alpha = constant "ImGuiColorEditFlags_NoAlpha" int64_t
    let no_picker = constant "ImGuiColorEditFlags_NoPicker" int64_t
    let no_options = constant "ImGuiColorEditFlags_NoOptions" int64_t
    let no_small_preview =
      constant "ImGuiColorEditFlags_NoSmallPreview" int64_t
    let no_inputs = constant "ImGuiColorEditFlags_NoInputs" int64_t
    let no_tooltip = constant "ImGuiColorEditFlags_NoTooltip" int64_t
    let no_label = constant "ImGuiColorEditFlags_NoLabel" int64_t
    let no_side_preview = constant "ImGuiColorEditFlags_NoSidePreview" int64_t
    let no_drag_drop = constant "ImGuiColorEditFlags_NoDragDrop" int64_t
    let no_border = constant "ImGuiColorEditFlags_NoBorder" int64_t
    let alpha_bar = constant "ImGuiColorEditFlags_AlphaBar" int64_t
    let alpha_preview = constant "ImGuiColorEditFlags_AlphaPreview" int64_t
    let alpha_preview_half =
      constant "ImGuiColorEditFlags_AlphaPreviewHalf" int64_t
    let hdr = constant "ImGuiColorEditFlags_HDR" int64_t
    let display_rgb = constant "ImGuiColorEditFlags_DisplayRGB" int64_t
    let display_hsv = constant "ImGuiColorEditFlags_DisplayHSV" int64_t
    let display_hex = constant "ImGuiColorEditFlags_DisplayHex" int64_t
    let uint8 = constant "ImGuiColorEditFlags_Uint8" int64_t
    let float = constant "ImGuiColorEditFlags_Float" int64_t
    let picker_hue_bar = constant "ImGuiColorEditFlags_PickerHueBar" int64_t
    let picker_hue_wheel =
      constant "ImGuiColorEditFlags_PickerHueWheel" int64_t
    let input_rgb = constant "ImGuiColorEditFlags_InputRGB" int64_t
    let input_hsv = constant "ImGuiColorEditFlags_InputHSV" int64_t
    let default_options_ =
      constant "ImGuiColorEditFlags_DefaultOptions_" int64_t
    let display_mask_ = constant "ImGuiColorEditFlags_DisplayMask_" int64_t
    let data_type_mask_ = constant "ImGuiColorEditFlags_DataTypeMask_" int64_t
    let picker_mask_ = constant "ImGuiColorEditFlags_PickerMask_" int64_t
    let input_mask_ = constant "ImGuiColorEditFlags_InputMask_" int64_t
    
    let t : t typ =
      enum "ImGuiColorEditFlags_" ~typedef:true
        [(None, none);
         (NoAlpha, no_alpha);
         (NoPicker, no_picker);
         (NoOptions, no_options);
         (NoSmallPreview, no_small_preview);
         (NoInputs, no_inputs);
         (NoTooltip, no_tooltip);
         (NoLabel, no_label);
         (NoSidePreview, no_side_preview);
         (NoDragDrop, no_drag_drop);
         (NoBorder, no_border);
         (AlphaBar, alpha_bar);
         (AlphaPreview, alpha_preview);
         (AlphaPreviewHalf, alpha_preview_half);
         (HDR, hdr);
         (DisplayRGB, display_rgb);
         (DisplayHSV, display_hsv);
         (DisplayHex, display_hex);
         (Uint8, uint8);
         (Float, float);
         (PickerHueBar, picker_hue_bar);
         (PickerHueWheel, picker_hue_wheel);
         (InputRGB, input_rgb);
         (InputHSV, input_hsv);
         (DefaultOptions_, default_options_);
         (DisplayMask_, display_mask_);
         (DataTypeMask_, data_type_mask_);
         (PickerMask_, picker_mask_);
         (InputMask_, input_mask_)]
     
  end
  module SliderFlags = struct
    type t =
    | None
    | AlwaysClamp
    | Logarithmic
    | NoRoundToFormat
    | NoInput
    | InvalidMask_
    
    let none = constant "ImGuiSliderFlags_None" int64_t
    let always_clamp = constant "ImGuiSliderFlags_AlwaysClamp" int64_t
    let logarithmic = constant "ImGuiSliderFlags_Logarithmic" int64_t
    let no_round_to_format =
      constant "ImGuiSliderFlags_NoRoundToFormat" int64_t
    let no_input = constant "ImGuiSliderFlags_NoInput" int64_t
    let invalid_mask_ = constant "ImGuiSliderFlags_InvalidMask_" int64_t
    
    let t : t typ =
      enum "ImGuiSliderFlags_" ~typedef:true
        [(None, none);
         (AlwaysClamp, always_clamp);
         (Logarithmic, logarithmic);
         (NoRoundToFormat, no_round_to_format);
         (NoInput, no_input);
         (InvalidMask_, invalid_mask_)]
     
  end
  module MouseButton = struct
    type t =
    | Left
    | Right
    | Middle
    | COUNT
    
    let left = constant "ImGuiMouseButton_Left" int64_t
    let right = constant "ImGuiMouseButton_Right" int64_t
    let middle = constant "ImGuiMouseButton_Middle" int64_t
    let count = constant "ImGuiMouseButton_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiMouseButton_" ~typedef:true
        [(Left, left); (Right, right); (Middle, middle); (COUNT, count)]
     
  end
  module MouseCursor = struct
    type t =
    | None
    | Arrow
    | TextInput
    | ResizeAll
    | ResizeNS
    | ResizeEW
    | ResizeNESW
    | ResizeNWSE
    | Hand
    | NotAllowed
    | COUNT
    
    let none = constant "ImGuiMouseCursor_None" int64_t
    let arrow = constant "ImGuiMouseCursor_Arrow" int64_t
    let text_input = constant "ImGuiMouseCursor_TextInput" int64_t
    let resize_all = constant "ImGuiMouseCursor_ResizeAll" int64_t
    let resize_n_s = constant "ImGuiMouseCursor_ResizeNS" int64_t
    let resize_e_w = constant "ImGuiMouseCursor_ResizeEW" int64_t
    let resize_n_e_s_w = constant "ImGuiMouseCursor_ResizeNESW" int64_t
    let resize_n_w_s_e = constant "ImGuiMouseCursor_ResizeNWSE" int64_t
    let hand = constant "ImGuiMouseCursor_Hand" int64_t
    let not_allowed = constant "ImGuiMouseCursor_NotAllowed" int64_t
    let count = constant "ImGuiMouseCursor_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiMouseCursor_" ~typedef:true
        [(None, none);
         (Arrow, arrow);
         (TextInput, text_input);
         (ResizeAll, resize_all);
         (ResizeNS, resize_n_s);
         (ResizeEW, resize_e_w);
         (ResizeNESW, resize_n_e_s_w);
         (ResizeNWSE, resize_n_w_s_e);
         (Hand, hand);
         (NotAllowed, not_allowed);
         (COUNT, count)]
     
  end
  module MouseSource = struct
    type t =
    | Mouse
    | TouchScreen
    | Pen
    | COUNT
    
    let mouse = constant "ImGuiMouseSource_Mouse" int64_t
    let touch_screen = constant "ImGuiMouseSource_TouchScreen" int64_t
    let pen = constant "ImGuiMouseSource_Pen" int64_t
    let count = constant "ImGuiMouseSource_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiMouseSource" ~typedef:true
        [(Mouse, mouse);
         (TouchScreen, touch_screen);
         (Pen, pen);
         (COUNT, count)]
     
  end
  module Cond = struct
    type t =
    | None
    | Always
    | Once
    | FirstUseEver
    | Appearing
    
    let none = constant "ImGuiCond_None" int64_t
    let always = constant "ImGuiCond_Always" int64_t
    let once = constant "ImGuiCond_Once" int64_t
    let first_use_ever = constant "ImGuiCond_FirstUseEver" int64_t
    let appearing = constant "ImGuiCond_Appearing" int64_t
    
    let t : t typ =
      enum "ImGuiCond_" ~typedef:true
        [(None, none);
         (Always, always);
         (Once, once);
         (FirstUseEver, first_use_ever);
         (Appearing, appearing)]
     
  end
  module TableFlags = struct
    type t =
    | None
    | Resizable
    | Reorderable
    | Hideable
    | Sortable
    | NoSavedSettings
    | ContextMenuInBody
    | RowBg
    | BordersInnerH
    | BordersOuterH
    | BordersInnerV
    | BordersOuterV
    | BordersH
    | BordersV
    | BordersInner
    | BordersOuter
    | Borders
    | NoBordersInBody
    | NoBordersInBodyUntilResize
    | SizingFixedFit
    | SizingFixedSame
    | SizingStretchProp
    | SizingStretchSame
    | NoHostExtendX
    | NoHostExtendY
    | NoKeepColumnsVisible
    | PreciseWidths
    | NoClip
    | PadOuterX
    | NoPadOuterX
    | NoPadInnerX
    | ScrollX
    | ScrollY
    | SortMulti
    | SortTristate
    | HighlightHoveredColumn
    | SizingMask_
    
    let none = constant "ImGuiTableFlags_None" int64_t
    let resizable = constant "ImGuiTableFlags_Resizable" int64_t
    let reorderable = constant "ImGuiTableFlags_Reorderable" int64_t
    let hideable = constant "ImGuiTableFlags_Hideable" int64_t
    let sortable = constant "ImGuiTableFlags_Sortable" int64_t
    let no_saved_settings = constant "ImGuiTableFlags_NoSavedSettings" int64_t
    let context_menu_in_body =
      constant "ImGuiTableFlags_ContextMenuInBody" int64_t
    let row_bg = constant "ImGuiTableFlags_RowBg" int64_t
    let borders_inner_h = constant "ImGuiTableFlags_BordersInnerH" int64_t
    let borders_outer_h = constant "ImGuiTableFlags_BordersOuterH" int64_t
    let borders_inner_v = constant "ImGuiTableFlags_BordersInnerV" int64_t
    let borders_outer_v = constant "ImGuiTableFlags_BordersOuterV" int64_t
    let borders_h = constant "ImGuiTableFlags_BordersH" int64_t
    let borders_v = constant "ImGuiTableFlags_BordersV" int64_t
    let borders_inner = constant "ImGuiTableFlags_BordersInner" int64_t
    let borders_outer = constant "ImGuiTableFlags_BordersOuter" int64_t
    let borders = constant "ImGuiTableFlags_Borders" int64_t
    let no_borders_in_body = constant "ImGuiTableFlags_NoBordersInBody" int64_t
    let no_borders_in_body_until_resize =
      constant "ImGuiTableFlags_NoBordersInBodyUntilResize" int64_t
    let sizing_fixed_fit = constant "ImGuiTableFlags_SizingFixedFit" int64_t
    let sizing_fixed_same = constant "ImGuiTableFlags_SizingFixedSame" int64_t
    let sizing_stretch_prop =
      constant "ImGuiTableFlags_SizingStretchProp" int64_t
    let sizing_stretch_same =
      constant "ImGuiTableFlags_SizingStretchSame" int64_t
    let no_host_extend_x = constant "ImGuiTableFlags_NoHostExtendX" int64_t
    let no_host_extend_y = constant "ImGuiTableFlags_NoHostExtendY" int64_t
    let no_keep_columns_visible =
      constant "ImGuiTableFlags_NoKeepColumnsVisible" int64_t
    let precise_widths = constant "ImGuiTableFlags_PreciseWidths" int64_t
    let no_clip = constant "ImGuiTableFlags_NoClip" int64_t
    let pad_outer_x = constant "ImGuiTableFlags_PadOuterX" int64_t
    let no_pad_outer_x = constant "ImGuiTableFlags_NoPadOuterX" int64_t
    let no_pad_inner_x = constant "ImGuiTableFlags_NoPadInnerX" int64_t
    let scroll_x = constant "ImGuiTableFlags_ScrollX" int64_t
    let scroll_y = constant "ImGuiTableFlags_ScrollY" int64_t
    let sort_multi = constant "ImGuiTableFlags_SortMulti" int64_t
    let sort_tristate = constant "ImGuiTableFlags_SortTristate" int64_t
    let highlight_hovered_column =
      constant "ImGuiTableFlags_HighlightHoveredColumn" int64_t
    let sizing_mask_ = constant "ImGuiTableFlags_SizingMask_" int64_t
    
    let t : t typ =
      enum "ImGuiTableFlags_" ~typedef:true
        [(None, none);
         (Resizable, resizable);
         (Reorderable, reorderable);
         (Hideable, hideable);
         (Sortable, sortable);
         (NoSavedSettings, no_saved_settings);
         (ContextMenuInBody, context_menu_in_body);
         (RowBg, row_bg);
         (BordersInnerH, borders_inner_h);
         (BordersOuterH, borders_outer_h);
         (BordersInnerV, borders_inner_v);
         (BordersOuterV, borders_outer_v);
         (BordersH, borders_h);
         (BordersV, borders_v);
         (BordersInner, borders_inner);
         (BordersOuter, borders_outer);
         (Borders, borders);
         (NoBordersInBody, no_borders_in_body);
         (NoBordersInBodyUntilResize, no_borders_in_body_until_resize);
         (SizingFixedFit, sizing_fixed_fit);
         (SizingFixedSame, sizing_fixed_same);
         (SizingStretchProp, sizing_stretch_prop);
         (SizingStretchSame, sizing_stretch_same);
         (NoHostExtendX, no_host_extend_x);
         (NoHostExtendY, no_host_extend_y);
         (NoKeepColumnsVisible, no_keep_columns_visible);
         (PreciseWidths, precise_widths);
         (NoClip, no_clip);
         (PadOuterX, pad_outer_x);
         (NoPadOuterX, no_pad_outer_x);
         (NoPadInnerX, no_pad_inner_x);
         (ScrollX, scroll_x);
         (ScrollY, scroll_y);
         (SortMulti, sort_multi);
         (SortTristate, sort_tristate);
         (HighlightHoveredColumn, highlight_hovered_column);
         (SizingMask_, sizing_mask_)]
     
  end
  module TableColumnFlags = struct
    type t =
    | None
    | Disabled
    | DefaultHide
    | DefaultSort
    | WidthStretch
    | WidthFixed
    | NoResize
    | NoReorder
    | NoHide
    | NoClip
    | NoSort
    | NoSortAscending
    | NoSortDescending
    | NoHeaderLabel
    | NoHeaderWidth
    | PreferSortAscending
    | PreferSortDescending
    | IndentEnable
    | IndentDisable
    | AngledHeader
    | IsEnabled
    | IsVisible
    | IsSorted
    | IsHovered
    | WidthMask_
    | IndentMask_
    | StatusMask_
    | NoDirectResize_
    
    let none = constant "ImGuiTableColumnFlags_None" int64_t
    let disabled = constant "ImGuiTableColumnFlags_Disabled" int64_t
    let default_hide = constant "ImGuiTableColumnFlags_DefaultHide" int64_t
    let default_sort = constant "ImGuiTableColumnFlags_DefaultSort" int64_t
    let width_stretch = constant "ImGuiTableColumnFlags_WidthStretch" int64_t
    let width_fixed = constant "ImGuiTableColumnFlags_WidthFixed" int64_t
    let no_resize = constant "ImGuiTableColumnFlags_NoResize" int64_t
    let no_reorder = constant "ImGuiTableColumnFlags_NoReorder" int64_t
    let no_hide = constant "ImGuiTableColumnFlags_NoHide" int64_t
    let no_clip = constant "ImGuiTableColumnFlags_NoClip" int64_t
    let no_sort = constant "ImGuiTableColumnFlags_NoSort" int64_t
    let no_sort_ascending =
      constant "ImGuiTableColumnFlags_NoSortAscending" int64_t
    let no_sort_descending =
      constant "ImGuiTableColumnFlags_NoSortDescending" int64_t
    let no_header_label =
      constant "ImGuiTableColumnFlags_NoHeaderLabel" int64_t
    let no_header_width =
      constant "ImGuiTableColumnFlags_NoHeaderWidth" int64_t
    let prefer_sort_ascending =
      constant "ImGuiTableColumnFlags_PreferSortAscending" int64_t
    let prefer_sort_descending =
      constant "ImGuiTableColumnFlags_PreferSortDescending" int64_t
    let indent_enable = constant "ImGuiTableColumnFlags_IndentEnable" int64_t
    let indent_disable = constant "ImGuiTableColumnFlags_IndentDisable" int64_t
    let angled_header = constant "ImGuiTableColumnFlags_AngledHeader" int64_t
    let is_enabled = constant "ImGuiTableColumnFlags_IsEnabled" int64_t
    let is_visible = constant "ImGuiTableColumnFlags_IsVisible" int64_t
    let is_sorted = constant "ImGuiTableColumnFlags_IsSorted" int64_t
    let is_hovered = constant "ImGuiTableColumnFlags_IsHovered" int64_t
    let width_mask_ = constant "ImGuiTableColumnFlags_WidthMask_" int64_t
    let indent_mask_ = constant "ImGuiTableColumnFlags_IndentMask_" int64_t
    let status_mask_ = constant "ImGuiTableColumnFlags_StatusMask_" int64_t
    let no_direct_resize_ =
      constant "ImGuiTableColumnFlags_NoDirectResize_" int64_t
    
    let t : t typ =
      enum "ImGuiTableColumnFlags_" ~typedef:true
        [(None, none);
         (Disabled, disabled);
         (DefaultHide, default_hide);
         (DefaultSort, default_sort);
         (WidthStretch, width_stretch);
         (WidthFixed, width_fixed);
         (NoResize, no_resize);
         (NoReorder, no_reorder);
         (NoHide, no_hide);
         (NoClip, no_clip);
         (NoSort, no_sort);
         (NoSortAscending, no_sort_ascending);
         (NoSortDescending, no_sort_descending);
         (NoHeaderLabel, no_header_label);
         (NoHeaderWidth, no_header_width);
         (PreferSortAscending, prefer_sort_ascending);
         (PreferSortDescending, prefer_sort_descending);
         (IndentEnable, indent_enable);
         (IndentDisable, indent_disable);
         (AngledHeader, angled_header);
         (IsEnabled, is_enabled);
         (IsVisible, is_visible);
         (IsSorted, is_sorted);
         (IsHovered, is_hovered);
         (WidthMask_, width_mask_);
         (IndentMask_, indent_mask_);
         (StatusMask_, status_mask_);
         (NoDirectResize_, no_direct_resize_)]
     
  end
  module TableRowFlags = struct
    type t =
    | None
    | Headers
    
    let none = constant "ImGuiTableRowFlags_None" int64_t
    let headers = constant "ImGuiTableRowFlags_Headers" int64_t
    
    let t : t typ =
      enum "ImGuiTableRowFlags_" ~typedef:true
        [(None, none); (Headers, headers)]
     
  end
  module TableBgTarget = struct
    type t =
    | None
    | RowBg0
    | RowBg1
    | CellBg
    
    let none = constant "ImGuiTableBgTarget_None" int64_t
    let row_bg0 = constant "ImGuiTableBgTarget_RowBg0" int64_t
    let row_bg1 = constant "ImGuiTableBgTarget_RowBg1" int64_t
    let cell_bg = constant "ImGuiTableBgTarget_CellBg" int64_t
    
    let t : t typ =
      enum "ImGuiTableBgTarget_" ~typedef:true
        [(None, none); (RowBg0, row_bg0); (RowBg1, row_bg1); (CellBg, cell_bg)]
     
  end
  module DrawFlags = struct
    type t =
    | None
    | Closed
    | RoundCornersTopLeft
    | RoundCornersTopRight
    | RoundCornersBottomLeft
    | RoundCornersBottomRight
    | RoundCornersNone
    | RoundCornersTop
    | RoundCornersBottom
    | RoundCornersLeft
    | RoundCornersRight
    | RoundCornersAll
    | RoundCornersDefault_
    | RoundCornersMask_
    
    let none = constant "ImDrawFlags_None" int64_t
    let closed = constant "ImDrawFlags_Closed" int64_t
    let round_corners_top_left =
      constant "ImDrawFlags_RoundCornersTopLeft" int64_t
    let round_corners_top_right =
      constant "ImDrawFlags_RoundCornersTopRight" int64_t
    let round_corners_bottom_left =
      constant "ImDrawFlags_RoundCornersBottomLeft" int64_t
    let round_corners_bottom_right =
      constant "ImDrawFlags_RoundCornersBottomRight" int64_t
    let round_corners_none = constant "ImDrawFlags_RoundCornersNone" int64_t
    let round_corners_top = constant "ImDrawFlags_RoundCornersTop" int64_t
    let round_corners_bottom =
      constant "ImDrawFlags_RoundCornersBottom" int64_t
    let round_corners_left = constant "ImDrawFlags_RoundCornersLeft" int64_t
    let round_corners_right = constant "ImDrawFlags_RoundCornersRight" int64_t
    let round_corners_all = constant "ImDrawFlags_RoundCornersAll" int64_t
    let round_corners_default_ =
      constant "ImDrawFlags_RoundCornersDefault_" int64_t
    let round_corners_mask_ = constant "ImDrawFlags_RoundCornersMask_" int64_t
    
    let t : t typ =
      enum "ImDrawFlags_" ~typedef:true
        [(None, none);
         (Closed, closed);
         (RoundCornersTopLeft, round_corners_top_left);
         (RoundCornersTopRight, round_corners_top_right);
         (RoundCornersBottomLeft, round_corners_bottom_left);
         (RoundCornersBottomRight, round_corners_bottom_right);
         (RoundCornersNone, round_corners_none);
         (RoundCornersTop, round_corners_top);
         (RoundCornersBottom, round_corners_bottom);
         (RoundCornersLeft, round_corners_left);
         (RoundCornersRight, round_corners_right);
         (RoundCornersAll, round_corners_all);
         (RoundCornersDefault_, round_corners_default_);
         (RoundCornersMask_, round_corners_mask_)]
     
  end
  module DrawListFlags = struct
    type t =
    | None
    | AntiAliasedLines
    | AntiAliasedLinesUseTex
    | AntiAliasedFill
    | AllowVtxOffset
    
    let none = constant "ImDrawListFlags_None" int64_t
    let anti_aliased_lines =
      constant "ImDrawListFlags_AntiAliasedLines" int64_t
    let anti_aliased_lines_use_tex =
      constant "ImDrawListFlags_AntiAliasedLinesUseTex" int64_t
    let anti_aliased_fill = constant "ImDrawListFlags_AntiAliasedFill" int64_t
    let allow_vtx_offset = constant "ImDrawListFlags_AllowVtxOffset" int64_t
    
    let t : t typ =
      enum "ImDrawListFlags_" ~typedef:true
        [(None, none);
         (AntiAliasedLines, anti_aliased_lines);
         (AntiAliasedLinesUseTex, anti_aliased_lines_use_tex);
         (AntiAliasedFill, anti_aliased_fill);
         (AllowVtxOffset, allow_vtx_offset)]
     
  end
  module FontAtlasFlags = struct
    type t =
    | None
    | NoPowerOfTwoHeight
    | NoMouseCursors
    | NoBakedLines
    
    let none = constant "ImFontAtlasFlags_None" int64_t
    let no_power_of_two_height =
      constant "ImFontAtlasFlags_NoPowerOfTwoHeight" int64_t
    let no_mouse_cursors = constant "ImFontAtlasFlags_NoMouseCursors" int64_t
    let no_baked_lines = constant "ImFontAtlasFlags_NoBakedLines" int64_t
    
    let t : t typ =
      enum "ImFontAtlasFlags_" ~typedef:true
        [(None, none);
         (NoPowerOfTwoHeight, no_power_of_two_height);
         (NoMouseCursors, no_mouse_cursors);
         (NoBakedLines, no_baked_lines)]
     
  end
  module ViewportFlags = struct
    type t =
    | None
    | IsPlatformWindow
    | IsPlatformMonitor
    | OwnedByApp
    | NoDecoration
    | NoTaskBarIcon
    | NoFocusOnAppearing
    | NoFocusOnClick
    | NoInputs
    | NoRendererClear
    | NoAutoMerge
    | TopMost
    | CanHostOtherWindows
    | IsMinimized
    | IsFocused
    
    let none = constant "ImGuiViewportFlags_None" int64_t
    let is_platform_window =
      constant "ImGuiViewportFlags_IsPlatformWindow" int64_t
    let is_platform_monitor =
      constant "ImGuiViewportFlags_IsPlatformMonitor" int64_t
    let owned_by_app = constant "ImGuiViewportFlags_OwnedByApp" int64_t
    let no_decoration = constant "ImGuiViewportFlags_NoDecoration" int64_t
    let no_task_bar_icon = constant "ImGuiViewportFlags_NoTaskBarIcon" int64_t
    let no_focus_on_appearing =
      constant "ImGuiViewportFlags_NoFocusOnAppearing" int64_t
    let no_focus_on_click =
      constant "ImGuiViewportFlags_NoFocusOnClick" int64_t
    let no_inputs = constant "ImGuiViewportFlags_NoInputs" int64_t
    let no_renderer_clear =
      constant "ImGuiViewportFlags_NoRendererClear" int64_t
    let no_auto_merge = constant "ImGuiViewportFlags_NoAutoMerge" int64_t
    let top_most = constant "ImGuiViewportFlags_TopMost" int64_t
    let can_host_other_windows =
      constant "ImGuiViewportFlags_CanHostOtherWindows" int64_t
    let is_minimized = constant "ImGuiViewportFlags_IsMinimized" int64_t
    let is_focused = constant "ImGuiViewportFlags_IsFocused" int64_t
    
    let t : t typ =
      enum "ImGuiViewportFlags_" ~typedef:true
        [(None, none);
         (IsPlatformWindow, is_platform_window);
         (IsPlatformMonitor, is_platform_monitor);
         (OwnedByApp, owned_by_app);
         (NoDecoration, no_decoration);
         (NoTaskBarIcon, no_task_bar_icon);
         (NoFocusOnAppearing, no_focus_on_appearing);
         (NoFocusOnClick, no_focus_on_click);
         (NoInputs, no_inputs);
         (NoRendererClear, no_renderer_clear);
         (NoAutoMerge, no_auto_merge);
         (TopMost, top_most);
         (CanHostOtherWindows, can_host_other_windows);
         (IsMinimized, is_minimized);
         (IsFocused, is_focused)]
     
  end
  module ItemFlags = struct
    type t =
    | None
    | NoTabStop
    | ButtonRepeat
    | Disabled
    | NoNav
    | NoNavDefaultFocus
    | SelectableDontClosePopup
    | MixedValue
    | ReadOnly
    | NoWindowHoverableCheck
    | AllowOverlap
    | Inputable
    | HasSelectionUserData
    
    let none = constant "ImGuiItemFlags_None" int64_t
    let no_tab_stop = constant "ImGuiItemFlags_NoTabStop" int64_t
    let button_repeat = constant "ImGuiItemFlags_ButtonRepeat" int64_t
    let disabled = constant "ImGuiItemFlags_Disabled" int64_t
    let no_nav = constant "ImGuiItemFlags_NoNav" int64_t
    let no_nav_default_focus =
      constant "ImGuiItemFlags_NoNavDefaultFocus" int64_t
    let selectable_dont_close_popup =
      constant "ImGuiItemFlags_SelectableDontClosePopup" int64_t
    let mixed_value = constant "ImGuiItemFlags_MixedValue" int64_t
    let read_only = constant "ImGuiItemFlags_ReadOnly" int64_t
    let no_window_hoverable_check =
      constant "ImGuiItemFlags_NoWindowHoverableCheck" int64_t
    let allow_overlap = constant "ImGuiItemFlags_AllowOverlap" int64_t
    let inputable = constant "ImGuiItemFlags_Inputable" int64_t
    let has_selection_user_data =
      constant "ImGuiItemFlags_HasSelectionUserData" int64_t
    
    let t : t typ =
      enum "ImGuiItemFlags_" ~typedef:true
        [(None, none);
         (NoTabStop, no_tab_stop);
         (ButtonRepeat, button_repeat);
         (Disabled, disabled);
         (NoNav, no_nav);
         (NoNavDefaultFocus, no_nav_default_focus);
         (SelectableDontClosePopup, selectable_dont_close_popup);
         (MixedValue, mixed_value);
         (ReadOnly, read_only);
         (NoWindowHoverableCheck, no_window_hoverable_check);
         (AllowOverlap, allow_overlap);
         (Inputable, inputable);
         (HasSelectionUserData, has_selection_user_data)]
     
  end
  module ItemStatusFlags = struct
    type t =
    | None
    | HoveredRect
    | HasDisplayRect
    | Edited
    | ToggledSelection
    | ToggledOpen
    | HasDeactivated
    | Deactivated
    | HoveredWindow
    | Visible
    | HasClipRect
    
    let none = constant "ImGuiItemStatusFlags_None" int64_t
    let hovered_rect = constant "ImGuiItemStatusFlags_HoveredRect" int64_t
    let has_display_rect =
      constant "ImGuiItemStatusFlags_HasDisplayRect" int64_t
    let edited = constant "ImGuiItemStatusFlags_Edited" int64_t
    let toggled_selection =
      constant "ImGuiItemStatusFlags_ToggledSelection" int64_t
    let toggled_open = constant "ImGuiItemStatusFlags_ToggledOpen" int64_t
    let has_deactivated =
      constant "ImGuiItemStatusFlags_HasDeactivated" int64_t
    let deactivated = constant "ImGuiItemStatusFlags_Deactivated" int64_t
    let hovered_window = constant "ImGuiItemStatusFlags_HoveredWindow" int64_t
    let visible = constant "ImGuiItemStatusFlags_Visible" int64_t
    let has_clip_rect = constant "ImGuiItemStatusFlags_HasClipRect" int64_t
    
    let t : t typ =
      enum "ImGuiItemStatusFlags_" ~typedef:true
        [(None, none);
         (HoveredRect, hovered_rect);
         (HasDisplayRect, has_display_rect);
         (Edited, edited);
         (ToggledSelection, toggled_selection);
         (ToggledOpen, toggled_open);
         (HasDeactivated, has_deactivated);
         (Deactivated, deactivated);
         (HoveredWindow, hovered_window);
         (Visible, visible);
         (HasClipRect, has_clip_rect)]
     
  end
  module HoveredFlagsPrivate = struct
    type t =
    | DelayMask_
    | AllowedMaskForIsWindowHovered
    | AllowedMaskForIsItemHovered
    
    let delay_mask_ = constant "ImGuiHoveredFlags_DelayMask_" int64_t
    let allowed_mask_for_is_window_hovered =
      constant "ImGuiHoveredFlags_AllowedMaskForIsWindowHovered" int64_t
    let allowed_mask_for_is_item_hovered =
      constant "ImGuiHoveredFlags_AllowedMaskForIsItemHovered" int64_t
    
    let t : t typ =
      enum "ImGuiHoveredFlagsPrivate_" ~typedef:true
        [(DelayMask_, delay_mask_);
         (AllowedMaskForIsWindowHovered, allowed_mask_for_is_window_hovered);
         (AllowedMaskForIsItemHovered, allowed_mask_for_is_item_hovered)]
     
  end
  module InputTextFlagsPrivate = struct
    type t =
    | Multiline
    | NoMarkEdited
    | MergedItem
    | LocalizeDecimalPoint
    
    let multiline = constant "ImGuiInputTextFlags_Multiline" int64_t
    let no_mark_edited = constant "ImGuiInputTextFlags_NoMarkEdited" int64_t
    let merged_item = constant "ImGuiInputTextFlags_MergedItem" int64_t
    let localize_decimal_point =
      constant "ImGuiInputTextFlags_LocalizeDecimalPoint" int64_t
    
    let t : t typ =
      enum "ImGuiInputTextFlagsPrivate_" ~typedef:true
        [(Multiline, multiline);
         (NoMarkEdited, no_mark_edited);
         (MergedItem, merged_item);
         (LocalizeDecimalPoint, localize_decimal_point)]
     
  end
  module ButtonFlagsPrivate = struct
    type t =
    | PressedOnClick
    | PressedOnClickRelease
    | PressedOnClickReleaseAnywhere
    | PressedOnRelease
    | PressedOnDoubleClick
    | PressedOnDragDropHold
    | Repeat
    | FlattenChildren
    | AllowOverlap
    | DontClosePopups
    | AlignTextBaseLine
    | NoKeyModifiers
    | NoHoldingActiveId
    | NoNavFocus
    | NoHoveredOnFocus
    | NoSetKeyOwner
    | NoTestKeyOwner
    | PressedOnMask_
    | PressedOnDefault_
    
    let pressed_on_click = constant "ImGuiButtonFlags_PressedOnClick" int64_t
    let pressed_on_click_release =
      constant "ImGuiButtonFlags_PressedOnClickRelease" int64_t
    let pressed_on_click_release_anywhere =
      constant "ImGuiButtonFlags_PressedOnClickReleaseAnywhere" int64_t
    let pressed_on_release =
      constant "ImGuiButtonFlags_PressedOnRelease" int64_t
    let pressed_on_double_click =
      constant "ImGuiButtonFlags_PressedOnDoubleClick" int64_t
    let pressed_on_drag_drop_hold =
      constant "ImGuiButtonFlags_PressedOnDragDropHold" int64_t
    let repeat = constant "ImGuiButtonFlags_Repeat" int64_t
    let flatten_children = constant "ImGuiButtonFlags_FlattenChildren" int64_t
    let allow_overlap = constant "ImGuiButtonFlags_AllowOverlap" int64_t
    let dont_close_popups = constant "ImGuiButtonFlags_DontClosePopups" int64_t
    let align_text_base_line =
      constant "ImGuiButtonFlags_AlignTextBaseLine" int64_t
    let no_key_modifiers = constant "ImGuiButtonFlags_NoKeyModifiers" int64_t
    let no_holding_active_id =
      constant "ImGuiButtonFlags_NoHoldingActiveId" int64_t
    let no_nav_focus = constant "ImGuiButtonFlags_NoNavFocus" int64_t
    let no_hovered_on_focus =
      constant "ImGuiButtonFlags_NoHoveredOnFocus" int64_t
    let no_set_key_owner = constant "ImGuiButtonFlags_NoSetKeyOwner" int64_t
    let no_test_key_owner = constant "ImGuiButtonFlags_NoTestKeyOwner" int64_t
    let pressed_on_mask_ = constant "ImGuiButtonFlags_PressedOnMask_" int64_t
    let pressed_on_default_ =
      constant "ImGuiButtonFlags_PressedOnDefault_" int64_t
    
    let t : t typ =
      enum "ImGuiButtonFlagsPrivate_" ~typedef:true
        [(PressedOnClick, pressed_on_click);
         (PressedOnClickRelease, pressed_on_click_release);
         (PressedOnClickReleaseAnywhere, pressed_on_click_release_anywhere);
         (PressedOnRelease, pressed_on_release);
         (PressedOnDoubleClick, pressed_on_double_click);
         (PressedOnDragDropHold, pressed_on_drag_drop_hold);
         (Repeat, repeat);
         (FlattenChildren, flatten_children);
         (AllowOverlap, allow_overlap);
         (DontClosePopups, dont_close_popups);
         (AlignTextBaseLine, align_text_base_line);
         (NoKeyModifiers, no_key_modifiers);
         (NoHoldingActiveId, no_holding_active_id);
         (NoNavFocus, no_nav_focus);
         (NoHoveredOnFocus, no_hovered_on_focus);
         (NoSetKeyOwner, no_set_key_owner);
         (NoTestKeyOwner, no_test_key_owner);
         (PressedOnMask_, pressed_on_mask_);
         (PressedOnDefault_, pressed_on_default_)]
     
  end
  module ComboFlagsPrivate = struct
    type t =
    | CustomPreview
    
    let custom_preview = constant "ImGuiComboFlags_CustomPreview" int64_t
    
    let t : t typ =
      enum "ImGuiComboFlagsPrivate_" ~typedef:true
        [(CustomPreview, custom_preview)]
     
  end
  module SliderFlagsPrivate = struct
    type t =
    | Vertical
    | ReadOnly
    
    let vertical = constant "ImGuiSliderFlags_Vertical" int64_t
    let read_only = constant "ImGuiSliderFlags_ReadOnly" int64_t
    
    let t : t typ =
      enum "ImGuiSliderFlagsPrivate_" ~typedef:true
        [(Vertical, vertical); (ReadOnly, read_only)]
     
  end
  module SelectableFlagsPrivate = struct
    type t =
    | NoHoldingActiveID
    | SelectOnNav
    | SelectOnClick
    | SelectOnRelease
    | SpanAvailWidth
    | SetNavIdOnHover
    | NoPadWithHalfSpacing
    | NoSetKeyOwner
    
    let no_holding_active_id =
      constant "ImGuiSelectableFlags_NoHoldingActiveID" int64_t
    let select_on_nav = constant "ImGuiSelectableFlags_SelectOnNav" int64_t
    let select_on_click = constant "ImGuiSelectableFlags_SelectOnClick" int64_t
    let select_on_release =
      constant "ImGuiSelectableFlags_SelectOnRelease" int64_t
    let span_avail_width =
      constant "ImGuiSelectableFlags_SpanAvailWidth" int64_t
    let set_nav_id_on_hover =
      constant "ImGuiSelectableFlags_SetNavIdOnHover" int64_t
    let no_pad_with_half_spacing =
      constant "ImGuiSelectableFlags_NoPadWithHalfSpacing" int64_t
    let no_set_key_owner =
      constant "ImGuiSelectableFlags_NoSetKeyOwner" int64_t
    
    let t : t typ =
      enum "ImGuiSelectableFlagsPrivate_" ~typedef:true
        [(NoHoldingActiveID, no_holding_active_id);
         (SelectOnNav, select_on_nav);
         (SelectOnClick, select_on_click);
         (SelectOnRelease, select_on_release);
         (SpanAvailWidth, span_avail_width);
         (SetNavIdOnHover, set_nav_id_on_hover);
         (NoPadWithHalfSpacing, no_pad_with_half_spacing);
         (NoSetKeyOwner, no_set_key_owner)]
     
  end
  module TreeNodeFlagsPrivate = struct
    type t =
    | ClipLabelForTrailingButton
    | UpsideDownArrow
    
    let clip_label_for_trailing_button =
      constant "ImGuiTreeNodeFlags_ClipLabelForTrailingButton" int64_t
    let upside_down_arrow =
      constant "ImGuiTreeNodeFlags_UpsideDownArrow" int64_t
    
    let t : t typ =
      enum "ImGuiTreeNodeFlagsPrivate_" ~typedef:true
        [(ClipLabelForTrailingButton, clip_label_for_trailing_button);
         (UpsideDownArrow, upside_down_arrow)]
     
  end
  module SeparatorFlags = struct
    type t =
    | None
    | Horizontal
    | Vertical
    | SpanAllColumns
    
    let none = constant "ImGuiSeparatorFlags_None" int64_t
    let horizontal = constant "ImGuiSeparatorFlags_Horizontal" int64_t
    let vertical = constant "ImGuiSeparatorFlags_Vertical" int64_t
    let span_all_columns =
      constant "ImGuiSeparatorFlags_SpanAllColumns" int64_t
    
    let t : t typ =
      enum "ImGuiSeparatorFlags_" ~typedef:true
        [(None, none);
         (Horizontal, horizontal);
         (Vertical, vertical);
         (SpanAllColumns, span_all_columns)]
     
  end
  module FocusRequestFlags = struct
    type t =
    | None
    | RestoreFocusedChild
    | UnlessBelowModal
    
    let none = constant "ImGuiFocusRequestFlags_None" int64_t
    let restore_focused_child =
      constant "ImGuiFocusRequestFlags_RestoreFocusedChild" int64_t
    let unless_below_modal =
      constant "ImGuiFocusRequestFlags_UnlessBelowModal" int64_t
    
    let t : t typ =
      enum "ImGuiFocusRequestFlags_" ~typedef:true
        [(None, none);
         (RestoreFocusedChild, restore_focused_child);
         (UnlessBelowModal, unless_below_modal)]
     
  end
  module TextFlags = struct
    type t =
    | None
    | NoWidthForLargeClippedText
    
    let none = constant "ImGuiTextFlags_None" int64_t
    let no_width_for_large_clipped_text =
      constant "ImGuiTextFlags_NoWidthForLargeClippedText" int64_t
    
    let t : t typ =
      enum "ImGuiTextFlags_" ~typedef:true
        [(None, none);
         (NoWidthForLargeClippedText, no_width_for_large_clipped_text)]
     
  end
  module TooltipFlags = struct
    type t =
    | None
    | OverridePrevious
    
    let none = constant "ImGuiTooltipFlags_None" int64_t
    let override_previous =
      constant "ImGuiTooltipFlags_OverridePrevious" int64_t
    
    let t : t typ =
      enum "ImGuiTooltipFlags_" ~typedef:true
        [(None, none); (OverridePrevious, override_previous)]
     
  end
  module LayoutType = struct
    type t =
    | Horizontal
    | Vertical
    
    let horizontal = constant "ImGuiLayoutType_Horizontal" int64_t
    let vertical = constant "ImGuiLayoutType_Vertical" int64_t
    
    let t : t typ =
      enum "ImGuiLayoutType_" ~typedef:true
        [(Horizontal, horizontal); (Vertical, vertical)]
     
  end
  module LogType = struct
    type t =
    | None
    | TTY
    | File
    | Buffer
    | Clipboard
    
    let none = constant "ImGuiLogType_None" int64_t
    let tty = constant "ImGuiLogType_TTY" int64_t
    let file = constant "ImGuiLogType_File" int64_t
    let buffer = constant "ImGuiLogType_Buffer" int64_t
    let clipboard = constant "ImGuiLogType_Clipboard" int64_t
    
    let t : t typ =
      enum "ImGuiLogType" ~typedef:true
        [(None, none);
         (TTY, tty);
         (File, file);
         (Buffer, buffer);
         (Clipboard, clipboard)]
     
  end
  module Axis = struct
    type t =
    | None
    | X
    | Y
    
    let none = constant "ImGuiAxis_None" int64_t
    let x = constant "ImGuiAxis_X" int64_t
    let y = constant "ImGuiAxis_Y" int64_t
    
    let t : t typ =
      enum "ImGuiAxis" ~typedef:true [(None, none); (X, x); (Y, y)]
     
  end
  module PlotType = struct
    type t =
    | Lines
    | Histogram
    
    let lines = constant "ImGuiPlotType_Lines" int64_t
    let histogram = constant "ImGuiPlotType_Histogram" int64_t
    
    let t : t typ =
      enum "ImGuiPlotType" ~typedef:true
        [(Lines, lines); (Histogram, histogram)]
     
  end
  module WindowRefreshFlags = struct
    type t =
    | None
    | TryToAvoidRefresh
    | RefreshOnHover
    | RefreshOnFocus
    
    let none = constant "ImGuiWindowRefreshFlags_None" int64_t
    let try_to_avoid_refresh =
      constant "ImGuiWindowRefreshFlags_TryToAvoidRefresh" int64_t
    let refresh_on_hover =
      constant "ImGuiWindowRefreshFlags_RefreshOnHover" int64_t
    let refresh_on_focus =
      constant "ImGuiWindowRefreshFlags_RefreshOnFocus" int64_t
    
    let t : t typ =
      enum "ImGuiWindowRefreshFlags_" ~typedef:true
        [(None, none);
         (TryToAvoidRefresh, try_to_avoid_refresh);
         (RefreshOnHover, refresh_on_hover);
         (RefreshOnFocus, refresh_on_focus)]
     
  end
  module NextWindowDataFlags = struct
    type t =
    | None
    | HasPos
    | HasSize
    | HasContentSize
    | HasCollapsed
    | HasSizeConstraint
    | HasFocus
    | HasBgAlpha
    | HasScroll
    | HasChildFlags
    | HasRefreshPolicy
    | HasViewport
    | HasDock
    | HasWindowClass
    
    let none = constant "ImGuiNextWindowDataFlags_None" int64_t
    let has_pos = constant "ImGuiNextWindowDataFlags_HasPos" int64_t
    let has_size = constant "ImGuiNextWindowDataFlags_HasSize" int64_t
    let has_content_size =
      constant "ImGuiNextWindowDataFlags_HasContentSize" int64_t
    let has_collapsed =
      constant "ImGuiNextWindowDataFlags_HasCollapsed" int64_t
    let has_size_constraint =
      constant "ImGuiNextWindowDataFlags_HasSizeConstraint" int64_t
    let has_focus = constant "ImGuiNextWindowDataFlags_HasFocus" int64_t
    let has_bg_alpha = constant "ImGuiNextWindowDataFlags_HasBgAlpha" int64_t
    let has_scroll = constant "ImGuiNextWindowDataFlags_HasScroll" int64_t
    let has_child_flags =
      constant "ImGuiNextWindowDataFlags_HasChildFlags" int64_t
    let has_refresh_policy =
      constant "ImGuiNextWindowDataFlags_HasRefreshPolicy" int64_t
    let has_viewport = constant "ImGuiNextWindowDataFlags_HasViewport" int64_t
    let has_dock = constant "ImGuiNextWindowDataFlags_HasDock" int64_t
    let has_window_class =
      constant "ImGuiNextWindowDataFlags_HasWindowClass" int64_t
    
    let t : t typ =
      enum "ImGuiNextWindowDataFlags_" ~typedef:true
        [(None, none);
         (HasPos, has_pos);
         (HasSize, has_size);
         (HasContentSize, has_content_size);
         (HasCollapsed, has_collapsed);
         (HasSizeConstraint, has_size_constraint);
         (HasFocus, has_focus);
         (HasBgAlpha, has_bg_alpha);
         (HasScroll, has_scroll);
         (HasChildFlags, has_child_flags);
         (HasRefreshPolicy, has_refresh_policy);
         (HasViewport, has_viewport);
         (HasDock, has_dock);
         (HasWindowClass, has_window_class)]
     
  end
  module NextItemDataFlags = struct
    type t =
    | None
    | HasWidth
    | HasOpen
    | HasShortcut
    
    let none = constant "ImGuiNextItemDataFlags_None" int64_t
    let has_width = constant "ImGuiNextItemDataFlags_HasWidth" int64_t
    let has_open = constant "ImGuiNextItemDataFlags_HasOpen" int64_t
    let has_shortcut = constant "ImGuiNextItemDataFlags_HasShortcut" int64_t
    
    let t : t typ =
      enum "ImGuiNextItemDataFlags_" ~typedef:true
        [(None, none);
         (HasWidth, has_width);
         (HasOpen, has_open);
         (HasShortcut, has_shortcut)]
     
  end
  module DataTypePrivate = struct
    type t =
    | String
    | Pointer
    | ID
    
    let string = constant "ImGuiDataType_String" int64_t
    let pointer = constant "ImGuiDataType_Pointer" int64_t
    let id = constant "ImGuiDataType_ID" int64_t
    
    let t : t typ =
      enum "ImGuiDataTypePrivate_" ~typedef:true
        [(String, string); (Pointer, pointer); (ID, id)]
     
  end
  module PopupPositionPolicy = struct
    type t =
    | Default
    | ComboBox
    | Tooltip
    
    let default = constant "ImGuiPopupPositionPolicy_Default" int64_t
    let combo_box = constant "ImGuiPopupPositionPolicy_ComboBox" int64_t
    let tooltip = constant "ImGuiPopupPositionPolicy_Tooltip" int64_t
    
    let t : t typ =
      enum "ImGuiPopupPositionPolicy" ~typedef:true
        [(Default, default); (ComboBox, combo_box); (Tooltip, tooltip)]
     
  end
  module InputEventType = struct
    type t =
    | None
    | MousePos
    | MouseWheel
    | MouseButton
    | MouseViewport
    | Key
    | Text
    | Focus
    | COUNT
    
    let none = constant "ImGuiInputEventType_None" int64_t
    let mouse_pos = constant "ImGuiInputEventType_MousePos" int64_t
    let mouse_wheel = constant "ImGuiInputEventType_MouseWheel" int64_t
    let mouse_button = constant "ImGuiInputEventType_MouseButton" int64_t
    let mouse_viewport = constant "ImGuiInputEventType_MouseViewport" int64_t
    let key = constant "ImGuiInputEventType_Key" int64_t
    let text = constant "ImGuiInputEventType_Text" int64_t
    let focus = constant "ImGuiInputEventType_Focus" int64_t
    let count = constant "ImGuiInputEventType_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiInputEventType" ~typedef:true
        [(None, none);
         (MousePos, mouse_pos);
         (MouseWheel, mouse_wheel);
         (MouseButton, mouse_button);
         (MouseViewport, mouse_viewport);
         (Key, key);
         (Text, text);
         (Focus, focus);
         (COUNT, count)]
     
  end
  module InputSource = struct
    type t =
    | None
    | Mouse
    | Keyboard
    | Gamepad
    | COUNT
    
    let none = constant "ImGuiInputSource_None" int64_t
    let mouse = constant "ImGuiInputSource_Mouse" int64_t
    let keyboard = constant "ImGuiInputSource_Keyboard" int64_t
    let gamepad = constant "ImGuiInputSource_Gamepad" int64_t
    let count = constant "ImGuiInputSource_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiInputSource" ~typedef:true
        [(None, none);
         (Mouse, mouse);
         (Keyboard, keyboard);
         (Gamepad, gamepad);
         (COUNT, count)]
     
  end
  module InputFlags = struct
    type t =
    | None
    | Repeat
    | RepeatRateDefault
    | RepeatRateNavMove
    | RepeatRateNavTweak
    | RepeatUntilRelease
    | RepeatUntilKeyModsChange
    | RepeatUntilKeyModsChangeFromNone
    | RepeatUntilOtherKeyPress
    | CondHovered
    | CondActive
    | CondDefault_
    | LockThisFrame
    | LockUntilRelease
    | RouteFocused
    | RouteGlobalLow
    | RouteGlobal
    | RouteGlobalHigh
    | RouteAlways
    | RouteUnlessBgFocused
    | RepeatRateMask_
    | RepeatUntilMask_
    | RepeatMask_
    | CondMask_
    | RouteMask_
    | SupportedByIsKeyPressed
    | SupportedByIsMouseClicked
    | SupportedByShortcut
    | SupportedBySetKeyOwner
    | SupportedBySetItemKeyOwner
    
    let none = constant "ImGuiInputFlags_None" int64_t
    let repeat = constant "ImGuiInputFlags_Repeat" int64_t
    let repeat_rate_default =
      constant "ImGuiInputFlags_RepeatRateDefault" int64_t
    let repeat_rate_nav_move =
      constant "ImGuiInputFlags_RepeatRateNavMove" int64_t
    let repeat_rate_nav_tweak =
      constant "ImGuiInputFlags_RepeatRateNavTweak" int64_t
    let repeat_until_release =
      constant "ImGuiInputFlags_RepeatUntilRelease" int64_t
    let repeat_until_key_mods_change =
      constant "ImGuiInputFlags_RepeatUntilKeyModsChange" int64_t
    let repeat_until_key_mods_change_from_none =
      constant "ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone" int64_t
    let repeat_until_other_key_press =
      constant "ImGuiInputFlags_RepeatUntilOtherKeyPress" int64_t
    let cond_hovered = constant "ImGuiInputFlags_CondHovered" int64_t
    let cond_active = constant "ImGuiInputFlags_CondActive" int64_t
    let cond_default_ = constant "ImGuiInputFlags_CondDefault_" int64_t
    let lock_this_frame = constant "ImGuiInputFlags_LockThisFrame" int64_t
    let lock_until_release =
      constant "ImGuiInputFlags_LockUntilRelease" int64_t
    let route_focused = constant "ImGuiInputFlags_RouteFocused" int64_t
    let route_global_low = constant "ImGuiInputFlags_RouteGlobalLow" int64_t
    let route_global = constant "ImGuiInputFlags_RouteGlobal" int64_t
    let route_global_high = constant "ImGuiInputFlags_RouteGlobalHigh" int64_t
    let route_always = constant "ImGuiInputFlags_RouteAlways" int64_t
    let route_unless_bg_focused =
      constant "ImGuiInputFlags_RouteUnlessBgFocused" int64_t
    let repeat_rate_mask_ = constant "ImGuiInputFlags_RepeatRateMask_" int64_t
    let repeat_until_mask_ =
      constant "ImGuiInputFlags_RepeatUntilMask_" int64_t
    let repeat_mask_ = constant "ImGuiInputFlags_RepeatMask_" int64_t
    let cond_mask_ = constant "ImGuiInputFlags_CondMask_" int64_t
    let route_mask_ = constant "ImGuiInputFlags_RouteMask_" int64_t
    let supported_by_is_key_pressed =
      constant "ImGuiInputFlags_SupportedByIsKeyPressed" int64_t
    let supported_by_is_mouse_clicked =
      constant "ImGuiInputFlags_SupportedByIsMouseClicked" int64_t
    let supported_by_shortcut =
      constant "ImGuiInputFlags_SupportedByShortcut" int64_t
    let supported_by_set_key_owner =
      constant "ImGuiInputFlags_SupportedBySetKeyOwner" int64_t
    let supported_by_set_item_key_owner =
      constant "ImGuiInputFlags_SupportedBySetItemKeyOwner" int64_t
    
    let t : t typ =
      enum "ImGuiInputFlags_" ~typedef:true
        [(None, none);
         (Repeat, repeat);
         (RepeatRateDefault, repeat_rate_default);
         (RepeatRateNavMove, repeat_rate_nav_move);
         (RepeatRateNavTweak, repeat_rate_nav_tweak);
         (RepeatUntilRelease, repeat_until_release);
         (RepeatUntilKeyModsChange, repeat_until_key_mods_change);
         (RepeatUntilKeyModsChangeFromNone, repeat_until_key_mods_change_from_none);
         (RepeatUntilOtherKeyPress, repeat_until_other_key_press);
         (CondHovered, cond_hovered);
         (CondActive, cond_active);
         (CondDefault_, cond_default_);
         (LockThisFrame, lock_this_frame);
         (LockUntilRelease, lock_until_release);
         (RouteFocused, route_focused);
         (RouteGlobalLow, route_global_low);
         (RouteGlobal, route_global);
         (RouteGlobalHigh, route_global_high);
         (RouteAlways, route_always);
         (RouteUnlessBgFocused, route_unless_bg_focused);
         (RepeatRateMask_, repeat_rate_mask_);
         (RepeatUntilMask_, repeat_until_mask_);
         (RepeatMask_, repeat_mask_);
         (CondMask_, cond_mask_);
         (RouteMask_, route_mask_);
         (SupportedByIsKeyPressed, supported_by_is_key_pressed);
         (SupportedByIsMouseClicked, supported_by_is_mouse_clicked);
         (SupportedByShortcut, supported_by_shortcut);
         (SupportedBySetKeyOwner, supported_by_set_key_owner);
         (SupportedBySetItemKeyOwner, supported_by_set_item_key_owner)]
     
  end
  module ActivateFlags = struct
    type t =
    | None
    | PreferInput
    | PreferTweak
    | TryToPreserveState
    | FromTabbing
    | FromShortcut
    
    let none = constant "ImGuiActivateFlags_None" int64_t
    let prefer_input = constant "ImGuiActivateFlags_PreferInput" int64_t
    let prefer_tweak = constant "ImGuiActivateFlags_PreferTweak" int64_t
    let try_to_preserve_state =
      constant "ImGuiActivateFlags_TryToPreserveState" int64_t
    let from_tabbing = constant "ImGuiActivateFlags_FromTabbing" int64_t
    let from_shortcut = constant "ImGuiActivateFlags_FromShortcut" int64_t
    
    let t : t typ =
      enum "ImGuiActivateFlags_" ~typedef:true
        [(None, none);
         (PreferInput, prefer_input);
         (PreferTweak, prefer_tweak);
         (TryToPreserveState, try_to_preserve_state);
         (FromTabbing, from_tabbing);
         (FromShortcut, from_shortcut)]
     
  end
  module ScrollFlags = struct
    type t =
    | None
    | KeepVisibleEdgeX
    | KeepVisibleEdgeY
    | KeepVisibleCenterX
    | KeepVisibleCenterY
    | AlwaysCenterX
    | AlwaysCenterY
    | NoScrollParent
    | MaskX_
    | MaskY_
    
    let none = constant "ImGuiScrollFlags_None" int64_t
    let keep_visible_edge_x =
      constant "ImGuiScrollFlags_KeepVisibleEdgeX" int64_t
    let keep_visible_edge_y =
      constant "ImGuiScrollFlags_KeepVisibleEdgeY" int64_t
    let keep_visible_center_x =
      constant "ImGuiScrollFlags_KeepVisibleCenterX" int64_t
    let keep_visible_center_y =
      constant "ImGuiScrollFlags_KeepVisibleCenterY" int64_t
    let always_center_x = constant "ImGuiScrollFlags_AlwaysCenterX" int64_t
    let always_center_y = constant "ImGuiScrollFlags_AlwaysCenterY" int64_t
    let no_scroll_parent = constant "ImGuiScrollFlags_NoScrollParent" int64_t
    let mask_x_ = constant "ImGuiScrollFlags_MaskX_" int64_t
    let mask_y_ = constant "ImGuiScrollFlags_MaskY_" int64_t
    
    let t : t typ =
      enum "ImGuiScrollFlags_" ~typedef:true
        [(None, none);
         (KeepVisibleEdgeX, keep_visible_edge_x);
         (KeepVisibleEdgeY, keep_visible_edge_y);
         (KeepVisibleCenterX, keep_visible_center_x);
         (KeepVisibleCenterY, keep_visible_center_y);
         (AlwaysCenterX, always_center_x);
         (AlwaysCenterY, always_center_y);
         (NoScrollParent, no_scroll_parent);
         (MaskX_, mask_x_);
         (MaskY_, mask_y_)]
     
  end
  module NavHighlightFlags = struct
    type t =
    | None
    | Compact
    | AlwaysDraw
    | NoRounding
    
    let none = constant "ImGuiNavHighlightFlags_None" int64_t
    let compact = constant "ImGuiNavHighlightFlags_Compact" int64_t
    let always_draw = constant "ImGuiNavHighlightFlags_AlwaysDraw" int64_t
    let no_rounding = constant "ImGuiNavHighlightFlags_NoRounding" int64_t
    
    let t : t typ =
      enum "ImGuiNavHighlightFlags_" ~typedef:true
        [(None, none);
         (Compact, compact);
         (AlwaysDraw, always_draw);
         (NoRounding, no_rounding)]
     
  end
  module NavMoveFlags = struct
    type t =
    | None
    | LoopX
    | LoopY
    | WrapX
    | WrapY
    | WrapMask_
    | AllowCurrentNavId
    | AlsoScoreVisibleSet
    | ScrollToEdgeY
    | Forwarded
    | DebugNoResult
    | FocusApi
    | IsTabbing
    | IsPageMove
    | Activate
    | NoSelect
    | NoSetNavHighlight
    | NoClearActiveId
    
    let none = constant "ImGuiNavMoveFlags_None" int64_t
    let loop_x = constant "ImGuiNavMoveFlags_LoopX" int64_t
    let loop_y = constant "ImGuiNavMoveFlags_LoopY" int64_t
    let wrap_x = constant "ImGuiNavMoveFlags_WrapX" int64_t
    let wrap_y = constant "ImGuiNavMoveFlags_WrapY" int64_t
    let wrap_mask_ = constant "ImGuiNavMoveFlags_WrapMask_" int64_t
    let allow_current_nav_id =
      constant "ImGuiNavMoveFlags_AllowCurrentNavId" int64_t
    let also_score_visible_set =
      constant "ImGuiNavMoveFlags_AlsoScoreVisibleSet" int64_t
    let scroll_to_edge_y = constant "ImGuiNavMoveFlags_ScrollToEdgeY" int64_t
    let forwarded = constant "ImGuiNavMoveFlags_Forwarded" int64_t
    let debug_no_result = constant "ImGuiNavMoveFlags_DebugNoResult" int64_t
    let focus_api = constant "ImGuiNavMoveFlags_FocusApi" int64_t
    let is_tabbing = constant "ImGuiNavMoveFlags_IsTabbing" int64_t
    let is_page_move = constant "ImGuiNavMoveFlags_IsPageMove" int64_t
    let activate = constant "ImGuiNavMoveFlags_Activate" int64_t
    let no_select = constant "ImGuiNavMoveFlags_NoSelect" int64_t
    let no_set_nav_highlight =
      constant "ImGuiNavMoveFlags_NoSetNavHighlight" int64_t
    let no_clear_active_id =
      constant "ImGuiNavMoveFlags_NoClearActiveId" int64_t
    
    let t : t typ =
      enum "ImGuiNavMoveFlags_" ~typedef:true
        [(None, none);
         (LoopX, loop_x);
         (LoopY, loop_y);
         (WrapX, wrap_x);
         (WrapY, wrap_y);
         (WrapMask_, wrap_mask_);
         (AllowCurrentNavId, allow_current_nav_id);
         (AlsoScoreVisibleSet, also_score_visible_set);
         (ScrollToEdgeY, scroll_to_edge_y);
         (Forwarded, forwarded);
         (DebugNoResult, debug_no_result);
         (FocusApi, focus_api);
         (IsTabbing, is_tabbing);
         (IsPageMove, is_page_move);
         (Activate, activate);
         (NoSelect, no_select);
         (NoSetNavHighlight, no_set_nav_highlight);
         (NoClearActiveId, no_clear_active_id)]
     
  end
  module NavLayer = struct
    type t =
    | Main
    | Menu
    | COUNT
    
    let main = constant "ImGuiNavLayer_Main" int64_t
    let menu = constant "ImGuiNavLayer_Menu" int64_t
    let count = constant "ImGuiNavLayer_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiNavLayer" ~typedef:true
        [(Main, main); (Menu, menu); (COUNT, count)]
     
  end
  module TypingSelectFlags = struct
    type t =
    | None
    | AllowBackspace
    | AllowSingleCharMode
    
    let none = constant "ImGuiTypingSelectFlags_None" int64_t
    let allow_backspace =
      constant "ImGuiTypingSelectFlags_AllowBackspace" int64_t
    let allow_single_char_mode =
      constant "ImGuiTypingSelectFlags_AllowSingleCharMode" int64_t
    
    let t : t typ =
      enum "ImGuiTypingSelectFlags_" ~typedef:true
        [(None, none);
         (AllowBackspace, allow_backspace);
         (AllowSingleCharMode, allow_single_char_mode)]
     
  end
  module OldColumnFlags = struct
    type t =
    | None
    | NoBorder
    | NoResize
    | NoPreserveWidths
    | NoForceWithinWindow
    | GrowParentContentsSize
    
    let none = constant "ImGuiOldColumnFlags_None" int64_t
    let no_border = constant "ImGuiOldColumnFlags_NoBorder" int64_t
    let no_resize = constant "ImGuiOldColumnFlags_NoResize" int64_t
    let no_preserve_widths =
      constant "ImGuiOldColumnFlags_NoPreserveWidths" int64_t
    let no_force_within_window =
      constant "ImGuiOldColumnFlags_NoForceWithinWindow" int64_t
    let grow_parent_contents_size =
      constant "ImGuiOldColumnFlags_GrowParentContentsSize" int64_t
    
    let t : t typ =
      enum "ImGuiOldColumnFlags_" ~typedef:true
        [(None, none);
         (NoBorder, no_border);
         (NoResize, no_resize);
         (NoPreserveWidths, no_preserve_widths);
         (NoForceWithinWindow, no_force_within_window);
         (GrowParentContentsSize, grow_parent_contents_size)]
     
  end
  module DockNodeFlagsPrivate = struct
    type t =
    | DockSpace
    | CentralNode
    | NoTabBar
    | HiddenTabBar
    | NoWindowMenuButton
    | NoCloseButton
    | NoResizeX
    | NoResizeY
    | DockedWindowsInFocusRoute
    | NoDockingSplitOther
    | NoDockingOverMe
    | NoDockingOverOther
    | NoDockingOverEmpty
    | NoDocking
    | SharedFlagsInheritMask_
    | NoResizeFlagsMask_
    | LocalFlagsTransferMask_
    | SavedFlagsMask_
    
    let dock_space = constant "ImGuiDockNodeFlags_DockSpace" int64_t
    let central_node = constant "ImGuiDockNodeFlags_CentralNode" int64_t
    let no_tab_bar = constant "ImGuiDockNodeFlags_NoTabBar" int64_t
    let hidden_tab_bar = constant "ImGuiDockNodeFlags_HiddenTabBar" int64_t
    let no_window_menu_button =
      constant "ImGuiDockNodeFlags_NoWindowMenuButton" int64_t
    let no_close_button = constant "ImGuiDockNodeFlags_NoCloseButton" int64_t
    let no_resize_x = constant "ImGuiDockNodeFlags_NoResizeX" int64_t
    let no_resize_y = constant "ImGuiDockNodeFlags_NoResizeY" int64_t
    let docked_windows_in_focus_route =
      constant "ImGuiDockNodeFlags_DockedWindowsInFocusRoute" int64_t
    let no_docking_split_other =
      constant "ImGuiDockNodeFlags_NoDockingSplitOther" int64_t
    let no_docking_over_me =
      constant "ImGuiDockNodeFlags_NoDockingOverMe" int64_t
    let no_docking_over_other =
      constant "ImGuiDockNodeFlags_NoDockingOverOther" int64_t
    let no_docking_over_empty =
      constant "ImGuiDockNodeFlags_NoDockingOverEmpty" int64_t
    let no_docking = constant "ImGuiDockNodeFlags_NoDocking" int64_t
    let shared_flags_inherit_mask_ =
      constant "ImGuiDockNodeFlags_SharedFlagsInheritMask_" int64_t
    let no_resize_flags_mask_ =
      constant "ImGuiDockNodeFlags_NoResizeFlagsMask_" int64_t
    let local_flags_transfer_mask_ =
      constant "ImGuiDockNodeFlags_LocalFlagsTransferMask_" int64_t
    let saved_flags_mask_ =
      constant "ImGuiDockNodeFlags_SavedFlagsMask_" int64_t
    
    let t : t typ =
      enum "ImGuiDockNodeFlagsPrivate_" ~typedef:true
        [(DockSpace, dock_space);
         (CentralNode, central_node);
         (NoTabBar, no_tab_bar);
         (HiddenTabBar, hidden_tab_bar);
         (NoWindowMenuButton, no_window_menu_button);
         (NoCloseButton, no_close_button);
         (NoResizeX, no_resize_x);
         (NoResizeY, no_resize_y);
         (DockedWindowsInFocusRoute, docked_windows_in_focus_route);
         (NoDockingSplitOther, no_docking_split_other);
         (NoDockingOverMe, no_docking_over_me);
         (NoDockingOverOther, no_docking_over_other);
         (NoDockingOverEmpty, no_docking_over_empty);
         (NoDocking, no_docking);
         (SharedFlagsInheritMask_, shared_flags_inherit_mask_);
         (NoResizeFlagsMask_, no_resize_flags_mask_);
         (LocalFlagsTransferMask_, local_flags_transfer_mask_);
         (SavedFlagsMask_, saved_flags_mask_)]
     
  end
  module DataAuthority = struct
    type t =
    | Auto
    | DockNode
    | Window
    
    let auto = constant "ImGuiDataAuthority_Auto" int64_t
    let dock_node = constant "ImGuiDataAuthority_DockNode" int64_t
    let window = constant "ImGuiDataAuthority_Window" int64_t
    
    let t : t typ =
      enum "ImGuiDataAuthority_" ~typedef:true
        [(Auto, auto); (DockNode, dock_node); (Window, window)]
     
  end
  module DockNodeState = struct
    type t =
    | Unknown
    | HostWindowHiddenBecauseSingleWindow
    | HostWindowHiddenBecauseWindowsAreResizing
    | HostWindowVisible
    
    let unknown = constant "ImGuiDockNodeState_Unknown" int64_t
    let host_window_hidden_because_single_window =
      constant "ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow" int64_t
    let host_window_hidden_because_windows_are_resizing =
      constant "ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing"
        int64_t
    let host_window_visible =
      constant "ImGuiDockNodeState_HostWindowVisible" int64_t
    
    let t : t typ =
      enum "ImGuiDockNodeState" ~typedef:true
        [(Unknown, unknown);
         (HostWindowHiddenBecauseSingleWindow, host_window_hidden_because_single_window);
         (HostWindowHiddenBecauseWindowsAreResizing, host_window_hidden_because_windows_are_resizing);
         (HostWindowVisible, host_window_visible)]
     
  end
  module WindowDockStyleCol = struct
    type t =
    | Text
    | Tab
    | TabHovered
    | TabActive
    | TabUnfocused
    | TabUnfocusedActive
    | COUNT
    
    let text = constant "ImGuiWindowDockStyleCol_Text" int64_t
    let tab = constant "ImGuiWindowDockStyleCol_Tab" int64_t
    let tab_hovered = constant "ImGuiWindowDockStyleCol_TabHovered" int64_t
    let tab_active = constant "ImGuiWindowDockStyleCol_TabActive" int64_t
    let tab_unfocused = constant "ImGuiWindowDockStyleCol_TabUnfocused" int64_t
    let tab_unfocused_active =
      constant "ImGuiWindowDockStyleCol_TabUnfocusedActive" int64_t
    let count = constant "ImGuiWindowDockStyleCol_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiWindowDockStyleCol" ~typedef:true
        [(Text, text);
         (Tab, tab);
         (TabHovered, tab_hovered);
         (TabActive, tab_active);
         (TabUnfocused, tab_unfocused);
         (TabUnfocusedActive, tab_unfocused_active);
         (COUNT, count)]
     
  end
  module LocKey = struct
    type t =
    | VersionStr
    | TableSizeOne
    | TableSizeAllFit
    | TableSizeAllDefault
    | TableResetOrder
    | WindowingMainMenuBar
    | WindowingPopup
    | WindowingUntitled
    | DockingHideTabBar
    | DockingHoldShiftToDock
    | DockingDragToUndockOrMoveNode
    | COUNT
    
    let version_str = constant "ImGuiLocKey_VersionStr" int64_t
    let table_size_one = constant "ImGuiLocKey_TableSizeOne" int64_t
    let table_size_all_fit = constant "ImGuiLocKey_TableSizeAllFit" int64_t
    let table_size_all_default =
      constant "ImGuiLocKey_TableSizeAllDefault" int64_t
    let table_reset_order = constant "ImGuiLocKey_TableResetOrder" int64_t
    let windowing_main_menu_bar =
      constant "ImGuiLocKey_WindowingMainMenuBar" int64_t
    let windowing_popup = constant "ImGuiLocKey_WindowingPopup" int64_t
    let windowing_untitled = constant "ImGuiLocKey_WindowingUntitled" int64_t
    let docking_hide_tab_bar = constant "ImGuiLocKey_DockingHideTabBar" int64_t
    let docking_hold_shift_to_dock =
      constant "ImGuiLocKey_DockingHoldShiftToDock" int64_t
    let docking_drag_to_undock_or_move_node =
      constant "ImGuiLocKey_DockingDragToUndockOrMoveNode" int64_t
    let count = constant "ImGuiLocKey_COUNT" int64_t
    
    let t : t typ =
      enum "ImGuiLocKey" ~typedef:true
        [(VersionStr, version_str);
         (TableSizeOne, table_size_one);
         (TableSizeAllFit, table_size_all_fit);
         (TableSizeAllDefault, table_size_all_default);
         (TableResetOrder, table_reset_order);
         (WindowingMainMenuBar, windowing_main_menu_bar);
         (WindowingPopup, windowing_popup);
         (WindowingUntitled, windowing_untitled);
         (DockingHideTabBar, docking_hide_tab_bar);
         (DockingHoldShiftToDock, docking_hold_shift_to_dock);
         (DockingDragToUndockOrMoveNode, docking_drag_to_undock_or_move_node);
         (COUNT, count)]
     
  end
  module DebugLogFlags = struct
    type t =
    | None
    | EventActiveId
    | EventFocus
    | EventPopup
    | EventNav
    | EventClipper
    | EventSelection
    | EventIO
    | EventInputRouting
    | EventDocking
    | EventViewport
    | EventMask_
    | OutputToTTY
    | OutputToTestEngine
    
    let none = constant "ImGuiDebugLogFlags_None" int64_t
    let event_active_id = constant "ImGuiDebugLogFlags_EventActiveId" int64_t
    let event_focus = constant "ImGuiDebugLogFlags_EventFocus" int64_t
    let event_popup = constant "ImGuiDebugLogFlags_EventPopup" int64_t
    let event_nav = constant "ImGuiDebugLogFlags_EventNav" int64_t
    let event_clipper = constant "ImGuiDebugLogFlags_EventClipper" int64_t
    let event_selection = constant "ImGuiDebugLogFlags_EventSelection" int64_t
    let event_io = constant "ImGuiDebugLogFlags_EventIO" int64_t
    let event_input_routing =
      constant "ImGuiDebugLogFlags_EventInputRouting" int64_t
    let event_docking = constant "ImGuiDebugLogFlags_EventDocking" int64_t
    let event_viewport = constant "ImGuiDebugLogFlags_EventViewport" int64_t
    let event_mask_ = constant "ImGuiDebugLogFlags_EventMask_" int64_t
    let output_to_tty = constant "ImGuiDebugLogFlags_OutputToTTY" int64_t
    let output_to_test_engine =
      constant "ImGuiDebugLogFlags_OutputToTestEngine" int64_t
    
    let t : t typ =
      enum "ImGuiDebugLogFlags_" ~typedef:true
        [(None, none);
         (EventActiveId, event_active_id);
         (EventFocus, event_focus);
         (EventPopup, event_popup);
         (EventNav, event_nav);
         (EventClipper, event_clipper);
         (EventSelection, event_selection);
         (EventIO, event_io);
         (EventInputRouting, event_input_routing);
         (EventDocking, event_docking);
         (EventViewport, event_viewport);
         (EventMask_, event_mask_);
         (OutputToTTY, output_to_tty);
         (OutputToTestEngine, output_to_test_engine)]
     
  end
  module ContextHookType = struct
    type t =
    | NewFramePre
    | NewFramePost
    | EndFramePre
    | EndFramePost
    | RenderPre
    | RenderPost
    | Shutdown
    | PendingRemoval_
    
    let new_frame_pre = constant "ImGuiContextHookType_NewFramePre" int64_t
    let new_frame_post = constant "ImGuiContextHookType_NewFramePost" int64_t
    let end_frame_pre = constant "ImGuiContextHookType_EndFramePre" int64_t
    let end_frame_post = constant "ImGuiContextHookType_EndFramePost" int64_t
    let render_pre = constant "ImGuiContextHookType_RenderPre" int64_t
    let render_post = constant "ImGuiContextHookType_RenderPost" int64_t
    let shutdown = constant "ImGuiContextHookType_Shutdown" int64_t
    let pending_removal_ =
      constant "ImGuiContextHookType_PendingRemoval_" int64_t
    
    let t : t typ =
      enum "ImGuiContextHookType" ~typedef:true
        [(NewFramePre, new_frame_pre);
         (NewFramePost, new_frame_post);
         (EndFramePre, end_frame_pre);
         (EndFramePost, end_frame_post);
         (RenderPre, render_pre);
         (RenderPost, render_post);
         (Shutdown, shutdown);
         (PendingRemoval_, pending_removal_)]
     
  end
  module TabBarFlagsPrivate = struct
    type t =
    | DockNode
    | IsFocused
    | SaveSettings
    
    let dock_node = constant "ImGuiTabBarFlags_DockNode" int64_t
    let is_focused = constant "ImGuiTabBarFlags_IsFocused" int64_t
    let save_settings = constant "ImGuiTabBarFlags_SaveSettings" int64_t
    
    let t : t typ =
      enum "ImGuiTabBarFlagsPrivate_" ~typedef:true
        [(DockNode, dock_node);
         (IsFocused, is_focused);
         (SaveSettings, save_settings)]
     
  end
  module TabItemFlagsPrivate = struct
    type t =
    | SectionMask_
    | NoCloseButton
    | Button
    | Unsorted
    
    let section_mask_ = constant "ImGuiTabItemFlags_SectionMask_" int64_t
    let no_close_button = constant "ImGuiTabItemFlags_NoCloseButton" int64_t
    let button = constant "ImGuiTabItemFlags_Button" int64_t
    let unsorted = constant "ImGuiTabItemFlags_Unsorted" int64_t
    
    let t : t typ =
      enum "ImGuiTabItemFlagsPrivate_" ~typedef:true
        [(SectionMask_, section_mask_);
         (NoCloseButton, no_close_button);
         (Button, button);
         (Unsorted, unsorted)]
     
  end
  
end
